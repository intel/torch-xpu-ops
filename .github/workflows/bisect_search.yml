name: Bisect Search

on:
  workflow_dispatch:
    inputs:
      runner:
        required: true
        type: string
        default: 'pvc_rolling'
        description: Test node
      search_commits:
        required: true
        type: string
        default: ''
        description: Target commits, such as 'pytorch=old/new,xpu-ops=old/new'
      search_check:
        type: string
        default: ''
        description: Test case type, 'performance, accuracy, <op_regressions/op_extended/ut_xpu> or others'
      search_case:
        required: true
        type: string
        default: ''
        description: Test case, such as 'python xxx.py or pytest -k xxx'
      search_criteria:
        type: string
        default: '0.1'
        description: Criteria for performance check, default is 10%
      oneapi:
        type: string
        default: '2025.2'
        description: Installed oneAPI DLE on host by default, fill offline.sh url if needed
      python:
        type: string
        default: '3.10'
        description: Python version

permissions: read-all

defaults:
  run:
    shell: bash -xe {0}

jobs:
  get_runner:
    runs-on: ${{ inputs.runner }}
    outputs:
      runner_id: ${{ steps.runner-info.outputs.runner_id }}
      user_id: ${{ steps.runner-info.outputs.user_id }}
      render_id: ${{ steps.runner-info.outputs.render_id }}
      hostname: ${{ steps.runner-info.outputs.hostname }}
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Get runner
        id: runner-info
        uses: ./.github/actions/get-runner

  biisect-search:
    needs: get_runner
    runs-on: ${{ needs.get_runner.outputs.runner_id }}
    container:
      image: mengfeili/intel-pvc-driver:1146-1136
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
      options: --device=/dev/mem --device=/dev/dri --group-add video --privileged --shm-size=8g
              -u ${{ needs.get_runner.outputs.user_id }} --group-add ${{ needs.get_runner.outputs.render_id }}
      env:
        AGENT_TOOLSDIRECTORY: /tmp/xpu-tool
        SEARCH_COMMITS: ${{ inputs.search_commits }}
        SEARCH_CHECK: ${{ inputs.search_check }}
        SEARCH_CASE: ${{ inputs.search_case }}
        SEARCH_CRITERIA: ${{ inputs.search_criteria }}
        TORCH_XPU_ARCH_LIST: pvc
        USE_XCCL: 0
        USE_KINETO: 0
    env:
       GH_TOKEN: ${{ github.token }}
       HF_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
       HUGGING_FACE_HUB_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
        with:
          path: gs-scripts
      - name: Prepare test env
        uses: ./gs-scripts/.github/actions/linux-testenv
        with:
          pytorch: main
          python: ${{ inputs.python }}
      - name: Install oneAPI DLE
        if: ${{ inputs.oneapi != 'installed' }}
        run: |
          rm -rf ~/intel ~/.intel /tmp/intel
          if [ "${{ inputs.oneapi }}" == "2025.1" ];then
            ONEAPI_URL="https://registrationcenter-download.intel.com/akdlm/IRC_NAS/3435dc45-055e-4f7a-86b1-779931772404/intel-deep-learning-essentials-2025.1.3.7_offline.sh"
          elif [ "${{ inputs.oneapi }}" == "2025.2" ];then
            ONEAPI_URL="https://registrationcenter-download.intel.com/akdlm/IRC_NAS/de3686c4-d3e1-41da-bf3b-bf5908da075c/intel-deep-learning-essentials-2025.2.1.24_offline.sh"
          else
            ONEAPI_URL="${{ inputs.oneapi }}"
          fi
          wget -q -O oneapi.sh "${ONEAPI_URL}"
          bash oneapi.sh -a -s --eula accept --action install --install-dir /tmp/intel/oneapi
          echo "XPU_ONEAPI_PATH=/tmp/intel/oneapi" >> ${GITHUB_ENV}

      - name: Summary file
        run: |
          mkdir -p gs-logs
          echo "Status,Acc,Perf,PyTorch,Torch-xpu-ops" > gs-logs/summary.csv
      - name: Get latest versions
        run: |
          cd pytorch
          LATEST_PT_COMMIT="$(git rev-parse HEAD)"
          cd third_party/torch-xpu-ops
          LATEST_XPU_COMMIT="$(git rev-parse HEAD)"
          echo "LATEST_PT_COMMIT=${LATEST_PT_COMMIT}" >> ${GITHUB_ENV}
          echo "LATEST_XPU_COMMIT=${LATEST_XPU_COMMIT}" >> ${GITHUB_ENV}
      - name: Prepare test env
        run: |
          if [[ "${{ inputs.search_case }}" == *"benchmarks/dynamo/huggingface.py"* ]];then
            pip install transformers
          elif [[ "${{ inputs.search_case }}" == *"benchmarks/dynamo/timm_models.py"* ]];then
            pip install timm
          elif [[ "${{ inputs.search_case }}" == *"benchmarks/dynamo/torchbench.py"* ]];then
            model_name="$(echo ${{ inputs.search_case }} |sed 's+.*\--only *++;s/ .*//')"
            git clone https://github.com/pytorch/benchmark gs-benchmark
            cd gs-benchmark
            pip install -r requirements.txt
            echo "PYTHONPATH=${PWD}:${PYTHONPATH}" >> ${GITHUB_ENV}
            python install.py ${model_name}
            cd ..
          fi
          pip uninstall -y torch torchvision torchaudio
          git clone https://github.com/pytorch/vision gs-vision
          cd gs-vision
          python setup.py install
          cd ..
      - name: Bisect search pytorch
        if: ${{ contains(inputs.search_commits, 'pytorch') }}
        run: |
          pytorch_commits="$(echo ${{ inputs.search_commits }} |sed 's+.*pytorch=++;s+,.*++')"
          old_commit="$(echo ${pytorch_commits} |awk -F '/' '{print $1}')"
          new_commit="$(echo ${pytorch_commits} |awk -F '/' '{print $2}')"
          old_status="$(${{ github.workspace }}/gs-scripts/.github/scripts/bisect_search.sh \
                  --WORKSPACE="${{ github.workspace }}/gs-search" \
                  --PYTORCH_VERSION="${old_commit}" \
                  --TORCH_XPU_OPS_VERSION="${LATEST_XPU_COMMIT}" \
                  > ${{ github.workspace }}/gs-logs/search-${old_commit}-${LATEST_XPU_COMMIT}.log 2>&1 && echo $? || echo $?)"
          old_result="$(tail -n 1 ${{ github.workspace }}/gs-search/result.csv)"
          export SEARCH_GOOD_VALUE="$(echo ${old_result} |awk -F, '{print $3}')"
          new_status="$(${{ github.workspace }}/gs-scripts/.github/scripts/bisect_search.sh \
                  --WORKSPACE="${{ github.workspace }}/gs-search" \
                  --PYTORCH_VERSION="${new_commit}" \
                  --TORCH_XPU_OPS_VERSION="${LATEST_XPU_COMMIT}" \
                  > ${{ github.workspace }}/gs-logs/search-${new_commit}-${LATEST_XPU_COMMIT}.log 2>&1 && echo $? || echo $?)"
          new_result="$(tail -n 1 ${{ github.workspace }}/gs-search/result.csv)"
          if [ "${old_status}" != "${new_status}" ];then
            cd pytorch
            git reset --hard
            rsync -avz --delete ${{ github.workspace }}/gs-scripts/ gs-scripts/
            git bisect start ${new_commit} ${old_commit}
            git bisect run ./gs-scripts/.github/scripts/bisect_search.sh \
                    --WORKSPACE="${{ github.workspace }}/gs-search" \
                    --PYTORCH_VERSION="search" \
                    --TORCH_XPU_OPS_VERSION="${LATEST_XPU_COMMIT}" \
                    2>&1 |tee ${{ github.workspace }}/gs-logs/bisect-pytorch.log
            git bisect log |tee ${{ github.workspace }}/gs-logs/result-pytorch.log
          else
            echo "Checked and no regression !"
          fi
      - name: Bisect search torch-xpu-ops
        if: ${{ contains(inputs.search_commits, 'xpu-ops') }}
        run: |
          xpu_ops_commits="$(echo ${{ inputs.search_commits }} |sed 's+.*xpu-ops=++;s+,.*++')"
          old_commit="$(echo ${xpu_ops_commits} |awk -F '/' '{print $1}')"
          new_commit="$(echo ${xpu_ops_commits} |awk -F '/' '{print $2}')"
          old_status="$(${{ github.workspace }}/gs-scripts/.github/scripts/bisect_search.sh \
                  --WORKSPACE="${{ github.workspace }}/gs-search" \
                  --PYTORCH_VERSION="${LATEST_PT_COMMIT}" \
                  --TORCH_XPU_OPS_VERSION="${old_commit}" \
                  > ${{ github.workspace }}/gs-logs/search-${LATEST_PT_COMMIT}-${old_commit}.log && echo $? || echo $?)"
          old_result="$(tail -n 1 ${{ github.workspace }}/gs-search/result.csv)"
          export SEARCH_GOOD_VALUE="$(echo ${old_result} |awk -F, '{print $3}')"
          new_status="$(${{ github.workspace }}/gs-scripts/.github/scripts/bisect_search.sh \
                  --WORKSPACE="${{ github.workspace }}/gs-search" \
                  --PYTORCH_VERSION="${LATEST_PT_COMMIT}" \
                  --TORCH_XPU_OPS_VERSION="${new_commit}" \
                  > ${{ github.workspace }}/gs-logs/search-${LATEST_PT_COMMIT}-${new_commit}.log && echo $? || echo $?)"
          new_result="$(tail -n 1 ${{ github.workspace }}/gs-search/result.csv)"
          if [ "${old_status}" != "${new_status}" ];then
            cd pytorch
            git reset --hard
            rsync -avz --delete ${{ github.workspace }}/gs-scripts/ gs-scripts/
            git bisect start ${new_commit} ${old_commit}
            git bisect run ./gs-scripts/.github/scripts/bisect_search.sh \
                    --WORKSPACE="${{ github.workspace }}/gs-search" \
                    --PYTORCH_VERSION="${LATEST_PT_COMMIT}" \
                    --TORCH_XPU_OPS_VERSION="search" \
                    2>&1 |tee ${{ github.workspace }}/gs-logs/bisect-torch-xpu-ops.log
            git bisect log |tee ${{ github.workspace }}/gs-logs/result-torch-xpu-ops.log
          else
            echo "Checked and no regression !"
          fi
      - name: Summary
        run: |
          cat gs-logs/summary.csv |tee -a ${GITHUB_STEP_SUMMARY}
          for reulst_log in $(find  gs-logs -name "result-*.log")
          do
            echo -e "\n\n\n${reulst_log}" |tee -a ${GITHUB_STEP_SUMMARY}
            cat ${reulst_log} |tee -a ${GITHUB_STEP_SUMMARY}
          done
      - name: Upload Logs
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: bisect-search
          path: ${{ github.workspace }}/gs-logs
