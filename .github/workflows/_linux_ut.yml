name: Linux UT Test

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
        description: Runner label
      test_type:
        required: true
        type: string
        description: Test scope
      pytorch:
        type: string
        default: 'main'
        description: Pytorch main by default, or 'commit/branch', or 'repo@commit/repo@branch'
      torch_xpu_ops:
        type: string
        default: 'main'
        description: Torch-xpu-ops main by default, 'commit/branch', or 'repo@commit/repo@branch', or 'pinned' for pytorch pin
      oneapi:
        type: string
        default: 'installed'
        description: Installed oneAPI DLE on host by default, fill offline.sh url if needed
      python:
        type: string
        default: '3.10'
        description: Python version
      ut:
        required: true
        type: string
        description: UT scope. `ut_regression,ut_transformers,ut_extended,ut_op,ut_torch,xpu_dev1` Delimiter is comma
      disabled_tests:
        type: string
        default: ''
        description: List disabled tests, such as disable_ut or disable_distributed

permissions: read-all

defaults:
  run:
    shell: bash -xe {0}

jobs:
  runner:
    runs-on: ${{ inputs.runner }}
    outputs:
      runner_id: ${{ steps.runner-info.outputs.runner_id }}
      user_id: ${{ steps.runner-info.outputs.user_id }}
      render_id: ${{ steps.runner-info.outputs.render_id }}
      hostname: ${{ steps.runner-info.outputs.hostname }}
    steps:
      - name: Cleanup workspace
        run: |
          sudo find ./ |grep -v "^\./$" |xargs sudo rm -rf
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Get runner
        id: runner-info
        uses: ./.github/actions/get-runner

  normal:
    needs: runner
    runs-on: ${{ needs.runner.outputs.runner_id }}
    if: ${{ contains(inputs.ut, 'ut_') && !contains(inputs.disabled_tests, 'disable_ut') }}
    timeout-minutes: 300
    container:
      image: mengfeili/intel-pvc-driver:1146-1136
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
      options: --device=/dev/mem --device=/dev/dri --group-add video --security-opt seccomp=unconfined --cap-add=SYS_PTRACE --shm-size=8g
              -u ${{ needs.runner.outputs.user_id }}:${{ needs.runner.outputs.render_id }}
              -e ZE_AFFINITY_MASK
      env:
        AGENT_TOOLSDIRECTORY: /tmp/xpu-tool
        GH_TOKEN: ${{ github.token }}
        HUGGING_FACE_HUB_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        test: [ut_regression, ut_transformers, ut_extended, ut_op, ut_torch, ut_profiling]
    steps:
      - name: Cleanup workspace
        if: ${{ contains(inputs.ut, matrix.test) }}
        run: |
          find ./ |grep -v "^\./$" |xargs rm -rf
      - name: Checkout torch-xpu-ops
        if: ${{ contains(inputs.ut, matrix.test) }}
        uses: actions/checkout@v4
      - name: Launch Test on ${{ needs.runner.outputs.hostname }}
        if: ${{ contains(inputs.ut, matrix.test) }}
        uses: ./.github/actions/linux-testenv
        with:
          test_type: ${{ inputs.test_type }}
          pytorch: ${{ inputs.pytorch }}
          torch_xpu_ops: ${{ inputs.torch_xpu_ops }}
          oneapi: ${{ inputs.oneapi }}
          python: ${{ inputs.python }}
      - name: Run XPU UT Test
        if: ${{ contains(inputs.ut, matrix.test) }}
        uses: ./.github/actions/linux-uttest
        with:
          test_type: ${{ matrix.test }}
      - name: UT Test Results Summary
        if: ${{ contains(inputs.ut, matrix.test) }}
        run: |
          pip install junitparser
          python ./.github/scripts/check-ut.py ${{ github.workspace }}/ut_log/*.xml >> $GITHUB_STEP_SUMMARY || true
          if [ -e ut_failure_list.csv ];then
              cp ut_failure_list.csv ${{ github.workspace }}/ut_log/ut_failure_list.csv || true
          fi
      - name: Upload Inductor XPU UT Log
        if: ${{ contains(inputs.ut, matrix.test) }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ matrix.test }}
          path: ${{ github.workspace }}/ut_log
      - name: Upload XPU UT Failure list
        if: ${{ contains(inputs.ut, matrix.test) }}
        uses: actions/upload-artifact@v4
        with:
          name: XPU-UT-Failure-List-${{ github.event.pull_request.number || github.sha }}-${{ matrix.test }}
          path: ${{ github.workspace }}/ut_log/ut_failure_list.csv

  devices:
    runs-on: pvc_rolling
    if: ${{ contains(inputs.ut, 'xpu_dev1') && !contains(inputs.disabled_tests, 'disable_ut') }}
    timeout-minutes: 5
    env:
      GH_TOKEN: ${{ github.token }}
      AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/xpu-tool
    steps:
      - name: Cleanup workspace
        id: cleanup
        run: |
          cat /etc/os-release
          echo "hostname=$(hostname)" |tee -a ${GITHUB_OUTPUT}
          ls -al
          sudo find ./ |grep -v "^\./$" |xargs sudo rm -rf
          sudo find /tmp/ |grep -v "^/tmp/$" |xargs sudo rm -rf
          sudo rm -rf ~/.triton ~/.torch
          xpu-smi discovery
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Launch Test on ${{ steps.cleanup.outputs.hostname }}
        uses: ./.github/actions/linux-testenv
        with:
          test_type: ${{ inputs.test_type }}
          pytorch: ${{ inputs.pytorch }}
          torch_xpu_ops: ${{ inputs.torch_xpu_ops }}
          oneapi: ${{ inputs.oneapi }}
          python: ${{ inputs.python }}
      - name: Run XPU UT Test
        uses: ./.github/actions/linux-uttest
        with:
          test_type: xpu_dev1
      - name: Upload Inductor XPU UT Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-xpu_dev1
          path: ${{ github.workspace }}/ut_log

  distributed:
    runs-on: pytorch-06
    if: ${{ contains(inputs.ut, 'xpu_distributed') && !contains(inputs.disabled_tests, 'disable_distribute') }}
    timeout-minutes: 60
    env:
      GH_TOKEN: ${{ github.token }}
      AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/xpu-tool
    steps:
      - name: Cleanup workspace
        id: cleanup
        run: |
          cat /etc/os-release
          echo "hostname=$(hostname)" |tee -a ${GITHUB_OUTPUT}
          ls -al
          sudo find ./ |grep -v "^\./$" |xargs sudo rm -rf
          sudo find /tmp/ |grep -v "^/tmp/$" |xargs sudo rm -rf
          sudo rm -rf ~/.triton ~/.torch
          xpu-smi topology -m
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Launch Test on ${{ steps.cleanup.outputs.hostname }}
        uses: ./.github/actions/linux-testenv
        with:
          test_type: ${{ inputs.test_type }}
          pytorch: ${{ inputs.pytorch }}
          torch_xpu_ops: ${{ inputs.torch_xpu_ops }}
          oneapi: ${{ inputs.oneapi }}
          python: ${{ inputs.python }}
      - name: Set Ptrace_scope
        if: ${{ always() }}
        run: |
          set -x -e -u -o pipefail
          sudo rm -rf ptrace_scope.bk
          sudo cp /proc/sys/kernel/yama/ptrace_scope ptrace_scope.bk
          cat ptrace_scope.bk
          echo "0" |sudo tee /proc/sys/kernel/yama/ptrace_scope
      - name: Run Torch XPU Distributed UT
        uses: ./.github/actions/linux-uttest
        with:
          test_type: xpu_distributed
      - name: Reset Ptrace_scope
        if: ${{ always() }}
        run: |
          if [ -f ptrace_scope.bk ]; then
            sudo cp ptrace_scope.bk /proc/sys/kernel/yama/ptrace_scope
          fi
      - name: Upload Inductor XPU UT Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-xpu_distributed
          path: ${{ github.workspace }}/ut_log

  summary:
    needs: [normal, devices, distributed]
    if: ${{ ! cancelled() }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        test: [ut_regression, ut_transformers, ut_extended, ut_op, ut_torch, ut_profiling, xpu_dev1, xpu_distributed]
    env:
      GH_TOKEN: ${{ github.token }}
      UT_SKIP_ISSUE: 1624
    steps:
      - name: Cleanup workspace
        if: ${{ contains(inputs.ut, matrix.test) }}
        run: |
          find ./ |grep -v "^\./$" |xargs rm -rf
      - name: Checkout torch-xpu-ops
        if: ${{ contains(inputs.ut, matrix.test) }}
        uses: actions/checkout@v4
      - name: Download XPU UT Logs
        if: ${{ contains(inputs.ut, matrix.test) }}
        uses: actions/download-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ matrix.test }}
          path: ${{ github.workspace }}/ut_log
      - name: Check UT Results
        if: ${{ contains(inputs.ut, matrix.test) }}
        shell: bash
        run: |
          repo="${{ github.repository }}"
          ls -al ${{ github.workspace }}/ut_log
          cd ${{ github.workspace }}/ut_log/${{ matrix.test }}
          gh --repo $repo issue view $UT_SKIP_ISSUE --json body -q .body | sed '/^$/d' > Known_issue.log
          gh api "repos/${{ github.repository }}/issues?labels=skipped" \
            --jq '.[] | select(.pull_request == null) | "Issue #\(.number): \(.title)\n\(.body)\n"' > issues.log
          awk '/Cases:/ {flag=1; next} /^\|\||^$/ {flag=0} flag' issues.log | \
            grep -Eo 'test[^[:space:]]+( \|\| [^[:space:]]+)?' | sed 's/ *|| */ /g' | sort -u > issues_temp.log
          awk '$2 == "ut_op" {print $1}' issues_temp.log > issues_ut_op.log
          cat issues_temp.log | awk '{print $1}' >> Known_issue.log
          awk -F'::' '{print $1}' issues_ut_op.log | sort -u | paste -sd ',' >> Known_issue.log
          cp ${{ github.workspace }}/.github/scripts/ut_result_check.sh ./
          bash ut_result_check.sh ${{ matrix.test }}
      - name: Upload Inductor XPU UT Log
        if: ${{ contains(inputs.ut, matrix.test) }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ matrix.test }}-checked
          path: ${{ github.workspace }}/ut_log
