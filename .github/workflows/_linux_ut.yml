name: Linux UT Test

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
        description: Runner label
      pytorch:
        type: string
        default: 'main'
        description: Pytorch main by default, or 'commit/branch', or 'repo@commit/repo@branch'
      torch_xpu_ops:
        type: string
        default: 'main'
        description: Torch-xpu-ops version, 'commit/branch', or 'repo@commit/repo@branch', or 'pinned' for pytorch pin
      python:
        type: string
        default: '3.10'
        description: Python version
      ut:
        required: true
        type: string
        description: UT scope. one of `op_regression,op_transformers,op_extended,op_ut,torch_xpu,op_regression_dev1`

permissions: read-all

defaults:
  run:
    shell: bash -xe {0}

jobs:
  runner:
    runs-on: ${{ inputs.runner }}
    name: get-runner
    outputs:
      runner_id: ${{ steps.runner-info.outputs.runner_id }}
      user_id: ${{ steps.runner-info.outputs.user_id }}
      render_id: ${{ steps.runner-info.outputs.render_id }}
      hostname: ${{ steps.runner-info.outputs.hostname }}
      pytest_extra_args: ${{ steps.runner-info.outputs.pytest_extra_args }}
    steps:
      - name: Cleanup workspace
        run: |
          sudo find ./ |grep -v "^\./$" |xargs sudo rm -rf
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Get runner
        id: runner-info
        uses: ./.github/actions/get-runner

  test-in-container:
    needs: runner
    if: ${{ ! contains(inputs.ut, 'distributed') }}
    runs-on: ${{ needs.runner.outputs.runner_id }}
    container:
      image: intelgpu/driver-lts2:1146
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
      options: --device=/dev/mem --device=/dev/dri --group-add video --security-opt seccomp=unconfined --cap-add=SYS_PTRACE --shm-size=8g
              -u ${{ needs.runner.outputs.user_id }}:${{ needs.runner.outputs.render_id }}
              -e ZE_AFFINITY_MASK
      env:
        AGENT_TOOLSDIRECTORY: /tmp/xpu-tool
        PYTEST_ADDOPTS: -v --timeout 600 --timeout_method=thread --dist worksteal ${{ needs.runner.outputs.pytest_extra_args }}
    env:
      GH_TOKEN: ${{ github.token }}
      HF_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Prepare test env
        uses: ./.github/actions/linux-testenv
        with:
          pytorch: ${{ inputs.pytorch }}
          torch_xpu_ops: ${{ inputs.torch_xpu_ops }}
          python: ${{ inputs.python }}
      - name: Run XPU UT Test on ${{ needs.runner.outputs.hostname }}
        uses: ./.github/actions/linux-uttest
        with:
          ut_name: ${{ inputs.ut }}
      - name: Upload Inductor XPU UT Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log
          if-no-files-found: ignore
      - name: Upload XPU UT Failure list
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: XPU-UT-Failure-List-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log/ut_failure_list.csv
          if-no-files-found: ignore

  test-in-baremetal:
    needs: runner
    timeout-minutes: 600
    if: ${{ contains(inputs.ut, 'distributed') }}
    runs-on: ${{ needs.runner.outputs.runner_id }}
    env:
      GH_TOKEN: ${{ github.token }}
      HF_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
      AGENT_TOOLSDIRECTORY: /tmp/xpu-tool
      PYTEST_ADDOPTS: -v --timeout 3600 --timeout_method=thread -n 1
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Prepare test env
        uses: ./.github/actions/linux-testenv
        with:
          pytorch: ${{ inputs.pytorch }}
          torch_xpu_ops: ${{ inputs.torch_xpu_ops }}
          python: ${{ inputs.python }}
      - name: Run XPU UT Test on ${{ needs.runner.outputs.hostname }}
        uses: ./.github/actions/linux-uttest
        with:
          ut_name: ${{ inputs.ut }}
      - name: Upload Inductor XPU UT Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log
          if-no-files-found: ignore
      - name: Upload XPU UT Failure list
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: XPU-UT-Failure-List-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log/ut_failure_list.csv
          if-no-files-found: ignore

  summary:
    needs: [test-in-container, test-in-baremetal]
    if: ${{ ! cancelled() && ! (endsWith(needs.test-in-container.result, 'ed') && endsWith(needs.test-in-baremetal.result, 'ed')) }}
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    env:
      GH_TOKEN: ${{ github.token }}
      UT_SKIP_ISSUE: 1624
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Download XPU UT Logs
        uses: actions/download-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log
      - name: Check UT Results
        run: |
          ls -al ${{ github.workspace }}/ut_log
          cd ${{ github.workspace }}/ut_log/${{ inputs.ut }}

          for log_file in "${{ github.workspace }}/ut_log"/{failures,passed,category,reproduce}_*.log; do
            [[ -f "$log_file" ]] && cp "$log_file" ./
          done
          # get distributed known issues
          gh --repo intel/torch-xpu-ops issue view $UT_SKIP_ISSUE --json body -q .body |sed -E '/^(#|$)/d' > Known_issue.log.tmp
          # get skipped known issues
          count=$(gh api "repos/${{ github.repository }}/issues?labels=skipped" --jq 'length')
          if [ "$count" -gt 0 ]; then
            echo -e "$count issues with skipped label found"
            gh api "repos/${{ github.repository }}/issues?labels=skipped" \
              --jq '.[] | select(.pull_request == null) | "Issue #\(.number): \(.title)\n\(.body)\n"' > issues.log
          fi
          if [ "${{ inputs.ut }}" == "basic" ];then
            ut_list="op_regression op_transformers op_extended op_regression_dev1"
          else
            ut_list="${{ inputs.ut }}"
          fi
          cp ${{ github.workspace }}/.github/scripts/ut_result_check.sh ./
          for ut_name in ${ut_list}
          do
            cp Known_issue.log.tmp Known_issue.log
            awk -v r="${ut_name}" 'BEGIN{ print_row = 0 }{
              if ( ! ( $0 ~ /[a-zA-Z0-9]/ ) ) { print_row = 0 };
              if ( print_row == 1 && $1 ~ r ) { print $0 };
              if ( $0 ~ /Cases:/ ) { print_row = 1 };
            }' issues.log >> Known_issue.log
            bash ut_result_check.sh ${ut_name}
          done
      - name: Upload Inductor XPU UT Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log
          overwrite: true
