name: Linux UT Test

on:
  workflow_call:
    inputs:
      pytorch:
        required: false
        type: string
        default: 'main'
        description: Pytorch branch/commit
      triton:
        required: false
        type: string
        default: ''
        description: Triton commit. Use pytorch pined commit by default
      abi:
        required: false
        type: string
        default: '1'
        description: ABI version. Default abi as 1.
      python:
        required: false
        type: string
        default: '3.10'
        description: Python version
      runner:
        required: true
        type: string
        default: 'linux.idc.xpu'
        description: Runner label
      driver:
        required: false
        type: string
        default: 'lts'
        description: Driver lts/rolling
      ut:
        required: true
        type: string
        default: ''
        description: UT scope. `op_regression,op_regression_dev1,op_extended,op_ut,torch_xpu` Delimiter is comma

permissions: read-all

jobs:
  ut_test:
    runs-on: ${{ inputs.runner }} 
    if: ${{ inputs.ut != 'xpu_distributed' }}
    timeout-minutes: 900
    env:
      NEOReadDebugKeys: ${{ inputs.driver == 'rolling' && '1' || '0' }}
      DisableScratchPages: ${{ inputs.driver == 'rolling' && '1' || '0' }}
    steps:
      - name: Clean Workspace
        run: |
          xpu-smi discovery
          pwd && printenv
          if [ -n "${GITHUB_WORKSPACE}" ];then
            rm -rf ${GITHUB_WORKSPACE}/*
          fi
          echo "INPUTS_PYTHON=${{ inputs.python }}" >> "${GITHUB_ENV}"
          echo "INPUTS_PYTORCH=${{ inputs.pytorch }}" >> "${GITHUB_ENV}"
          echo "INPUTS_TRITON=${{ inputs.triton }}" >> "${GITHUB_ENV}"
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
        with:
          path: torch-xpu-ops
      - name: Download Pytorch wheel
        if: ${{ inputs.pytorch != 'nightly_wheel' }}
        uses: actions/download-artifact@v4
        with:
          name: Torch-XPU-Wheel-${{ github.event.pull_request.number || github.sha }}-${{ inputs.abi }}
      - name: Prepare Stock Pytorch
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda-pytorch create
          pip install mkl-static==2025.0.1 mkl-include==2025.0.1
      - name: Torch Config
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          python -c "import torch; print(torch.__config__.show())"
          python -c "import torch; print(torch.__config__.parallel_info())"
          python -c "import torch; print(torch.__config__.torch.xpu.device_count())"
          python -c "import triton; print(triton.__version__)"
          python pytorch/torch/utils/collect_env.py
          rm -rf /tmp/torchinductor_*
          rm -rf ~/.triton/cache
      - name: Run XPU OP Regression
        if: contains(inputs.ut, 'op_regression') || github.event_name == 'schedule'
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          mkdir -p ut_log/op_regression
          cd pytorch/third_party/torch-xpu-ops/test/regressions
          pip install pytest
          timeout 600 pytest -v --junit-xml=${GITHUB_WORKSPACE}/ut_log/op_regression.xml 2>${GITHUB_WORKSPACE}/ut_log/op_regression/op_regression_test_error.log | tee ${GITHUB_WORKSPACE}/ut_log/op_regression/op_regression_test.log
      - name: Run XPU OP Regressions test on device 1
        if: contains(inputs.ut, 'op_regression_dev1') || github.event_name == 'schedule'
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          mkdir -p ut_log/op_regression_dev1
          unset ZE_AFFINITY_MASK
          cd pytorch/third_party/torch-xpu-ops/test/regressions
          timeout 180 pytest -v --junit-xml=${GITHUB_WORKSPACE}/ut_log/op_regression_dev1.xml test_operation_on_device_1.py 2>${GITHUB_WORKSPACE}/ut_log/op_regression_dev1/op_regression_dev1_test_error.log | tee ${GITHUB_WORKSPACE}/ut_log/op_regression_dev1/op_regression_dev1_test.log
      - name: Run XPU OP Extended UT
        if: contains(inputs.ut, 'op_extended') || github.event_name == 'schedule'
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          export PYTORCH_TEST_WITH_SLOW=1
          mkdir -p ut_log/op_extended
          cd pytorch/third_party/torch-xpu-ops/test/xpu/extended/
          timeout 10000 python run_test_with_skip.py 2>${GITHUB_WORKSPACE}/ut_log/op_extended/op_extended_test_error.log | tee ${GITHUB_WORKSPACE}/ut_log/op_extended/op_extended_test.log
          cp op_extended.xml ${GITHUB_WORKSPACE}/ut_log
      - name: Run XPU OP UT
        if: contains(inputs.ut, 'op_ut') || github.event_name == 'schedule'
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          export PYTORCH_ENABLE_XPU_FALLBACK=1
          export PYTORCH_TEST_WITH_SLOW=1
          mkdir -p ut_log/op_ut
          cd pytorch/third_party/torch-xpu-ops/test/xpu
          timeout 10000 python run_test_with_skip.py 2>${GITHUB_WORKSPACE}/ut_log/op_ut/op_ut_with_skip_test_error.log | tee ${GITHUB_WORKSPACE}/ut_log/op_ut/op_ut_with_skip_test.log
          cp *.xml ${GITHUB_WORKSPACE}/ut_log
          # Cases run with a on-demand white list, since some suites are too
          # slow to go through all operators on CPU. So add cases on-demand
          # when XPU implementatoin is done.
          # test_foreach, test_decomp
          timeout 10000 python run_test_with_only.py 2>${GITHUB_WORKSPACE}/ut_log/op_ut/op_ut_with_only_test_error.log | tee ${GITHUB_WORKSPACE}/ut_log/op_ut/op_ut_with_only_test.log
          cp op_ut_with_only.xml ${GITHUB_WORKSPACE}/ut_log
      - name: Run Torch XPU UT
        if: contains(inputs.ut, 'torch_xpu') || github.event_name == 'schedule'
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          mkdir -p ut_log/torch_xpu
          cd pytorch
          TEST_REPORTS_DIR=$(pwd)/test/test-reports
          rm -rf "$TEST_REPORTS_DIR" && mkdir -p "$TEST_REPORTS_DIR"
          # Run Pytorch XPU binary UT
          for xpu_case in build/bin/*{xpu,sycl}*; do
            if [[ "$xpu_case" != *"*"* && "$xpu_case" != *.so && "$xpu_case" != *.a ]]; then
              case_name=$(basename "$xpu_case")
              echo "Testing ${case_name} ..."
              "$xpu_case" --gtest_output=xml:"$TEST_REPORTS_DIR"/"$case_name".xml 2>${GITHUB_WORKSPACE}/ut_log/torch_xpu/binary_ut_torch_xpu_${case_name}_test_error.log | tee ${GITHUB_WORKSPACE}/ut_log/torch_xpu/binary_ut_torch_xpu_${case_name}_test.log
            fi
          done
          # Run Pytorch XPU python UT
          export PYTORCH_TEST_WITH_SLOW=1
          export PYTORCH_TESTING_DEVICE_ONLY_FOR="xpu"
          test_cmd="timeout 10000 python test/run_test.py --include "
          # All Inductor UT under test/inductor
          for test in $(ls test/inductor | grep test);
          do 
              test_cmd="${test_cmd} inductor/$test";
          done
          # All xpu ut under test/xpu
          for test in $(ls test/xpu | grep test);
          do 
              test_cmd="${test_cmd} xpu/$test";
          done
          if [ -f "test/test_xpu.py" ]; then
            test_cmd="${test_cmd} test_xpu.py"
          fi
          eval $test_cmd 2>${GITHUB_WORKSPACE}/ut_log/torch_xpu/torch_xpu_test_error.log | tee ${GITHUB_WORKSPACE}/ut_log/torch_xpu/torch_xpu_test.log
      - name: Run Torch XPU Profile UT
        if: ${{ inputs.driver == 'rolling' && contains(inputs.ut, 'xpu_profiling') }} 
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          mkdir -p ut_log/profile_test
          cd pytorch/third_party/torch-xpu-ops/
          # RN50 Test
          PROFILE=1 python -u test/profiling/rn50.py -a resnet50 --dummy ./ --num-iterations 20 --xpu 0
          cp profiling.fp32.train.pt ${GITHUB_WORKSPACE}/ut_log/profile_test
          # All Issue Reproduce UT
          mkdir -p ${GITHUB_WORKSPACE}/ut_log/profile_test/issue_reproduce
          python -u test/profiling/correlation_id_mixed.py | tee ${GITHUB_WORKSPACE}/ut_log/profile_test/issue_reproduce/correlation_id_mixed.log
          python -u test/profiling/reproducer.missing.gpu.kernel.time.py | tee ${GITHUB_WORKSPACE}/ut_log/profile_test/issue_reproduce/reproducer.missing.gpu.kernel.time.log
          python -u test/profiling/time_precision_in_profile.py | tee ${GITHUB_WORKSPACE}/ut_log/profile_test/issue_reproduce/time_precision_in_profile.log
          python -u test/profiling/profile_partial_runtime_ops.py | tee ${GITHUB_WORKSPACE}/ut_log/profile_test/issue_reproduce/profile_partial_runtime_ops.log
          python -u test/profiling/triton_xpu_ops_time.py | tee ${GITHUB_WORKSPACE}/ut_log/profile_test/issue_reproduce/triton_xpu_ops_time.log
          # All xpu ut under test/profiler
          cd ${GITHUB_WORKSPACE}/pytorch/test/profiler
          python -m pytest -vs test_cpp_thread.py | tee ${GITHUB_WORKSPACE}/ut_log/profile_test/test_cpp_thread.log
          python -m pytest -vs test_execution_trace.py | tee ${GITHUB_WORKSPACE}/ut_log/profile_test/test_execution_trace.log
          python -m pytest -vs test_memory_profiler.py | tee ${GITHUB_WORKSPACE}/ut_log/profile_test/test_memory_profiler.log
          python -m pytest -vs test_profiler_tree.py | tee ${GITHUB_WORKSPACE}/ut_log/profile_test/test_profiler_tree.log
      - name: UT Test Results Summary
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          pip install junitparser
          cd pytorch/third_party/torch-xpu-ops/
          python .github/scripts/check-ut.py ${GITHUB_WORKSPACE}/ut_log/*.xml >> $GITHUB_STEP_SUMMARY || true
      - name: UT Test Results Check
        shell: bash
        run: |
          function contains() {
              contains_status="echo 'Start $2 ...'"
              {
                [[ $1 =~ (^|,)$2($|,) ]]
              } || {
                echo "[Warning] $2 is not suppotted type! Skipped!"
                contains_status="continue"
              }
          }
          set -xe
          echo "UT_NAME=$(echo ${{ inputs.ut }} |sed 's/,/-/g')" |tee -a "${GITHUB_OUTPUT}" >> "${GITHUB_ENV}"
          for ut_suite in $(echo ${{ inputs.ut }} |sed 's/,/ /g')
          do
            contains "op_regression,op_regression_dev1,op_extended,op_ut,torch_xpu" $ut_suite
            $contains_status
            cd ${GITHUB_WORKSPACE}/ut_log/${ut_suite}
            cp ${GITHUB_WORKSPACE}/pytorch/third_party/torch-xpu-ops/.github/scripts/ut_result_check.sh ./
            bash ut_result_check.sh ${ut_suite}
          done
      - name: Upload Inductor XPU UT Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.abi }}-${{ env.UT_NAME }}
          path: ut_log
  
  distributed_ut_test:
    runs-on: pvc_e2e
    if: contains(inputs.ut, 'xpu_distributed')
    timeout-minutes: 900
    env:
      NEOReadDebugKeys: ${{ inputs.driver == 'rolling' && '1' || '0' }}
      DisableScratchPages: ${{ inputs.driver == 'rolling' && '1' || '0' }}
    steps:
      - name: Clean Workspace
        run: |
          xpu-smi discovery
          pwd && printenv
          if [ -n "${GITHUB_WORKSPACE}" ];then
            rm -rf ${GITHUB_WORKSPACE}/*
          fi
          echo "INPUTS_PYTHON=${{ inputs.python }}" >> "${GITHUB_ENV}"
          echo "INPUTS_PYTORCH=${{ inputs.pytorch }}" >> "${GITHUB_ENV}"
          echo "INPUTS_TRITON=${{ inputs.triton }}" >> "${GITHUB_ENV}"
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
        with:
          path: torch-xpu-ops
      - name: Download Pytorch wheel
        if: ${{ inputs.pytorch != 'nightly_wheel' }}
        uses: actions/download-artifact@v4
        with:
          name: Torch-XPU-Wheel-${{ github.event.pull_request.number || github.sha }}-${{ inputs.abi }}
      - name: Prepare Stock Pytorch
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda-pytorch create
          pip install mkl-static==2025.0.1 mkl-include==2025.0.1
      - name: Torch Config
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          python -c "import torch; print(torch.__config__.show())"
          python -c "import torch; print(torch.__config__.parallel_info())"
          python -c "import torch; print(torch.__config__.torch.xpu.device_count())"
          python -c "import triton; print(triton.__version__)"
          python pytorch/torch/utils/collect_env.py
          rm -rf /tmp/torchinductor_*
          rm -rf ~/.triton/cache
      - name: Run Torch XPU Distributed UT
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          pip install pytest
          sudo cp /proc/sys/kernel/yama/ptrace_scope ${GITHUB_WORKSPACE}/ptrace_scope.bk
          sudo echo "0"|sudo tee /proc/sys/kernel/yama/ptrace_scope
          mkdir -p ut_log/xpu_distributed
          cd pytorch/third_party/torch-xpu-ops/test/xpu
          python -c "import torch;print(torch.distributed.is_xccl_available())"
          timeout 10000 python run_distributed.py 2>${GITHUB_WORKSPACE}/ut_log/xpu_distributed/xpu_distributed_test_error.log | tee ${GITHUB_WORKSPACE}/ut_log/xpu_distributed/xpu_distributed_test.log
          sudo cp ${GITHUB_WORKSPACE}/ptrace_scope.bk /proc/sys/kernel/yama/ptrace_scope
      - name: UT Test Results Check
        shell: bash
        run: |
          function contains() {
              contains_status="echo 'Start $2 ...'"
              {
                [[ $1 =~ (^|,)$2($|,) ]]
              } || {
                echo "[Warning] $2 is not suppotted type! Skipped!"
                contains_status="continue"
              }
          }
          set -xe
          echo "UT_NAME=$(echo ${{ inputs.ut }} |sed 's/,/-/g')" |tee -a "${GITHUB_OUTPUT}" >> "${GITHUB_ENV}"
          cd ${GITHUB_WORKSPACE}/ut_log/xpu_distributed
          cp ${GITHUB_WORKSPACE}/pytorch/third_party/torch-xpu-ops/.github/scripts/ut_result_check.sh ./
          bash ut_result_check.sh 'xpu_distributed'
      - name: Upload Inductor XPU UT Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.abi }}-xpu_distributed
          path: ${{ github.workspace }}/ut_log
