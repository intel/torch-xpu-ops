name: Linux UT Test

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
        description: Runner label
      pytorch:
        type: string
        default: 'main'
        description: Pytorch main by default, or 'commit/branch', or 'repo@commit/repo@branch'
      torch_xpu_ops:
        type: string
        default: 'main'
        description: Torch-xpu-ops version, 'commit/branch', or 'repo@commit/repo@branch', or 'pinned' for pytorch pin
      python:
        type: string
        default: '3.10'
        description: Python version
      ut:
        required: true
        type: string
        description: UT scope. one of `op_regression,op_transformers,op_extended,op_ut,torch_xpu,op_regression_dev1`

permissions: read-all

defaults:
  run:
    shell: bash -xe {0}

jobs:
  runner:
    runs-on: ${{ inputs.runner }}
    name: get-runner
    if: ${{ ! contains(inputs.ut, 'distributed') }}
    outputs:
      runner_id: ${{ steps.runner-info.outputs.runner_id }}
      user_id: ${{ steps.runner-info.outputs.user_id }}
      render_id: ${{ steps.runner-info.outputs.render_id }}
      hostname: ${{ steps.runner-info.outputs.hostname }}
      pytest_extra_args: ${{ steps.runner-info.outputs.pytest_extra_args }}
    steps:
      - name: Cleanup workspace
        run: |
          sudo find ./ |grep -v "^\./$" |xargs sudo rm -rf
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Get runner
        id: runner-info
        uses: ./.github/actions/get-runner

  docker:
    needs: runner
    runs-on: ${{ needs.runner.outputs.runner_id }}
    if: ${{ ! contains(inputs.ut, 'distributed') }}
    container:
      image: mengfeili/intel-pvc-driver:1146-1136
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
      options: --device=/dev/mem --device=/dev/dri --group-add video --security-opt seccomp=unconfined --cap-add=SYS_PTRACE --shm-size=8g
              -u ${{ needs.runner.outputs.user_id }}:${{ needs.runner.outputs.render_id }}
              -e ZE_AFFINITY_MASK
      env:
        AGENT_TOOLSDIRECTORY: /tmp/xpu-tool
        PYTEST_ADDOPTS: -v --timeout 600 --timeout_method=thread --dist worksteal ${{ needs.runner.outputs.pytest_extra_args }}
    env:
      GH_TOKEN: ${{ github.token }}
      HUGGING_FACE_HUB_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
      HF_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Prepare test env on ${{ needs.runner.outputs.hostname }}
        uses: ./.github/actions/linux-testenv
        with:
          pytorch: ${{ inputs.pytorch }}
          torch_xpu_ops: ${{ inputs.torch_xpu_ops }}
          python: ${{ inputs.python }}
      - name: Run XPU UT Test
        uses: ./.github/actions/linux-uttest
        with:
          ut_name: ${{ inputs.ut }}
      - name: UT Test Results Summary
        run: |
          pip install junitparser
          python ./.github/scripts/check-ut.py ${{ github.workspace }}/ut_log/*.xml >> $GITHUB_STEP_SUMMARY || true
          if [ -e ut_failure_list.csv ];then
              cp ut_failure_list.csv ${{ github.workspace }}/ut_log/ut_failure_list.csv || true
          fi
      - name: Upload Inductor XPU UT Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log
          if-no-files-found: ignore
      - name: Upload XPU UT Failure list
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: XPU-UT-Failure-List-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log/ut_failure_list.csv
          if-no-files-found: ignore
      - name: Reset Ptrace_scope
        if: ${{ always() }}
        run: |
          if [ -f "${{ github.workspace }}/ptrace_scope.bk" ]; then
            sudo cp ${{ github.workspace }}/ptrace_scope.bk /proc/sys/kernel/yama/ptrace_scope
          fi

  host:
    needs: runner
    runs-on: ${{ needs.runner.outputs.runner_id }}
    if: ${{ contains(inputs.ut, 'distributed') }}
    env:
      AGENT_TOOLSDIRECTORY: /tmp/xpu-tool
      GH_TOKEN: ${{ github.token }}
      HUGGING_FACE_HUB_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
      HF_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
      PYTEST_ADDOPTS: -v --timeout 600 --timeout_method=thread -n 1
    steps:
      - name: Init test
        run: |
          sudo find ./ |grep -v "^\./$" |xargs sudo rm -rf
          sudo rm -rf ~/.triton /tmp/*inductor* /tmp/tmp*
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Prepare test env on ${{ needs.runner.outputs.runner_id }}
        uses: ./.github/actions/linux-testenv
        with:
          pytorch: ${{ inputs.pytorch }}
          torch_xpu_ops: ${{ inputs.torch_xpu_ops }}
          python: ${{ inputs.python }}
      - name: Run XPU UT Test
        uses: ./.github/actions/linux-uttest
        with:
          ut_name: ${{ inputs.ut }}
      - name: UT Test Results Summary
        run: |
          pip install junitparser
          python ./.github/scripts/check-ut.py ${{ github.workspace }}/ut_log/*.xml >> $GITHUB_STEP_SUMMARY || true
          if [ -e ut_failure_list.csv ];then
              cp ut_failure_list.csv ${{ github.workspace }}/ut_log/ut_failure_list.csv || true
          fi
      - name: Upload Inductor XPU UT Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log
          if-no-files-found: ignore
      - name: Upload XPU UT Failure list
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: XPU-UT-Failure-List-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log/ut_failure_list.csv
          if-no-files-found: ignore
      - name: Reset Ptrace_scope
        if: ${{ always() }}
        run: |
          if [ -f "${{ github.workspace }}/ptrace_scope.bk" ]; then
            sudo cp ${{ github.workspace }}/ptrace_scope.bk /proc/sys/kernel/yama/ptrace_scope
          fi

  summary:
    needs: [docker, host]
    if: ${{ ! cancelled() && ! (endsWith(needs.docker.result, 'ed') && endsWith(needs.host.result, 'ed')) }}
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    env:
      GH_TOKEN: ${{ github.token }}
      UT_SKIP_ISSUE: 1624
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Download XPU UT Logs
        uses: actions/download-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log
      - name: Check UT Results
        shell: bash
        run: |
          repo="${{ github.repository }}"
          ls -al ${{ github.workspace }}/ut_log
          cd ${{ github.workspace }}/ut_log/${{ inputs.ut }}
          gh --repo $repo issue view $UT_SKIP_ISSUE --json body -q .body | sed '/^$/d' > Known_issue.log
          gh api "repos/${{ github.repository }}/issues?labels=skipped" \
            --jq '.[] | select(.pull_request == null) | "Issue #\(.number): \(.title)\n\(.body)\n"' > issues.log
          awk '/Cases:/ {flag=1; next} /^\|\||^$/ {flag=0} flag' issues.log | \
            grep -Eo 'test[^[:space:]]+( \|\| [^[:space:]]+)?' | sed 's/ *|| */ /g' | sort -u > issues_temp.log
          awk '$2 == "op_ut" {print $1}' issues_temp.log > issues_op_ut.log
          cat issues_temp.log | awk '{print $1}' >> Known_issue.log
          awk -F'::' '{print $1}' issues_op_ut.log | sort -u | paste -sd ',' >> Known_issue.log
          cp ${{ github.workspace }}/.github/scripts/ut_result_check.sh ./
          bash ut_result_check.sh ${{ inputs.ut }}
      - name: Upload Inductor XPU UT Log
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}-${{ inputs.ut }}
          path: ${{ github.workspace }}/ut_log
          overwrite: true
