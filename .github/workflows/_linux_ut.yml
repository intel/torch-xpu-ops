name: inductor-xpu-ut-test

on:
  workflow_call:
    inputs:
      torch_xpu_ops_update:
        required: false
        type: string
        default: 'true'
        description: True means update xpu_ops when building pytorch, otherwise means not
      ut_suite:
        required: true
        type: string
        default: 'op_example,op_extended,op_ut,torch_xpu'
        description: op_example,op_extended,op_ut,torch_xpu. Delimiter is comma
      pytorch_branch:
        required: false
        type: string
        default: 'main'
        description: Set pytorch branch
      runner:
        required: true
        type: string
        default: 'linux.idc.xpu'
        description: Set runner


jobs:
  Inductor-XPU-UT-Tests:
    runs-on: ${{ inputs.runner }} 
    timeout-minutes: 900
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Prepare Stock Pytorch
        run: |
          pwd
          cd ../ && rm -rf pytorch
          git clone -b ${{ inputs.pytorch_branch }} https://github.com/pytorch/pytorch
          cd pytorch && git log -n 1 && git submodule sync && git submodule update --init --recursive
          if [ -z ${{ inputs.torch_xpu_ops_update }} ]; then
            rm -rf third_party/torch-xpu-ops && cp -r ../torch-xpu-ops third_party/
          else
            if [[ ${{ inputs.torch_xpu_ops_update }} == 'true' ]]; then
              rm -rf third_party/torch-xpu-ops && cp -r ../torch-xpu-ops third_party/
            else
              echo "Not update torch-xpu-ops"
            fi
          fi
          # Workaround for torch-xpu-ops ci test
          sed -i "s/checkout --quiet \${TORCH_XPU_OPS_COMMIT}/log -n 1/g" caffe2/CMakeLists.txt
      - name: Build Pytorch XPU
        run: |
          which conda && conda clean -ay
          conda remove --all -y -n xpu_op_${ZE_AFFINITY_MASK} || \
                rm -rf $(dirname ${CONDA_EXE})/../envs/xpu_op_${ZE_AFFINITY_MASK}
          conda create -n xpu_op_${ZE_AFFINITY_MASK} python=3.10 cmake ninja -y
          source activate xpu_op_${ZE_AFFINITY_MASK}
          conda install -c intel mkl-static mkl-include -y
          cd ../pytorch
          pip install -r requirements.txt
          export USE_XPU=1
          source /opt/intel/oneapi/compiler/latest/env/vars.sh
          export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
          python setup.py bdist_wheel
          pip install --force-reinstall dist/*.whl
          git clone https://github.com/pytorch/vision && cd vision && python setup.py install && cd ..
          pip install -r .ci/docker/requirements-ci.txt
      - name: Run XPU OP Examples
        if: contains(inputs.ut_suite, 'op_example')
        run: |
          cd ${{ github.workspace }}
          mkdir -p ut_log
          xpu-smi discovery
          source /opt/intel/oneapi/compiler/latest/env/vars.sh
          source activate xpu_op_${ZE_AFFINITY_MASK}
          cd ${{ github.workspace }}
          cd examples
          pip install pytest
          timeout 8000 pytest -v 2>&1 | tee ${{ github.workspace }}/ut_log/XPU_OP_op_example_Test.log
      - name: Run XPU OP Extended UT
        if: contains(inputs.ut_suite, 'op_extended')
        run: |
          source /opt/intel/oneapi/compiler/latest/env/vars.sh
          source activate xpu_op_${ZE_AFFINITY_MASK}
          export PYTORCH_TEST_WITH_SLOW=1
          cd ../pytorch/third_party/torch-xpu-ops/test/xpu/extended/
          timeout 10000 python run_test_with_skip.py 2>&1 | tee ${{ github.workspace }}/ut_log/XPU_OP_op_extended_Test.log
      - name: Run XPU OP UT
        if: contains(inputs.ut_suite, 'op_ut')
        run: |
          source /opt/intel/oneapi/compiler/latest/env/vars.sh
          source activate xpu_op_${ZE_AFFINITY_MASK}
          export PYTORCH_ENABLE_XPU_FALLBACK=1
          export PYTORCH_TEST_WITH_SLOW=1
          cd ../pytorch/third_party/torch-xpu-ops/test/xpu
          timeout 10000 python run_test_with_skip.py 2>&1 | tee ${{ github.workspace }}/ut_log/XPU_OP_with_skip_UT_Test.log
          # Cases run with a on-demand white list, since some suites are too
          # slow to go through all operators on CPU. So add cases on-demand
          # when XPU implementatoin is done.
          # test_foreach, test_decomp
          timeout 10000 python run_test_with_only.py 2>&1 | tee ${{ github.workspace }}/ut_log/XPU_OP_with_only_UT_Test.log
      - name: Run Torch XPU UT
        if: contains(inputs.ut_suite, 'torch_xpu')
        run: |
          source /opt/intel/oneapi/compiler/latest/env/vars.sh
          source activate xpu_op_${ZE_AFFINITY_MASK}
          cd ../pytorch
          TEST_REPORTS_DIR=$(pwd)/test/test-reports
          rm -rf "$TEST_REPORTS_DIR" && mkdir -p "$TEST_REPORTS_DIR"
          # Run Pytorch XPU binary UT
          for xpu_case in build/bin/*{xpu,sycl}*; do
            if [[ "$xpu_case" != *"*"* && "$xpu_case" != *.so && "$xpu_case" != *.a ]]; then
              case_name=$(basename "$xpu_case")
              echo "Testing ${case_name} ..."
              "$xpu_case" --gtest_output=xml:"$TEST_REPORTS_DIR"/"$case_name".xml 2>&1 | tee ${{ github.workspace }}/ut_log/binary_UT_torch_xpu_${case_name}_Test.log
            fi
          done
          # Run Pytorch XPU python UT
          export PYTORCH_ENABLE_XPU_FALLBACK=1
          sed -i 's/selected_tests = exclude_tests(XPU_BLOCKLIST.*/selected_tests = XPU_TEST/g' ./test/run_test.py
          python test/run_test.py --xpu 2>&1 | tee ${{ github.workspace }}/ut_log/Torch_XPU_python_UT_Test.log

      - name: UT Test Results Check
        shell: bash
        run: |
          source /opt/intel/oneapi/compiler/latest/env/vars.sh
          source activate xpu_op_${ZE_AFFINITY_MASK}
          # check param
            function contains() {
                contains_status="echo 'Start $2 ...'"
                {
                  [[ $1 =~ (^|,)$2($|,) ]]
                } || {
                  echo "[Warning] $2 is not suppotted type! Skipped!"
                  contains_status="continue"
                }
            }
            set -xe
            for ut_suite in $(echo ${{ inputs.ut_suite }} |sed 's/,/ /g')
            do
              contains "op_example,op_extended,op_ut,torch_xpu" $ut_suite
              $contains_status
              cd ${{ github.workspace }}/ut_log
              if [[ ${ut_suite} == 'op_example' ]];then
                echo -e "========================================================================="
                echo -e "XPU OP Examples UT Results Check"
                echo -e "========================================================================="
                grep "^FAILED" XPU_OP_op_example_Test.log | awk '{print $1}' > ./op_example_failed.log
                grep "PASSED" XPU_OP_op_example_Test.log | awk '{print $1}' > ./op_example_passed.log
                num_failed_op_example=$(cat ./op_example_failed.log | wc -l)
                num_passed_op_example=$(cat ./op_example_passed.log | wc -l)
                echo "num_failed_op_example: $num_failed_op_example" | tee -a ./ut_summary.log
                echo "num_passed_op_example: $num_passed_op_example" | tee -a ./ut_summary.log
              fi

              if [[ ${ut_suite} == 'op_extended' ]]; then
                echo -e "========================================================================="
                echo -e "XPU OP Extended UT Results Check"
                echo -e "========================================================================="
                grep "^FAILED" XPU_OP_op_extended_Test.log | awk '{print $1}' > ./op_extended_failed.log
                grep "PASSED" XPU_OP_op_extended_Test.log | awk '{print $1}' > ./op_extended_passed.log
                num_failed_op_extended=$(cat ./op_extended_failed.log | wc -l)
                num_passed_op_extended=$(cat ./op_extended_passed.log | wc -l)
                echo "num_failed_op_extended: $num_failed_op_extended" | tee -a ./ut_summary.log
                echo "num_passed_op_extended: $num_passed_op_extended" | tee -a ./ut_summary.log
              fi

              if [[ ${ut_suite} == 'op_ut' ]]; then
                echo -e "========================================================================="
                echo -e "XPU OP UT Results Check"
                echo -e "========================================================================="
                grep "^FAILED" XPU_OP_with_skip_UT_Test.log | awk '{print $1}' > ./op_ut_with_skip_failed.log
                grep "^FAILED" XPU_OP_with_only_UT_Test.log | awk '{print $1}' > ./op_ut_with_only_failed.log
                num_failed_with_skip=$(cat ./op_ut_with_skip_failed.log | wc -l)
                num_failed_with_only=$(cat ./op_ut_with_only_failed.log | wc -l)
                let num_failed_op_ut=num_failed_with_skip+num_failed_with_only
                grep "PASSED" XPU_OP_with_skip_UT_Test.log | awk '{print $1}' > ./op_ut_with_skip_passedlog
                grep "PASSED" XPU_OP_with_only_UT_Test.log | awk '{print $1}' > ./op_ut_with_only_passedlog
                num_passed_with_skip=$(cat ./op_ut_with_skip_passed.log | wc -l)
                num_passed_with_only=$(cat ./op_ut_with_only_passed.log | wc -l)
                let num_passed_op_ut=num_passed_with_skip+num_passed_with_only
                echo "num_failed_op_ut: $num_failed_op_ut" | tee -a ./ut_summary.log
                echo "num_passed_op_ut: $num_passed_op_ut" | tee -a ./ut_summary.log
              fi

              if [[ ${ut_suite} == 'torch_xpu' ]]; then
                echo -e "========================================================================="
                echo -e "Torch XPU UT Results Check"
                echo -e "========================================================================="
                echo "Pytorch XPU binary UT checking"
                cd ${{ github.workspace }}
                cd ../pytorch
                TEST_REPORTS_DIR=$(pwd)/test/test-reports
                for xpu_case in build/bin/*{xpu,sycl}*; do
                  if [[ "$xpu_case" != *"*"* && "$xpu_case" != *.so && "$xpu_case" != *.a ]]; then
                    case_name=$(basename "$xpu_case")
                    echo "Checking ${case_name} ..."
                    cd ${{ github.workspace }}/ut_log
                    grep -E "FAILED" binary_UT_torch_xpu_${case_name}_Test.log | awk '{print $2}' > ./binary_UT_torch_xpu_${case_name}_failed.log
                    echo $(cat ./binary_UT_torch_xpu_${case_name}_failed.log | wc -l) | tee -a ./binary_UT_torch_xpufailed_summary.log
                    grep -E "PASSED|Pass" binary_UT_torch_xpu_${case_name}_Test.log | awk '{print $2}' > ./binary_UT_torch_xpu_${case_name}_passed.log
                    echo $(cat ./binary_UT_torch_xpu_${case_name}_passed.log | wc -l) | tee -a ./binary_torch_xpu_ut_passed_summary.log
                  fi
                done
                num_failed_binary_UT=$(awk '{sum += $1};END {print sum}' binary_UT_torch_xpu_failed_summary.log)
                num_passed_binary_UT=$(awk '{sum += $1};END {print sum}' binary_UT_torch_xpu_passed_summary.log)
                let num_failed_torch_xpu=num_failed_binary_UT
                let num_passed_torch_xpu=num_passed_binary_UT
                echo "num_failed_torch_xpu: $num_failed_torch_xpu" | tee -a ./ut_summary.log
                echo "num_passed_torch_xpu: $num_passed_torch_xpu" | tee -a ./ut_summary.log
              fi
              
              if [[ -n $num_failed_op_example ]] && [[ $num_failed_op_example -gt 0 ]] && [[ $num_passed_op_example -lt 0 ]]; then
                echo -e "[ERROR] Inductor UT test for XPU OP Examples failed number > 0"
                exit 1
              fi

              if [[ -n $num_failed_op_extended ]] && [[ $num_failed_op_extended -gt 0 ]] && [[ $num_passed_op_extended -lt 0 ]]; then
                echo -e "[ERROR] Inductor UT test for XPU OP Extended failed number > 0"
                exit 1
              fi

              if [[ -n $num_failed_op_ut ]] && [[ $num_failed_op_ut -gt 0 ]] && [[ $num_passed_op_ut -lt 0 ]]; then
                echo -e "[ERROR] Inductor UT test for XPU OP UT failed number > 0"
                exit 1
              fi

              if [[ -n $num_failed_torch_xpu ]] && [[ $num_failed_torch_xpu -gt 0 ]] && [[ $num_passed_torch_xpu -lt 0 ]]; then
                echo -e "[ERROR] Inductor UT test for Torch XPU UT failed number > 0"
                exit 1
              fi
            done
      - name: Upload Inductor XPU UT Data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-UT-Data-${{ github.event.pull_request.number || github.sha }}
          path: ${{ github.workspace }}/ut_log
