name: Nightly-OnDemand Tests

on:
  schedule:
    # GMT+8 21:00 every workday
    - cron: '10 13 * * 0-4' # build from source
    - cron: '30 13 * * 0-4' # nightly wheel
    # GMT+8 00:00 Saturday
    - cron: '10 16 * * 5' # build from source
    - cron: '30 16 * * 5' # nightly wheel
  workflow_dispatch:
    inputs:
      pytorch:
        type: string
        default: 'main'
        description: Pytorch main by default, or 'commit/branch', or 'repo@commit/repo@branch'
      torch_xpu_ops:
        type: string
        default: 'main'
        description: Torch-xpu-ops main by default, 'commit/branch', or 'repo@commit/repo@branch', or 'pinned' for pytorch pin
      triton:
        type: string
        default: 'pinned'
        description: Triton pinned by pytorch by default, or 'commit/branch', or 'repo@commit/repo@branch'
      oneapi:
        type: string
        default: 'installed'
        description: Installed oneAPI DLE on host by default, fill offline.sh url if needed
      ut:
        type: string
        default: 'op_regression'
        description: UT scope. `op_regression,op_regression_dev1,op_transformers,op_extended,op_ut,xpu_profiling,xpu_distributed`. Delimiter is comma
      suite:
        type: string
        default: 'huggingface'
        description: Dynamo benchmarks test suite. `huggingface,timm_models,torchbench,pt2e`. Delimiter is comma
      dt:
        type: string
        default: 'float32'
        description: Data precision of the test. `float32,bfloat16,float16,amp_bf16,amp_fp16`. Delimiter is comma
      mode:
        type: string
        default: 'inference'
        description: Test mode. `inference,training`. Delimiter is comma
      scenario:
        type: string
        default: 'accuracy'
        description: Test scenario. `accuracy,performance`. Delimiter is comma
      model:
        type: string
        default: ''
        description: Model. Will only run this one mode if set

permissions: read-all

jobs:
  Conditions-Filter:
    name: conditions-filter
    if: ${{ github.repository_owner == 'intel' }}
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      test_type: ${{ steps.inputs-check.outputs.test_type }}
      pytorch: ${{ steps.inputs-check.outputs.pytorch }}
      torch_xpu_ops: ${{ steps.inputs-check.outputs.torch_xpu_ops }}
    steps:
      - name: Inputs check
        id: inputs-check
        run: |
          if [ "${{ github.event_name }}" == "schedule" ];then
            if [ "${{ github.event.schedule }}" == "10 13 * * 0-4" ];then
              test_type="build-nightly"
              pytorch="main"
              torch_xpu_ops="main"
            elif [ "${{ github.event.schedule }}" == "30 13 * * 0-4" ];then
              test_type="wheel-nightly"
              pytorch="nightly_wheel"
              torch_xpu_ops="pinned"
            elif [ "${{ github.event.schedule }}" == "10 16 * * 5" ];then
              test_type="build-weekly"
              pytorch="main"
              torch_xpu_ops="main"
            elif [ "${{ github.event.schedule }}" == "30 16 * * 5" ];then
              test_type="wheel-weekly"
              pytorch="nightly_wheel"
              torch_xpu_ops="pinned"
            else
              test_type="unknown"
              pytorch="main"
              torch_xpu_ops="main"
            fi
          else
            if [["${{ inputs.pytorch }}" == *"_wheel"]];then
              test_type="wheel-ondemand"
              pytorch="${{ inputs.pytorch }}"
              torch_xpu_ops="pinned"
            else
              test_type="build-ondemand"
              pytorch="${{ inputs.pytorch }}"
              torch_xpu_ops="${{ inputs.torch_xpu_ops }}"
            fi
          fi
          echo "test_type=${test_type}" >> ${GITHUB_OUTPUT}
          echo "pytorch=${pytorch}" >> ${GITHUB_OUTPUT}
          echo "torch_xpu_ops=${torch_xpu_ops}" >> ${GITHUB_OUTPUT}

  Linux-Nightly-Ondemand-Build:
    needs: [Conditions-Filter]
    name: linux
    secrets: inherit
    uses: ./.github/workflows/_linux_build.yml
    with:
      runner: pvc_rolling
      test_type: ${{ needs.Conditions-Filter.outputs.test_type }}
      pytorch: ${{ needs.Conditions-Filter.outputs.pytorch }}
      torch_xpu_ops: ${{ needs.Conditions-Filter.outputs.torch_xpu_ops }}
      triton: ${{ github.event_name == 'schedule' && 'pinned' || inputs.triton }}
      oneapi: ${{ github.event_name == 'schedule' && 'installed' || inputs.oneapi }}
      python: ${{ github.event_name == 'schedule' && '3.10' || '3.10' }}

  Linux-Nightly-Ondemand-UT-Tests:
    if: ${{ github.event_name == 'schedule' || contains(inputs.ut, 'p') }}
    name: linux
    needs: [Conditions-Filter, Linux-Nightly-Ondemand-Build]
    uses: ./.github/workflows/_linux_ut.yml
    with:
      runner: linux.idc.xpu
      test_type: ${{ needs.Conditions-Filter.outputs.test_type }}
      pytorch: ${{ needs.Conditions-Filter.outputs.pytorch }}
      torch_xpu_ops: ${{ github.event_name == 'schedule' && 'false' || inputs.torch_xpu_ops }}
      oneapi: ${{ github.event_name == 'schedule' && 'installed' || inputs.oneapi }}
      python: ${{ github.event_name == 'schedule' && '3.10' || '3.10' }}
      ut: ${{ github.event_name == 'schedule' && 'op_regression,op_regression_dev1,op_transformers,op_extended,op_ut' || inputs.ut }}

  Linux-Nightly-Ondemand-E2E-Tests:
    if: ${{ github.event_name == 'schedule' || contains(inputs.suite, 'e') }}
    name: linux
    permissions:
      issues: write
    needs: [Conditions-Filter, Linux-Nightly-Ondemand-Build]
    uses: ./.github/workflows/_linux_e2e.yml
    with:
      runner: pvc_rolling
      test_type: ${{ needs.Conditions-Filter.outputs.test_type }}
      pytorch: ${{ needs.Conditions-Filter.outputs.pytorch }}
      oneapi: ${{ github.event_name == 'schedule' && 'installed' || inputs.oneapi }}
      python: ${{ github.event_name == 'schedule' && '3.10' || '3.10' }}
      suite: ${{ github.event_name == 'schedule' && 'huggingface' || inputs.suite }}
      dt: ${{ github.event_name == 'schedule' && 'float32' || inputs.dt }}
      mode: ${{ github.event_name == 'schedule' && 'inference' || inputs.mode }}
      scenario: ${{ github.event_name == 'schedule' && 'accuracy' || inputs.scenario }}
      model: ${{ github.event_name == 'schedule' && '' || inputs.model }}

  Windows-Nightly-Ondemand-UT-Tests:
    if: ${{ github.event_name == 'schedule' || inputs.ut != '' }}
    name: Windows-nightly-ondemand
    uses: ./.github/workflows/_windows_ut.yml
    with:
      torch_xpu_ops: ${{ github.event_name == 'schedule' && 'false' || inputs.torch_xpu_ops }}
      ut: ${{ github.event_name == 'schedule' && 'op_extended,torch_xpu' || inputs.ut }}
      python: ${{ github.event_name == 'schedule' && '3.10' || '3.10' }}
      src_changed: false
      has_label: true
      runner: Windows_CI
