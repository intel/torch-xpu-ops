name: Linux OP Benchmark Test

on:
  workflow_call:
    inputs:
      pytorch:
        required: false
        type: string
        default: 'main'
        description: Pytorch branch/commit
      keep_torch_xpu_ops:
        required: false
        type: string
        default: 'false'
        description: Keep torch-xpu-ops pin. `true` means use pined commit
      triton:
        required: false
        type: string
        default: ''
        description: Triton commit. Use pytorch pined commit by default
      python:
        required: false
        type: string
        default: '3.10'
        description: Python version
      runner:
        required: true
        type: string
        default: 'linux.idc.xpu'
        description: Runner label
      driver:
        required: false
        type: string
        default: 'rolling'
        description: Driver lts/rolling

permissions: 
  issues: write

jobs:
  op_benchmark_test:
    runs-on: ${{ inputs.runner }} 
    timeout-minutes: 900
    env:
      GH_TOKEN: ${{ github.token }}
      reference_issue: 1689
      NEOReadDebugKeys: ${{ inputs.driver == 'rolling' && '1' || '0' }}
      DisableScratchPages: ${{ inputs.driver == 'rolling' && '1' || '0' }}
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Prepare Stock Pytorch
        run: |
          pwd
          which conda && conda clean -ay
          conda remove --all -y -n xpu_op_${ZE_AFFINITY_MASK} || \
                rm -rf $(dirname ${CONDA_EXE})/../envs/xpu_op_${ZE_AFFINITY_MASK}
          conda create -n xpu_op_${ZE_AFFINITY_MASK} python=${{ inputs.python }} cmake ninja -y
          source activate xpu_op_${ZE_AFFINITY_MASK}
          cd ../ && rm -rf pytorch
          pip install requests
          git clone https://github.com/pytorch/pytorch pytorch
          if [ "${{ inputs.pytorch }}" != "nightly_wheel" ]; then
            cd pytorch && git checkout $(echo ${{ inputs.pytorch }})
            # apply PRs for stock pytorch
            python ../torch-xpu-ops/.github/scripts/apply_torch_pr.py
            git status && git show -s
            git submodule sync && git submodule update --init --recursive
            if [[ ${{ inputs.keep_torch_xpu_ops }} == 'true' ]]; then
              echo "Don't replace torch-xpu-ops!"
            else
              rm -rf third_party/torch-xpu-ops && cp -r ../torch-xpu-ops third_party/
              # Workaround for torch-xpu-ops ci test
              sed -i "s/checkout --quiet \${TORCH_XPU_OPS_COMMIT}/log -n 1/g" caffe2/CMakeLists.txt
            fi
          fi
      - name: Download Pytorch wheel
        if: ${{ inputs.pytorch != 'nightly_wheel' }}
        uses: actions/download-artifact@v4
        with:
          name: Torch-XPU-Wheel-${{ github.event.pull_request.number || github.sha }}
          path: ${{ github.workspace }}
      - name: Install Pytorch XPU
        run: |
          source activate xpu_op_${ZE_AFFINITY_MASK}
          if [ "${{ inputs.pytorch }}" != "nightly_wheel" ]; then
            cd ../pytorch
            export CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
            pip install -r requirements.txt
            pip install --force-reinstall ${{ github.workspace }}/torch*.whl
            git clone https://github.com/pytorch/vision && cd vision && python setup.py install && cd ..
          else
            pip install torch torchvision torchaudio --pre --index-url https://download.pytorch.org/whl/nightly/xpu
            TORCH_COMMIT_ID=$(python -c 'import torch; print(torch.version.git_version)')
          fi
          pip install -r .ci/docker/requirements-ci.txt
      - name: Torch Config
        run: |
          source activate xpu_op_${ZE_AFFINITY_MASK}
          python -c "import torch; print(torch.__config__.show())"
          python -c "import torch; print(torch.__config__.parallel_info())"
          python -c "import torch; print(torch.__config__.torch.xpu.device_count())"

          cd ..
          python pytorch/torch/utils/collect_env.py
          rm -rf /tmp/torchinductor_*
          rm -rf ~/.triton/cache
      - name: Run Torch XPU Op Benchmark
        if: ${{ inputs.driver == 'rolling' }} 
        run: |
          source activate xpu_op_${ZE_AFFINITY_MASK}
          mkdir -p ${{ github.workspace }}/op_benchmark
          cd test/microbench
          filename=$(find -- *.py)
          for i in $filename
          do
            python ${i%.*}.py > ${{ github.workspace }}/op_benchmark/${i%.*}.log
          done
          # Summary forward op time
          bash ${{ github.workspace }}/.github/scripts/microbench_summary.sh ${{ github.workspace }}/op_benchmark ${{ github.workspace }}/op_benchmark/forward_op_summary.csv
          # Summary backward op time
          bash ${{ github.workspace }}/.github/scripts/microbench_summary.sh ${{ github.workspace }}/op_benchmark ${{ github.workspace }}/op_benchmark/backward_op_summary.csv True
      - name: Download OP Baseline
        continue-on-error: true
        id: reference_id
        run: |
          source activate xpu_op_${ZE_AFFINITY_MASK}
          conda install gh --channel conda-forge -y
          REFERENCE_RUN_ID="$(gh --repo ${GITHUB_REPOSITORY} issue view ${reference_issue} \
            --json body -q .body |grep "Inductor-XPU-OP-Benchmark-Data" |sed 's/.*: *//')"
          gh --repo ${GITHUB_REPOSITORY} run download ${REFERENCE_RUN_ID} -p "Inductor-XPU-OP-Benchmark-Data-*"
          rm -rf ${GITHUB_WORKSPACE:-"/tmp"}/reference
          mkdir ${GITHUB_WORKSPACE:-"/tmp"}/reference
          mv Inductor-XPU-OP-Benchmark-Data-*/* ${GITHUB_WORKSPACE:-"/tmp"}/reference

          mkdir ${{ github.workspace }}/baseline
          if [[ -f "${GITHUB_WORKSPACE:-"/tmp"}/reference/new_baseline/baseline_forward_op_summary.csv" ]]; then
            cp ${GITHUB_WORKSPACE:-"/tmp"}/reference/new_baseline/baseline_forward_op_summary.csv ${{ github.workspace }}/baseline
            cp ${GITHUB_WORKSPACE:-"/tmp"}/reference/new_baseline/baseline_backward_op_summary.csv ${{ github.workspace }}/baseline
          else
            cp ${GITHUB_WORKSPACE:-"/tmp"}/reference/forward_op_summary.csv ${{ github.workspace }}/baseline/baseline_forward_op_summary.csv
            cp ${GITHUB_WORKSPACE:-"/tmp"}/reference/backward_op_summary.csv ${{ github.workspace }}/baseline/baseline_backward_op_summary.csv
          fi
      - name: Check the OP Regression
        run: |
          source activate xpu_op_${ZE_AFFINITY_MASK}
          pip install tabulate
          # Compare forward op
          python ${{ github.workspace }}/.github/scripts/op_perf_comparison.py --xpu_file ${{ github.workspace }}/op_benchmark/forward_op_summary.csv --baseline_file ${{ github.workspace }}/baseline/baseline_forward_op_summary.csv
          # Compare backward op
          python ${{ github.workspace }}/.github/scripts/op_perf_comparison.py --xpu_file ${{ github.workspace }}/op_benchmark/backward_op_summary.csv --baseline_file ${{ github.workspace }}/baseline/baseline_backward_op_summary.csv
      - name: Update OP Baseline
        run: |
          source activate xpu_op_${ZE_AFFINITY_MASK}
          mkdir ${{ github.workspace }}/new_baseline
          cp ${{ github.workspace }}/baseline/baseline*.csv ${{ github.workspace }}/new_baseline
          # Update forward op
          python ${{ github.workspace }}/.github/scripts/op_calculate_best_perf.py --xpu ${{ github.workspace }}/op_benchmark/forward_op_summary.csv --baseline ${{ github.workspace }}/new_baseline/baseline_forward_op_summary.csv -r
          # Update backward op
          python ${{ github.workspace }}/.github/scripts/op_calculate_best_perf.py --xpu ${{ github.workspace }}/op_benchmark/backward_op_summary.csv --baseline ${{ github.workspace }}/new_baseline/baseline_backward_op_summary.csv -r
          cp -r ${{ github.workspace }}/new_baseline ${{ github.workspace }}/op_benchmark
      - name: Upload Inductor XPU OP benchmark Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Inductor-XPU-OP-Benchmark-Data-${{ github.event.pull_request.number || github.sha }}
          path: ${{ github.workspace }}/op_benchmark
      - name: Upload Reference Run ID
        run: |
          gh --repo ${GITHUB_REPOSITORY} issue view ${reference_issue} --json body -q .body | \
            sed "s/Inductor-XPU-OP-Benchmark-Data:.*/Inductor-XPU-OP-Benchmark-Data: ${GITHUB_RUN_ID}/" | sed '/^$/d' > new_body.txt
          gh --repo ${GITHUB_REPOSITORY} issue edit ${reference_issue} --body-file new_body.txt
