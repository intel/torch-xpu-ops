name: Windows Test

on:
  workflow_call:
    inputs:
      pytorch:
        required: false
        type: string
        default: 'main'
        description: Pytorch branch/commit
      keep_torch_xpu_ops:
        required: false
        type: string
        default: 'false'
        description: Keep torch-xpu-ops pin. `true` means use pined commit
      ut:
        required: false
        type: string
        default: ''
        description: UT scope. `op_example,op_extended,op_ut,torch_xpu` Delimiter is comma
      abi:
        required: false
        type: string
        default: 1
        description: ABI version. Default abi as 1.
      python:
        required: false
        type: string
        default: '3.10'
        description: Python version
      runner:
        required: true
        type: string
        default: 'linux.idc.xpu'
        description: Runner label

permissions: read-all

env: 
    USE_XPU: 1
    VS2022INSTALLDIR: 'C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat'

jobs:
  Torch-XPU-Windows-Build:
    runs-on: ${{ inputs.runner }} 
    timeout-minutes: 900
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Install oneAPI bundle
        shell: cmd
        run: |
          if exist "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" (
            echo "oneAPI bundle already installed"
          ) else (
            echo "setvars.bat not found, installing oneAPI bundle"
            call .github\scripts\install_xpu.bat
            echo "oneAPI bundle installed"
          )      
      - name: Prepare Stock Pytorch
        shell: cmd
        run: |
          call "C:\ProgramData\miniforge3\Scripts\activate.bat"
          call conda clean -ay
          call conda remove --all -y -n windows_ci
          call conda create -n windows_ci python=${{ inputs.python }} cmake ninja -y
          call conda activate windows_ci
          cd ..
          if exist "pytorch" (
            rmdir /s /q pytorch
          )
          git clone https://github.com/pytorch/pytorch pytorch
          cd pytorch && git checkout ${{ inputs.pytorch }} 
          call pip install pyyaml requests
          call conda install conda-forge::rust -y
          call conda install typing_extensions -y
          python ../torch-xpu-ops/.github/scripts/apply_torch_pr.py
          git status && git show -s
          git submodule sync && git submodule update --init --recursive
          if ${{ inputs.keep_torch_xpu_ops }} == 'true' (
            echo "Don't replace torch-xpu-ops!"
          ) else (
            cd third_party
            if exist "torch-xpu-ops" (
              rmdir /s /q torch-xpu-ops 
            )
            cd ..
            Xcopy ..\torch-xpu-ops third_party\torch-xpu-ops /E/H/Y/F/I
          )
      - name: Build Pytorch XPU
        shell: cmd
        run: |
          call "C:\ProgramData\miniforge3\Scripts\activate.bat"
          call conda activate windows_ci
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          pip install mkl-static mkl-include
          cd ../pytorch
          pip install -r requirements.txt
          set USE_XPU=1
          set USE_KINETO=0
          set CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
          if ${{ inputs.abi }} == '0' (
            set _GLIBCXX_USE_CXX11_ABI=0
          ) else (
            set _GLIBCXX_USE_CXX11_ABI=1
          )
          python setup.py bdist_wheel
          for %%f in (${{ github.workspace }}\..\pytorch\dist\torch-*.whl) do (
            set "TORCH_WHL=%%f"
            echo "INFO - torch whl found"
          )
          if defined TORCH_WHL (
            pip install %TORCH_WHL%
            echo "INFO - torch whl installed"
          ) else (
            echo "INFO - No torch whl found."
            exit /b 1
          )
          pip install --force-reinstall dist/*.whl
          pip install -r .ci/docker/requirements-ci.txt
      - name: Torch Config
        shell: cmd
        run: |
          call "C:\ProgramData\miniforge3\Scripts\activate.bat"
          call conda activate windows_ci
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          python -c "import torch; print(torch.__config__.show())"
          python -c "import torch; print(torch.__config__.parallel_info())"
          python -c "import torch; print(torch.__config__.torch.xpu.device_count())"

      - name: Upload Windows binary
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Windows-Binary-${{ github.event.pull_request.number || github.sha }}
          path: 'C:\actions-runner\_work\torch-xpu-ops\pytorch\dist'