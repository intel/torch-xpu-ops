name: Linux PyTorch XPU Build

on:
  workflow_call:
    inputs:
      pytorch:
        required: true
        type: string
        default: 'master_next'
        description: Pytorch branch/commit
      keep_torch_xpu_ops:
        required: false
        type: string
        default: 'false'
        description: Keep torch-xpu-ops pin. `true` means use pined commit
      driver:
        required: false
        type: string
        default: 'lts'
        description: Driver lts/rolling
      python:
        required: false
        type: string
        default: '3.10'
        description: Python version
      runner:
        required: true
        type: string
        default: 'linux.idc.xpu'
        description: Runner label
      onednn:
        required: false
        type: string
        default: ''
        description: OneDNN commit. Use prv-gpu HEAD by default
      dep_path:
        required: false
        type: string
        default: ''
        description: Dependency path. If not set, will pull latest to workspace
      artifact_name:
        required: false
        type: string
        default: ''
        description: Artifact name for uploading file.
    outputs:
      torch_commit_id:
        description: The commit id of the torch build
        value: ${{ jobs.build.outputs.TORCH_COMMIT_ID }}

permissions: read-all

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    env:
      commit_issue: 1280
      GH_TOKEN: ${{ secrets.GH_PAT }}
      GITHUB_WORKSPACE: ${{ github.workspace }}
      MAX_RETRIES: 3
      ONEDNN_COMMIT: ${{ inputs.onednn }}
      DEPENDENCY_DIR: ${{ inputs.dep_path }}
    outputs:
      TORCH_COMMIT_ID: ${{ steps.build_version.outputs.TORCH_COMMIT_ID }}
    timeout-minutes: 300
    steps:
      - name: Setup based Env
        uses: intel-innersource/frameworks.actions.thirdparty.retry-step@v3
        with:
          timeout_minutes: 15
          max_attempts: ${{ env.MAX_RETRIES }}
          command: |         
            pwd
            which conda && conda clean -ay
            conda remove --all -y -n xpu_op_build || \
                rm -rf $(dirname ${CONDA_EXE})/../envs/xpu_op_build
            conda create -n xpu_op_build python=${{ inputs.python }} cmake ninja -y
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
        with:
          path: torch-xpu-ops
      - name: Build Pytorch XPU
        run: |
          set -xe -o pipefail
          source activate xpu_op_build
          rm -rf ${{ github.workspace }}/torch*.whl
          if [[ "${{ inputs.pytorch }}" == *"https://"* ]];then
            PYTORCH_REPO="$(echo ${{ inputs.pytorch }} |sed 's/@.*//')"
            PYTORCH_VERSION="$(echo ${{ inputs.pytorch }} |sed 's/.*@//')"
          else
            PYTORCH_REPO="https://github.com/intel-innersource/frameworks.ai.pytorch.private-gpu.git"
            PYTORCH_VERSION="${{ inputs.pytorch }}"
          fi
          if [[ "${{ inputs.keep_torch_xpu_ops }}" == *"https://"* ]];then
            TORCH_XPU_OPS_REPO="$(echo ${{ inputs.keep_torch_xpu_ops }} |sed 's/@.*//')"
            TORCH_XPU_OPS_VERSION="$(echo ${{ inputs.keep_torch_xpu_ops }} |sed 's/.*@//')"
          elif [ "${{ inputs.keep_torch_xpu_ops }}" == "true" ];then
            TORCH_XPU_OPS_VERSION="pinned"
          else
            TORCH_XPU_OPS_VERSION="cicd"
          fi
          # toolchain
          if [[ -z "${{ inputs.dep_path }}" ]]; then
            bash ${{ github.workspace }}/torch-xpu-ops/.github/scripts/setup_dependencies.sh ${PYTORCH_VERSION}
          fi
          source ${{ github.workspace }}/torch-xpu-ops/.github/scripts/env.sh ${PYTORCH_VERSION}

          ${{ github.workspace }}/torch-xpu-ops/.github/scripts/build.sh \
            --WORKSPACE="${{ github.workspace }}" \
            --PYTORCH_REPO="${PYTORCH_REPO}" \
            --PYTORCH_VERSION="${PYTORCH_VERSION}" \
            --TORCH_XPU_OPS_REPO="${TORCH_XPU_OPS_REPO}" \
            --TORCH_XPU_OPS_VERSION="${TORCH_XPU_OPS_VERSION}" \
            2>&1 |tee ${{ github.workspace }}/pytorch_build_${PYTORCH_VERSION//\//-}.log
      - name: Torch Config
        run: |
          source activate xpu_op_build
          source ${{ github.workspace }}/torch-xpu-ops/.github/scripts/env.sh ${{ inputs.pytorch }}
          python -c "import torch; print(torch.__config__.show())"
          python -c "import torch; print(torch.__config__.parallel_info())"
          python -c "import torch; print(torch.__config__.torch.xpu.device_count())"
          python pytorch/torch/utils/collect_env.py
      - name: Identify Build version
        id: build_version
        run: |
          source activate xpu_op_build
          source ${{ github.workspace }}/torch-xpu-ops/.github/scripts/env.sh ${{ inputs.pytorch }}
          echo "TORCH_COMMIT_ID=$(python -c 'import torch; print(torch.version.git_version)')" |tee -a "${GITHUB_OUTPUT}"
          echo "TORCH_XPU_OPS_COMMIT_ID=$(git -C ${{ github.workspace }}/pytorch/third_party/torch-xpu-ops rev-parse HEAD)"
          echo "ONEDNN_COMMIT_ID=$(git -C ${{ github.workspace }}/pytorch/build/xpu_mkldnn_proj-prefix/src/xpu_mkldnn_proj rev-parse HEAD)"
      - name: Upload Torch XPU Wheel
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Wheel-${{ github.event.pull_request.number || github.sha }}-${{ inputs.artifact_name }}
          path: ${{ github.workspace }}/torch*.whl
      - name: Upload Build Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Build-Log-${{ github.event.pull_request.number || github.sha }}-${{ inputs.artifact_name }}
          path: ${{ github.workspace }}/pytorch_*.log
      - name: Cleanup
        if: always()
        run: |
          chmod 777 . -R
          rm -rf pytorch torch-xpu-ops pytorch_*.log torch*.whl
