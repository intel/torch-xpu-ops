name: Linux PyTorch XPU Build

on:
  workflow_call:
    inputs:
      pytorch:
        type: string
        default: 'main'
        description: Pytorch main by default, or 'commit/branch', or 'repo@commit/repo@branch'
      torch_xpu_ops:
        type: string
        default: 'main'
        description: Torch-xpu-ops main by default, 'commit/branch', or 'repo@commit/repo@branch', or 'pinned' for pytorch pin
      python:
        type: string
        default: '3.10'
        description: Python version
      oneapi:
        type: string
        default: 'host'
        description: Installed oneAPI DLE on host by default, fill offline.sh url if needed
      runner:
        required: true
        type: string
        default: 'pvc_rolling'
        description: Runner label

permissions: read-all

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    container:
      image: 'pytorch/manylinux2_28-builder:xpu-main'
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
      env:
        PATH: /opt/xpu-build/bin:/usr/share/Modules/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        GH_TOKEN: ${{ github.token }}
    timeout-minutes: 300
    steps:
      - name: Setup based env
        run: |
          # Cleanup workspace
          rm -rf ./*
          # Install gh
          dnf install 'dnf-command(config-manager)'
          dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          dnf autoremove -y git236* && dnf install -y git
          dnf install gh --repo gh-cli -y
          # Setup python
          local_python=$(echo ${{ inputs.python }} |awk -F. '{printf("cp%s%s-cp%s%s", $1, $2, $1, $2)}')
          /opt/python/${local_python}/bin/python -m venv /opt/xpu-build
          which python && python -V && pip list
          pip install -U pip wheel setuptools
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
        with:
          path: torch-xpu-ops
      - name: Build Pytorch XPU
        run: |
          set -xe -o pipefail
          if [[ "${{ inputs.pytorch }}" == *"https://"* ]];then
            PYTORCH_REPO="$(echo ${{ inputs.pytorch }} |sed 's/@.*//')"
            PYTORCH_COMMIT="$(echo ${{ inputs.pytorch }} |sed 's/.*@//')"
          else
            PYTORCH_REPO="https://github.com/pytorch/pytorch.git"
            PYTORCH_COMMIT="${{ inputs.pytorch }}"
          fi
          if [[ "${{ inputs.torch_xpu_ops }}" == *"https://"* ]];then
            TORCH_XPU_OPS_REPO="$(echo ${{ inputs.torch_xpu_ops }} |sed 's/@.*//')"
            TORCH_XPU_OPS_COMMIT="$(echo ${{ inputs.torch_xpu_ops }} |sed 's/.*@//')"
          else
            TORCH_XPU_OPS_REPO="https://github.com/intel/torch-xpu-ops.git"
            TORCH_XPU_OPS_COMMIT="${{ inputs.torch_xpu_ops }}"
          fi
          # oneAPI DLE
          if [ "${{ inputs.oneapi }}" != "host" ];then
            rm -rf ~/intel ~/.intel /opt/intel
            wget -q -O oneapi.sh "${{ inputs.oneapi }}"
            bash oneapi.sh -a -s --eula accept --action install --install-dir ${HOME}/intel/oneapi
            export XPU_ONEAPI_PATH="${HOME}/intel/oneapi"
          fi
          source ${{ github.workspace }}/torch-xpu-ops/.github/scripts/env.sh
          # gcc 11
          source /opt/rh/gcc-toolset-11/enable
          ${{ github.workspace }}/torch-xpu-ops/.github/scripts/build.sh \
            --WORKSPACE="${{ github.workspace }}" \
            --PYTORCH_REPO="${PYTORCH_REPO}" \
            --PYTORCH_COMMIT="${PYTORCH_COMMIT}" \
            --TORCH_XPU_OPS_REPO="${TORCH_XPU_OPS_REPO}" \
            --TORCH_XPU_OPS_COMMIT="${TORCH_XPU_OPS_COMMIT}" \
            2>&1 |tee ${{ github.workspace }}/pytorch_build_${PYTORCH_COMMIT//\//-}.log
      - name: Torch Config
        run: |
          python -c "import torch; print(torch.__config__.show())"
          python -c "import torch; print(torch.__config__.parallel_info())"
          python -c "import torch; print(torch.__config__.torch.xpu.device_count())"
          python pytorch/torch/utils/collect_env.py
      - name: Identify Build version
        id: build_version
        run: |
          echo "TORCH_COMMIT_ID=$(python -c 'import torch; print(torch.version.git_version)')" |tee -a "${GITHUB_OUTPUT}"
      - name: Upload Torch XPU Wheel
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Wheel-${{ github.event.pull_request.number || github.sha }}
          path: ${{ github.workspace }}/torch*.whl
      - name: Upload Build Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Build-Log-${{ github.event.pull_request.number || github.sha }}
          path: ${{ github.workspace }}/pytorch_*.log
      - name: Cleanup
        if: always()
        run: |
          chmod 777 . -R
          rm -rf ./*
