name: Linux PyTorch XPU Build

on:
  workflow_call:
    inputs:
      pytorch:
        required: false
        type: string
        default: 'main'
        description: Pytorch branch/commit
      keep_torch_xpu_ops:
        required: false
        type: string
        default: 'false'
        description: Keep torch-xpu-ops pin. `true` means use pined commit
      abi:
        required: false
        type: string
        default: 1
        description: ABI version. Default abi as 1.
      python:
        required: false
        type: string
        default: '3.10'
        description: Python version
      runner:
        required: true
        type: string
        default: 'linux.idc.xpu'
        description: Runner label
      driver:
        required: false
        type: string
        default: 'lts'
        description: Driver lts/rolling
    outputs:
      torch_commit_id:
        description: The commit id of the torch build
        value: ${{ jobs.build.outputs.TORCH_COMMIT_ID }}

permissions:
  issues: write

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    outputs:
      TORCH_COMMIT_ID: ${{ steps.build_version.outputs.TORCH_COMMIT_ID }}
    timeout-minutes: 900
    env:
      commit_issue: 1280
      GH_TOKEN: ${{ github.token }}
      NEOReadDebugKeys: ${{ inputs.driver == 'rolling' && '1' || '0' }}
      DisableScratchPages: ${{ inputs.driver == 'rolling' && '1' || '0' }}
    steps:
      - name: Clean Workspace
        run: |
          pwd && printenv
          if [ -n "${GITHUB_WORKSPACE}" ];then
            rm -rf ${GITHUB_WORKSPACE}/* ${GITHUB_WORKSPACE}/.*
          fi
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
        with:
          path: torch-xpu-ops
      - name: Prepare Stock Pytorch
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda create
          conda install python=${{ inputs.python }} cmake ninja -y
          rm -rf pytorch
          git clone https://github.com/pytorch/pytorch pytorch
          cd pytorch && git checkout $(echo ${{ inputs.pytorch }})
          # apply PRs for stock pytorch
          pip install requests
          python ../torch-xpu-ops/.github/scripts/apply_torch_pr.py
          git status && git show -s
          git submodule sync && git submodule update --init --recursive
          if [[ ${{ inputs.keep_torch_xpu_ops }} == 'true' ]]; then
            echo "Don't replace torch-xpu-ops!"
          else
            rm -rf third_party/torch-xpu-ops && cp -r ../torch-xpu-ops third_party/
            # Workaround for torch-xpu-ops ci test
            sed -i "s/checkout --quiet \${TORCH_XPU_OPS_COMMIT}/log -n 1/g" caffe2/CMakeLists.txt
          fi
      - name: Build Pytorch XPU
        run: |
          source torch-xpu-ops/.github/scripts/env.sh oneapi-conda activate
          export USE_ONEMKL=1
          export USE_XCCL=1
          export PYTORCH_EXTRA_INSTALL_REQUIREMENTS="\
                intel-cmplr-lib-rt; platform_system == 'Linux' |\
                intel-cmplr-lib-ur; platform_system == 'Linux' |\
                intel-cmplr-lic-rt; platform_system == 'Linux' |\
                intel-sycl-rt; platform_system == 'Linux' |\
                tcmlib |umf |intel-pti
          "
          if [[ ${{ inputs.driver }} == 'lts' ]]; then
            export TORCH_XPU_ARCH_LIST='pvc'
          fi
          pip install mkl-static==2025.0.1 mkl-include==2025.0.1
          if [[ ${{ inputs.abi }} == '0' ]]; then
            export _GLIBCXX_USE_CXX11_ABI=0
          else
            export _GLIBCXX_USE_CXX11_ABI=1
          fi
          build_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          repo="${{ github.repository }}"
          last_commit=$(gh --repo $repo issue view $commit_issue --json body -q .body | grep ${{ inputs.pytorch }} | cut -d'[' -f 2 | cut -d']' -f 1)
          cd ../pytorch
          current_commit=$(git rev-parse HEAD)
          is_fork_pr=false
          if [ -n "${{ github.event.pull_request }}" ] && [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            is_fork_pr=true
          fi
          echo ">>>>>>>>>>>>Fork PR: ${is_fork_pr}, pytorch branch: ${{ inputs.pytorch }}, last commit: ${last_commit}, current commit: ${current_commit}"

          export CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
          pip install -r requirements.txt
          WERROR=1 python setup.py bdist_wheel 2>&1 | tee pytorch_${current_commit}_build.log

          if [[ ${is_fork_pr} == "false" ]]; then
            if [ -f dist/torch*.whl ] && [ "${last_commit}" != "${current_commit}" ] && [[ "${{ inputs.pytorch }}" == "main" || "${{ inputs.pytorch }}" == "release/"* ]]; then
              echo "Wheel build successful, update last commit in the issue https://github.com/intel/torch-xpu-ops/issues/1280"
              gh --repo $repo issue view $commit_issue --json body -q .body | sed "s;${last_commit};${current_commit};g" | sed '/^$/d' > new_body.txt
              gh --repo $repo issue edit $commit_issue --body-file new_body.txt
            fi
            if [ ! -f dist/torch*.whl ]; then
              echo "Wheel build failed, use last commit in the issue https://github.com/intel/torch-xpu-ops/issues/1280"
              gh --repo $repo issue comment $commit_issue -b "Wheel build failed with commit [${current_commit}](https://github.com/pytorch/pytorch/tree/${current_commit}), refer ${build_url}. CC @intel/torch-xpu-ops-maintain @EikanWang @riverliuintel @fengyuan14 @xytintel @etaf @chuanqi129 @mengfei25"
              git clean -df .
              git checkout $last_commit
              # apply PRs for stock pytorch
              python ../torch-xpu-ops/.github/scripts/apply_torch_pr.py
              git status && git show -s
              git submodule sync && git submodule update --init --recursive
              if [[ ${{ inputs.keep_torch_xpu_ops }} == 'true' ]]; then
                echo "Don't replace torch-xpu-ops!"
              else
                rm -rf third_party/torch-xpu-ops && cp -r ../torch-xpu-ops third_party/
                # Workaround for torch-xpu-ops ci test
                sed -i "s/checkout --quiet \${TORCH_XPU_OPS_COMMIT}/log -n 1/g" caffe2/CMakeLists.txt
              fi
              WERROR=1 python setup.py bdist_wheel
            fi
          else
            echo "Forked PR, don't update the issue"
          fi
          conda install patchelf zip -y
          bash ${GITHUB_WORKSPACE}/.github/scripts/rpath.sh dist/torch*.whl
          pip install --force-reinstall tmp/torch*.whl
          cp tmp/torch*.whl ${GITHUB_WORKSPACE}/
          cp pytorch_${current_commit}_build.log ${GITHUB_WORKSPACE}/
      - name: Torch Config
        id: build_version
        run: |
          source torch-xpu-ops/.github/scripts/env.sh conda activate
          python -V
          gcc -v
          uname -a
          cat /etc/os-release
          python -c "import torch; print(torch.__config__.show())"
          python -c "import torch; print(torch.__config__.parallel_info())"
          python -c "import torch; print(torch.__config__.torch.xpu.device_count())"
          echo "TORCH_COMMIT_ID=$(python -c 'import torch; print(torch.version.git_version)')" |tee -a "${GITHUB_OUTPUT}" >> "${GITHUB_ENV}"
          python pytorch/torch/utils/collect_env.py
      - name: Upload Torch XPU Wheel
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Wheel-${{ github.event.pull_request.number || github.sha }}-${{ inputs.abi }} 
          path: torch.*.whl
      - name: Upload Build Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Build-Log-${{ github.event.pull_request.number || github.sha }}-${{ inputs.abi }}
          path: pytorch_*.log
