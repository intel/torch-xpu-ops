name: Linux PyTorch XPU Build

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
        default: 'pvc_rolling'
        description: Runner label
      pytorch:
        type: string
        default: 'main'
        description: Pytorch main by default, or 'commit/branch', or 'repo@commit/repo@branch'
      torch_xpu_ops:
        type: string
        default: 'main'
        description: Torch-xpu-ops main by default, 'commit/branch', or 'repo@commit/repo@branch', or 'pinned' for pytorch pin
      triton:
        required: false
        type: string
        default: ''
        description: Triton pinned by pytorch by default, or 'commit/branch', or 'repo@commit/repo@branch'
      python:
        type: string
        default: '3.10'
        description: Python version

permissions: read-all

defaults:
  run:
    shell: bash -xe {0}
env:
  DOCKER_REGISTRY_AUTH_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:
  runner:
    runs-on: ${{ inputs.runner }}
    name: get-runner
    outputs:
      runner_id: ${{ steps.runner-info.outputs.runner_id }}
      user_id: ${{ steps.runner-info.outputs.user_id }}
      render_id: ${{ steps.runner-info.outputs.render_id }}
      hostname: ${{ steps.runner-info.outputs.hostname }}
    steps:
      - name: Cleanup workspace
        run: |
          sudo find ./ |grep -v "^\./$" |xargs sudo rm -rf
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
      - name: Get runner
        id: runner-info
        uses: ./.github/actions/get-runner

  build:
    name: ${{ inputs.pytorch }}
    needs: runner
    if: ${{ ! endsWith(inputs.pytorch, '_wheel') }}
    runs-on: ${{ needs.runner.outputs.runner_id }}
    container:
      image: 'intelgpu/ubuntu-22.04-lts2:2523.31'
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
      env:
        PATH: /tmp/xpu-tool/myvenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        AGENT_TOOLSDIRECTORY: /tmp/xpu-tool
        PIP_CACHE_DIR: /tmp/xpu-tool/.pipcache
    env:
      GH_TOKEN: ${{ github.token }}
    timeout-minutes: 300
    steps:
      - name: Install gh-cli
        run: |
          cat /etc/os-release
          hostname && id
          # install gh
          apt update
          apt install -y gpg-agent wget curl sudo gcc g++ cmake git unzip zip libgl1 zlib1g-dev gh numactl libglib2.0-dev rsync jq gcc-11 g++-11 python3.10-dev python3.10-venv python3.10-pip
          gh --version
      - name: Setup python-${{ inputs.python }}
        run: |
          rm -rf /tmp/xpu-tool/myvenv
          python3.10 -m venv /tmp/xpu-tool/myvenv
          which python && python -V
          which pip && pip list
          pip install -U pip wheel setuptools
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
        with:
          path: torch-xpu-ops
      - name: Build Pytorch on ${{ needs.runner.outputs.hostname }}
        run: |
          export USE_XCCL=1
          export IS_XPU_CI=1
          # only build pvc for CI
          if [ "${{ github.event_name }}" == "pull_request" ];then
            export TORCH_XPU_ARCH_LIST='pvc'
          fi
          if [[ "${{ inputs.pytorch }}" == *"https://"* ]];then
            PYTORCH_REPO="$(echo ${{ inputs.pytorch }} |sed 's/@.*//')"
            PYTORCH_COMMIT="$(echo ${{ inputs.pytorch }} |sed 's/.*@//')"
          else
            PYTORCH_REPO="https://github.com/pytorch/pytorch.git"
            PYTORCH_COMMIT="${{ inputs.pytorch }}"
          fi
          if [[ "${{ inputs.torch_xpu_ops }}" == *"https://"* ]];then
            TORCH_XPU_OPS_REPO="$(echo ${{ inputs.torch_xpu_ops }} |sed 's/@.*//')"
            TORCH_XPU_OPS_COMMIT="$(echo ${{ inputs.torch_xpu_ops }} |sed 's/.*@//')"
          else
            TORCH_XPU_OPS_REPO="https://github.com/intel/torch-xpu-ops.git"
            TORCH_XPU_OPS_COMMIT="${{ inputs.torch_xpu_ops }}"
          fi
          wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/de3686c4-d3e1-41da-bf3b-bf5908da075c/intel-deep-learning-essentials-2025.2.1.24_offline.sh
          bash intel-deep-learning-essentials-2025.2.1.24_offline.sh -a -s --eula accept
          source ${{ github.workspace }}/torch-xpu-ops/.github/scripts/env.sh
          ${{ github.workspace }}/torch-xpu-ops/.github/scripts/build.sh \
            --WORKSPACE="${{ github.workspace }}" \
            --PYTORCH_REPO="${PYTORCH_REPO}" \
            --PYTORCH_COMMIT="${PYTORCH_COMMIT}" \
            --TORCH_XPU_OPS_REPO="${TORCH_XPU_OPS_REPO}" \
            --TORCH_XPU_OPS_COMMIT="${TORCH_XPU_OPS_COMMIT}" \
            2>&1 |tee ${{ github.workspace }}/build_pytorch_${PYTORCH_COMMIT//\//-}.log
          if [ $(ls ${{ github.workspace }} |grep -c "torch-.*.whl") -eq 0 ];then
            echo "Build pytorch got failed"
            exit 1
          fi
      - name: Build Torchvision and Torchaudio
        run: |
          cd ./pytorch
          TORCHVISION_COMMIT_ID="$(cat .github/ci_commit_pins/vision.txt)"
          TORCHAUDIO_COMMIT_ID="$(cat .github/ci_commit_pins/audio.txt)"
          git clone --single-branch -b main https://github.com/pytorch/vision.git xpu-vision
          cd xpu-vision && git checkout ${TORCHVISION_COMMIT_ID}
          python setup.py bdist_wheel 2>&1 |tee ${{ github.workspace }}/build_vision_${TRITON_COMMIT_ID}.log
          if [ $(ls dist/ |grep -c "torchvision-.*.whl") -eq 0 ];then
            echo "Build torchvision got failed"
            exit 1
          fi
          pip install dist/*.whl
          cp dist/*.whl ${{ github.workspace }}
          git clone --single-branch -b main https://github.com/pytorch/audio.git xpu-audio
          cd xpu-audio && git checkout ${TORCHAUDIO_COMMIT_ID}
          python setup.py bdist_wheel 2>&1 |tee ${{ github.workspace }}/build_audio_${TRITON_COMMIT_ID}.log
          if [ $(ls dist/ |grep -c "torchaudio-.*.whl") -eq 0 ];then
            echo "Build torchaudio got failed"
            exit 1
          fi
          pip install dist/*.whl
          cp dist/*.whl ${{ github.workspace }}
      - name: Build Triton
        run: |
          cd ./pytorch
          rm -rf pytorch_triton_xpu-*.whl
          if [ -z ${{ inputs.triton }} ] || [ "${{ inputs.triton }}" == "pinned" ];then
            TRITON_COMMIT_ID="$(cat .ci/docker/ci_commit_pins/triton-xpu.txt)"
          else
            TRITON_COMMIT_ID="${{ inputs.triton }}"
          fi
          built_version="$(pip index versions --index-url https://download.pytorch.org/whl/nightly/xpu --pre \
                  pytorch-triton-xpu 2> /dev/null |awk -F '[ |,]' -v p="$(echo ${TRITON_COMMIT_ID} |awk '{print substr($1,0,7)}')" 'BEGIN{
            v = "None";
          }{
            for (i=1;i<=NF;i++) {if ($i ~ p) {v = $i;}};
          }END{
            printf("%s", v);
          }')"
          if [ "${built_version}" != "None" ];then
            pip download --no-deps --index-url https://download.pytorch.org/whl/nightly/xpu --pre pytorch-triton-xpu==${built_version} --dest ${{ github.workspace }}/
            pip install ${{ github.workspace }}/*triton*.whl
          else
            TRITON_VERSION_NAME="$(
              curl -sSL https://raw.githubusercontent.com/intel/intel-xpu-backend-for-triton/${TRITON_COMMIT_ID}/python/triton/__init__.py 2>&1 |\
                      grep '__version__' |head -n 1 |awk -F "'" '{print $2}'
            )"
            pip install cmake ninja pybind11
            python .github/scripts/build_triton_wheel.py --device xpu --commit-hash ${TRITON_COMMIT_ID} --triton-version ${TRITON_VERSION_NAME} \
              2>&1 |tee ${{ github.workspace }}/build_triton_${TRITON_COMMIT_ID}.log
            if [ $(ls |grep -c "pytorch_triton_xpu-.*.whl") -eq 0 ];then
              echo "Build triton got failed"
              exit 1
            fi
            pip install pytorch_triton_xpu-*.whl
            cp pytorch_triton_xpu-*.whl ${{ github.workspace }}
          fi
      - name: Torch Config
        run: |
          printenv
          python -c "import torch; print(torch.__config__.show())"
          python -c "import torch; print(torch.__config__.parallel_info())"
          python -c "import torch; print(torch.__config__.torch.xpu.device_count())"
          python -c "import triton; print(triton.__version__)"
          python -c "import torchvision; print(torchvision.__version__)"
          python -c "import torchaudio; print(torchaudio.__version__)"
          python pytorch/torch/utils/collect_env.py
          pip list |grep -E 'torch|intel'
      - name: Upload Torch XPU Wheel
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Wheel-${{ github.event.pull_request.number || github.sha }}
          path: ${{ github.workspace }}/*.whl
      - name: Upload Build Log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Build-Log-${{ github.event.pull_request.number || github.sha }}
          path: ${{ github.workspace }}/build_*.log
      - name: Cleanup workspace
        if: ${{ always() }}
        run: |
          chmod 777 /__w /github ./ -R
