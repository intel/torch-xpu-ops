name: Linux Transformers Test

on:
  workflow_call:
    inputs:
      pytorch:
        required: false
        type: string
        default: 'nightly'
        description: Pytorch branch/commit
      python:
        required: false
        type: string
        default: '3.10'
        description: Python version
      runner:
        required: true
        type: string
        default: 'linux.idc.xpu'
        description: Runner label
      driver:
        required: false
        type: string
        default: 'lts'
        description: Driver lts/rolling
      nightly_whl:
        required: false
        type: string
        default: ''
        description: Pytorch nightly wheel version
      transformers:
        required: false
        type: string
        default: 'v4.47.0'
        description: Transformers version
      transformers_test:
        required: true
        type: string
        default: ''
        description: Test scope. `tests_py,tests_benchmark,tests_generation,tests_models,tests_pipelines,tests_trainer,tests_utils,backbone` Delimiter is comma

permissions: read-all

jobs:
  Torch-XPU-Transformers-Tests:
    runs-on: ${{ inputs.runner }} 
    env:
      NEOReadDebugKeys: ${{ inputs.driver == 'rolling' && '1' || '0' }}
      DisableScratchPages: ${{ inputs.driver == 'rolling' && '1' || '0' }}
      python: ${{ github.event_name == 'schedule' && '3.10' || inputs.python }}
      pytorch: ${{ github.event_name == 'schedule' && 'nightly' || inputs.pytorch }}
      TRANSFORMERS_TEST_DEVICE_SPEC: 'spec.py'
    steps:
      - name: Checkout torch-xpu-ops
        uses: actions/checkout@v4
        with:
          path: torch-xpu-ops
      - name: Checkout Transformers
        uses: actions/checkout@v4
        with:
          repository: huggingface/transformers
          ref: ${{ inputs.transformers }}
          path: transformers
      - name: Prepare OS environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            espeak-ng \
            git-lfs \
            pkg-config \
            libavcodec-dev \
            libavdevice-dev \
            libavfilter-dev \
            libavformat-dev \
            libavutil-dev \
            libswresample-dev \
            libswscale-dev
          git lfs install
      - name: Prepare Conda ENV
        run: |
          which conda && conda clean -ay
          conda remove --all -y -n huggingface_transformers_test || rm -rf $(dirname ${CONDA_EXE})/../envs/huggingface_transformers_test
          conda create -n huggingface_transformers_test python=${{ env.python }} cmake ninja -y
          source activate huggingface_transformers_test
          pip install pandas scipy tqdm
      - name: Prepare Transformers
        run: |
          pwd
          source activate huggingface_transformers_test
          cd transformers
          pip install -e .
          pip install -e ".[dev-torch,testing,video]"
          rm -rf tests_log && mkdir -p tests_log
          rm -rf reports
          cp ${{ github.workspace }}/torch-xpu-ops/.github/scripts/spec.py ./
      - name: Prepare Stock Pytorch
        run: |
          pwd
          source activate huggingface_transformers_test
          if [ -z ${{ inputs.nightly_whl }} ]; then
            pip install torch torchvision torchaudio --force --pre --index-url https://download.pytorch.org/whl/nightly/xpu
          else
            pip install torch==$(echo ${{ inputs.nightly_whl }}) torchvision torchaudio --force --pre --index-url https://download.pytorch.org/whl/nightly/xpu
          fi
      - name: Report installed versions
        id: installed
        run: |
          source activate huggingface_transformers_test
          echo "TORCH_BRANCH_ID=$(python -c 'import torch; print(torch.__version__)')" |tee -a "${GITHUB_OUTPUT}" >> "${GITHUB_ENV}"
          echo "TORCH_COMMIT_ID=$(python -c 'import torch; print(torch.version.git_version)')" |tee -a "${GITHUB_OUTPUT}" >> "${GITHUB_ENV}"
          echo "pip installed packages:"
          pip list | tee ${{ github.workspace }}/transformers/tests_log/pip_list.txt
          echo "GPU render nodes:"
          cat /sys/class/drm/render*/device/device | tee ${{ github.workspace }}/transformers/tests_log/device_IDs.txt
      - name: Run XPU tests/*.py
        if: contains(input.transformers_test, 'tests_py') || github.event_name == 'schedule'
        run: |
          source activate huggingface_transformers_test
          cd transformers
          python3 -m pytest -rsf --make-reports=tests_py tests/*.py
      - name: Run XPU tests/benchmark
        if: contains(input.transformers_test, 'tests_benchmark') || github.event_name == 'schedule'
        run: |
          source activate huggingface_transformers_test
          cd transformers
          python3 -m pytest -rsf --make-reports=tests_benchmark tests/benchmark
      - name: Run XPU tests/generation
        if: contains(input.transformers_test, 'tests_generation') || github.event_name == 'schedule'
        run: |
          source activate huggingface_transformers_test
          cd transformers
          python3 -m pytest -rsf --make-reports=tests_generation tests/generation
      - name: Run XPU tests/pipelines
        if: contains(input.transformers_test, 'tests_pipelines') || github.event_name == 'schedule'
        run: |
          source activate huggingface_transformers_test
          cd transformers
          python3 -m pytest -rsf --make-reports=tests_pipelines tests/pipelines
      - name: Run XPU tests/trainer
        if: contains(input.transformers_test, 'tests_trainer') || github.event_name == 'schedule'
        run: |
          source activate huggingface_transformers_test
          cd transformers
          python3 -m pytest -rsf --make-reports=tests_trainer_not_ray -k "not ray" tests/trainer
      - name: Run XPU tests/utils
        if: contains(input.transformers_test, 'tests_utils') || github.event_name == 'schedule'
        run: |
          source activate huggingface_transformers_test
          cd transformers
          python3 -m pytest -rsf --make-reports=tests_utils tests/utils
      - name: Run XPU tests/models
        if: contains(input.transformers_test, 'tests_models') || github.event_name == 'schedule'
        run: |
          source activate huggingface_transformers_test
          cd transformers
          python3 -m pytest -rsf --make-reports=tests_models tests/models
      - name: Run XPU backbone
        if: contains(input.transformers_test, 'backbone') || github.event_name == 'schedule'
        run: |
          source activate huggingface_transformers_test
          cd transformers
          python3 -m pytest -rsf --make-reports=tests_utils -k backbone tests
      - name: Upload Test log
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Torch-XPU-Windows-Log-${{ github.event.pull_request.number || github.sha }}
          path: | 
            ${{ github.workspace }}/transformers/reports
            ${{ github.workspace }}/transformers/tests_log
      - name: Results Check
        shell: bash
        run: |
          function contains() {
              contains_status="echo 'Start $2 ...'"
              {
                [[ $1 =~ (^|,)$2($|,) ]]
              } || {
                echo "[Warning] $2 is not suppotted type! Skipped!"
                contains_status="continue"
              }
          }
          set -xe
          for transformers_test in $(echo ${{ input.transformers_test }} |sed 's/,/ /g')
          do
            contains "tests_py,tests_benchmark,tests_generation,tests_models,tests_pipelines,tests_trainer,tests_utils,backbone,tests_trainer_not_ray" $transformers_test
            $contains_status
            cd ${{ github.workspace }}/transformers/reports/${transformers_test}/
            cp ${{ github.workspace }}/torch-xpu-ops/.github/scripts/transformers_result_check.sh ./
            bash transformers_result_check.sh ${transformers_test}
          done
