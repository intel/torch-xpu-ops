name: Linux E2E Test

inputs:
  suite:
    required: true
    type: string
    default: 'huggingface'
    description: Dynamo benchmarks test suite. huggingface,timm_models,torchbench. Delimiter is comma
  dt:
    required: true
    type: string
    default: 'float32'
    description: Data precision of the test.float32,bfloat16,float16,amp_bf16,amp_fp16. Delimiter is comma
  mode:
    required: true
    type: string
    default: 'inference'
    description: inference,training. Delimiter is comma
  scenario:
    required: true
    type: string
    default: 'accuracy'
    description: accuracy,performance. Delimiter is comma

runs:
  using: composite
  steps:
    - name: Check Python
      shell: bash -xe {0}
      run: |
        which python && python -V
        which pip && pip list
    - name: E2E Test (${{ inputs.suite }} ${{ inputs.dt }} ${{ inputs.mode }} ${{ inputs.scenario }})
      shell: bash -xe {0}
      run: |
        cp ./.github/scripts/inductor_xpu_test.sh ./pytorch
        cd ./pytorch
        if [ "${{ github.event_name }}" != "pull_request" ];then
          # set models list for nightly tests
          # huggingface all and remove CamemBert
          # timm_models all
          # torchbench all
          rsync -avz ../.ci/benchmarks/ benchmarks/dynamo/
        fi
        rm -rf inductor_log torch
        # check param
        contains() {
          local pattern="$1"
          local value="$2"
          if [[ "$pattern" =~ (^|,)"$value"($|,) ]]; then
            echo "Start $value ..."
            return 0  # match
          else
            echo "[Warning] $value is not supported type! Skipped!"
            return 1  # not match
          fi
        }
        run_with_shard() {
          # set models to run
          if [ "${{ github.event_name }}" == "pull_request" ];then
            models_list_args="$(awk -F ',|;| ' '{printf(" -k %s ", $1)}' benchmarks/dynamo/$(echo ${suite} |sed 's/_models//')_models_list.txt)"
          elif [ ! -z "${MODEL_ONLY_NAME:-}" ]; then
            models_list_args=" -k ${MODEL_ONLY_NAME} "
          else
            models_list_args=""
          fi
          # shards to run
          # Such as numactl_args=' ZE_AFFINITY_MASK=0 OMP_NUM_THREADS=12 numactl -l -C 0-11 ; ZE_AFFINITY_MASK=1 OMP_NUM_THREADS=12 numactl -l -C 12-23 ;'
          delimiter=";"
          IFS="${delimiter}" read -ra numactl_args_list <<< "${numactl_args}"
          instances=${#numactl_args_list[@]}
          for i in $(seq 0 $[ ${instances} - 1 ])
          do
            xpu_id="$(echo ${numactl_args_list[$i]} |sed 's/.*ZE_AFFINITY_MASK=//;s/ .*//')"
            eval ${numactl_args_list[$i]} bash -x inductor_xpu_test.sh \
                    ${suite} ${dt} ${mode} ${scenario} \
                    xpu ${xpu_id} static ${instances} ${i} \
                    \\\"${models_list_args}\\\" \
                    &
          done
          wait
        }
        for suite in $(echo ${{ inputs.suite }} |sed 's/,/ /g')
        do
          if ! contains "huggingface,timm_models,torchbench" "$suite"; then
            continue
          fi
          for dt in $(echo ${{ inputs.dt }} |sed 's/,/ /g')
          do
            if ! contains "float32,bfloat16,float16,amp_bf16,amp_fp16" "$dt"; then
              continue
            fi
            for mode in $(echo ${{ inputs.mode }} |sed 's/,/ /g')
            do
              if ! contains "inference,training" "$mode"; then
                continue
              fi
              for scenario in $(echo ${{ inputs.scenario }} |sed 's/,/ /g')
              do
                if ! contains "accuracy,performance" "$scenario"; then
                  continue
                fi
                run_with_shard
                # summarize pass rate
                LOG_DIR="inductor_log/${suite}/${dt}"
                LOG_NAME=inductor_${suite}_${dt}_${mode}_xpu_${scenario}_all.log
                rm -f ${LOG_DIR}/${LOG_NAME}
                find ${LOG_DIR}/ -name "inductor_${suite}_${dt}_${mode}_xpu_${scenario}_card*.log" |xargs cat >> ${LOG_DIR}/${LOG_NAME} 2>&1
              done
            done
          done
        done

    - name: Summary E2E Test (${{ inputs.suite }} ${{ inputs.dt }} ${{ inputs.mode }} ${{ inputs.scenario }})
      shell: bash -xe {0}
      run: |
        cd ./pytorch
        rm -f inductor_log/summary_accuracy.csv
        for var in $(find inductor_log/ -name "inductor_*_xpu_accuracy.csv")
        do
          sed -i "s/$/,$(basename $var)/" $var
          cat $var >> inductor_log/summary_accuracy.csv
        done
        cp ${{ github.workspace }}/.github/scripts/inductor_summary.py ./
        csv_file="$(find inductor_log/ -name "inductor_*_xpu_*.csv" |tail -n 1)"
        if [ -f "${csv_file}" ];then
          pip install styleFrame scipy pandas
          dt=$(echo ${{ inputs.dt }} |sed 's/,/ /g')
          mode=$(echo ${{ inputs.mode }} |sed 's/,/ /g')
          suite=$(echo ${{ inputs.suite }} |sed 's/,/ /g')
          scenario=$(echo ${{ inputs.scenario }} |sed 's/,/ /g')
          python inductor_summary.py -p ${dt} -s ${suite} -m ${mode} -sc ${scenario}
        fi
