name: inductor-xpu-pt2e-test

inputs:
  env_prepare:
    required: false
    description: If set to any value, will prepare suite test env
  dt:
    required: true
    type: string
    default: 'float32'
    description: Data precision of the test.float32,int8. Delimiter is comma
  scenario:
    required: true
    type: string
    default: 'accuracy'
    description: accuracy,performance. Delimiter is comma
  hf_token:
    required: false
    description: HUGGING_FACE_HUB_TOKEN for torchbench test
  pytorch:
    required: false
    type: string
    default: 'main'
    description: Pytorch branch/commit
  driver:
    required: false
    type: string
    default: 'lts'
    description: Driver lts/rolling

runs:
  using: composite
  steps:
    - name: Prepare ENV
      if: ${{ inputs.env_prepare }}
      shell: bash
      run: |
        source activate e2e_ci
        # accuracy code
        if [[ "${{ inputs.scenario }}" == *"accuracy"* ]];then
          rm -rf pt2e-accuracy
          git clone -b main https://github.com/chuanqi129/inductor-tools pt2e-accuracy
        fi
        # performance code
        if [[ "${{ inputs.scenario }}" == *"performance"* ]];then
          rm -rf pt2e-performance
          git clone -b yifeng/pt2e_xpu https://github.com/zxd1997066/benchmark pt2e-performance
        fi
        # deps
        if [[ ${{ inputs.scenario }} == *"performance"* ]]; then
          if [ "${{ inputs.pytorch }}" != "nightly_wheel" ]; then
            rm -rf pt2e-audio
            git clone --single-branch -b main https://github.com/pytorch/audio pt2e-audio
            cd pt2e-audio && git checkout $TORCHAUDIO_COMMIT_ID
            python setup.py bdist_wheel && pip uninstall torchaudio -y && pip install dist/*.whl
            cd ../
            rm -rf pt2e-vision
            git clone --single-branch -b main https://github.com/pytorch/vision pt2e-vision
            cd pt2e-vision && git checkout $TORCHVISION_COMMIT_ID
            python setup.py bdist_wheel && pip uninstall torchvision -y && pip install dist/*.whl
            cd ../
          fi
          # torchbench
          python -c "import torch, torchvision, torchaudio"
          cd pt2e-performance
          # remove deps which will reinstall torch
          pip install --no-deps accelerate
          pip install --no-deps git+https://github.com/huggingface/pytorch-image-models@$TIMM_COMMIT_ID
          pip install $(curl -sSL https://raw.githubusercontent.com/huggingface/pytorch-image-models/$TIMM_COMMIT_ID/requirements.txt | grep -vE torch)
          pip install -U transformers==4.44.2
          sed -i 's+.*pytorch-image-models.*++g;s+^accelerate.*++g;s/^transformers.*//g'  requirements.txt
          git status && git diff
          pip install -r requirements.txt
          python install.py --continue_on_fail
          # deps for torchrec_dlrm
          pip install pyre_extensions
          pip install fbgemm-gpu --index-url https://download.pytorch.org/whl/cpu
          pip install --no-deps lightning-utilities==0.14.3 torchmetrics==1.0.3 tensordict torchrec
        fi
        pip install numpy==1.26.4
        # dataset
        if [ ! -d ${HOME}/datasets/imagenet ];then
          rm -rf ${HOME}/datasets/imagenet
          mkdir -p ${HOME}/datasets/imagenet
          cd ${HOME}/datasets/imagenet
          wget https://image-net.org/data/ILSVRC/2012/ILSVRC2012_img_val.tar
          tar -xf ILSVRC2012_img_val.tar
          wget -O valprep.sh https://raw.githubusercontent.com/soumith/imagenetloader.torch/master/valprep.sh
          bash valprep.sh
        fi
    - name: PT2E Test (${{ inputs.dt }}  ${{ inputs.scenario }})
      env:
        HUGGING_FACE_HUB_TOKEN: ${{ inputs.hf_token }}
        NEOReadDebugKeys: ${{ inputs.driver == 'rolling' && '1' || '0' }}
        DisableScratchPages: ${{ inputs.driver == 'rolling' && '1' || '0' }}
      shell: bash
      run: |
        source activate e2e_ci
        pt2e_logs_dir="${{ github.workspace }}/../pytorch/inductor_log/pt2e"
        rm -rf "${pt2e_logs_dir}" && mkdir -p "${pt2e_logs_dir}"
        echo "Model,Dtype,Acc@1,Acc@5,Throughput" > ${pt2e_logs_dir}/summary.csv
        if [[ "${{ inputs.scenario }}" == *"accuracy"* ]];then
          models="alexnet,mnasnet1_0,mobilenet_v2,mobilenet_v3_large,resnet152,resnet18,resnet50,resnext50_32x4d,shufflenet_v2_x1_0,squeezenet1_1,vgg16"
          for model_name in $(echo $models |sed 's/,/ /g')
          do
            if [[ "${{ inputs.dt }}" == *"float32"* ]];then
              python pt2e-accuracy/scripts/modelbench/quant/inductor_quant_acc.py --device xpu --is_fp32 --dataset_dir ${HOME}/datasets/imagenet 2>&1 |\
                      tee "${pt2e_logs_dir}/accuracy-${{ inputs.dt }}-${model_name}.log" || true
            fi
            if [[ "${{ inputs.dt }}" == *"int8"* ]];then
              python pt2e-accuracy/scripts/modelbench/quant/inductor_quant_acc.py --device xpu --dataset_dir ${HOME}/datasets/imagenet 2>&1 |\
                      tee "${pt2e_logs_dir}/accuracy-${{ inputs.dt }}-${model_name}.log" || true
            fi
            grep -i 'Acc.1.*Acc.5' "${pt2e_logs_dir}/accuracy-${{ inputs.dt }}-${model_name}.log" |tail -n 1 |awk -v m="${model_name}" -v d="${{ inputs.dt }}" '
                    BEGIN{acc1 = "failed";acc5 = "failed";}
                    {acc1 = $(NF - 2);acc5 = $NF;}
                    END{printf("%s,%s,%s,%s,\n", m, d, acc1, acc5) }' >> ${pt2e_logs_dir}/summary.csv
          done
        fi
        if [[ "${{ inputs.scenario }}" == *"performance"* ]];then
          models="alexnet,demucs,dlrm,hf_Albert,hf_Bert,hf_Bert_large,hf_DistilBert,hf_Roberta_base,mnasnet1_0,mobilenet_v2,"
          models+="mobilenet_v3_large,nvidia_deeprecommender,pytorch_CycleGAN_and_pix2pix,resnet152,resnet18,resnet50,resnext50_32x4d,"
          models+="shufflenet_v2_x1_0,squeezenet1_1,Super_SloMo,timm_efficientnet,timm_nfnet,timm_regnet,timm_resnest,"
          models+="timm_vision_transformer,timm_vision_transformer_large,timm_vovnet,vgg16"
          for model_name in $(echo $models |sed 's/,/ /g')
          do
            if [[ "${{ inputs.dt }}" == *"float32"* ]];then
              rm -rf pt2e-performance/.userbenchmark
              python pt2e-performance/run_benchmark.py xpu --test eval --channels-last --metrics throughputs \
                      --torchdynamo inductor -m $model_name 2>&1 |tee "${pt2e_logs_dir}/performance-${{ inputs.dt }}.log" || true
              grep -i 'eval_throughput' pt2e-performance/.userbenchmark |tail -n 1 |awk -v m="${model_name}" -v d="${{ inputs.dt }}" '
                      BEGIN{result = "failed";}
                      {result = $NF;}
                      END{printf("%s,%s,,,%s\n", m, d, result) }' >> ${pt2e_logs_dir}/summary.csv
              mv pt2e-performance/.userbenchmark ${pt2e_logs_dir}/performance-${{ inputs.dt }}-${model_name}
            fi
            if [[ "${{ inputs.dt }}" == *"int8"* ]];then
              rm -rf pt2e-performance/.userbenchmark
              XPU_QUANT_CONFIG=ASYMM python pt2e-performance/run_benchmark.py xpu --test eval --channels-last --metrics throughputs \
                      --torchdynamo inductor --quantization pt2e -m $model_name 2>&1 |tee "${pt2e_logs_dir}/performance-${{ inputs.dt }}-ASYMM.log" || true
              grep -i 'eval_throughput' pt2e-performance/.userbenchmark |tail -n 1 |awk -v m="${model_name}" -v d="ASYMM" '
                      BEGIN{result = "failed";}
                      {result = $NF;}
                      END{printf("%s,%s,,,%s\n", m, d, result) }' >> ${pt2e_logs_dir}/summary.csv
              mv pt2e-performance/.userbenchmark ${pt2e_logs_dir}/performance-${{ inputs.dt }}-ASYMM-${model_name}

              rm -rf pt2e-performance/.userbenchmark
              XPU_QUANT_CONFIG=SYMM  python pt2e-performance/run_benchmark.py xpu --test eval --channels-last --metrics throughputs \
                      --torchdynamo inductor --quantization pt2e -m $model_name 2>&1 |tee "${pt2e_logs_dir}/performance-${{ inputs.dt }}-SYMM.log" || true
              grep -i 'eval_throughput' pt2e-performance/.userbenchmark |tail -n 1 |awk -v m="${model_name}" -v d="SYMM" '
                      BEGIN{result = "failed";}
                      {result = $NF;}
                      END{printf("%s,%s,,,%s\n", m, d, result) }' >> ${pt2e_logs_dir}/summary.csv
              mv pt2e-performance/.userbenchmark ${pt2e_logs_dir}/performance-${{ inputs.dt }}-SYMM-${model_name}
            fi
          done
        fi
