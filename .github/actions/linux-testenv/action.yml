name: Setup Test Environment

inputs:
  pytorch:
    type: string
    default: 'main'
    description: Pytorch main by default, or 'commit/branch', or 'repo@commit/repo@branch'
  torch_xpu_ops:
    type: string
    default: 'main'
    description: Torch-xpu-ops version, 'commit/branch', or 'repo@commit/repo@branch', or 'pinned' for pytorch pin
  python:
    type: string
    default: '3.10'
    description: Python version
  suite:
    type: string
    default: 'None'
    description: Dynamo benchmarks test suite. `huggingface,timm_models,torchbench,pt2e`. Delimiter is comma

permissions: read-all

runs:
  using: composite
  steps:
    - name: Setup python-${{ inputs.python }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python }}
    - name: Check runner
      shell: bash -xe {0}
      run: |
        hostname && id
        cat /etc/os-release
        gcc -v && g++ -v
        which python && python -V
        which pip && pip list
        pip install -U pip wheel setuptools
        uname -a
        dpkg -l |grep -E 'libigc-dev|libze-dev|level-zero-dev'
        clinfo --list
        cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor |sort |uniq -c
        rm -rf ~/.triton /tmp/*inductor*
    - name: Checkout torch-xpu-ops
      uses: actions/checkout@v4
      with:
        path: torch-xpu-ops
    - name: Download Pytorch wheel
      if: ${{ ! endsWith(inputs.pytorch, '_wheel') }}
      uses: actions/download-artifact@v4
      with:
        pattern: Torch-XPU-Wheel-*
    - name: Prepare Stock Pytorch
      shell: bash -xe {0}
      run: |
        # install pytorch
        if [ $(echo "${{ inputs.pytorch }}" |grep -w "release_wheel" -c) -ne 0 ];then
          pip install torch torchvision torchaudio --pre --index-url https://download.pytorch.org/whl/xpu
        elif [ $(echo "${{ inputs.pytorch }}" |grep -w "test_wheel" -c) -ne 0 ];then
          pip install torch torchvision torchaudio --pre --index-url https://download.pytorch.org/whl/test/xpu
        elif [ $(echo "${{ inputs.pytorch }}" |grep -w "nightly_wheel" -c) -ne 0 ];then
          pip install torch torchvision torchaudio --pre --index-url https://download.pytorch.org/whl/nightly/xpu
        else
          pip install --force-reinstall $(find ${{ github.workspace }}/ -name "*torch*.whl")
        fi
        TORCH_COMMIT_ID=$(python -c 'import torch; print(torch.version.git_version)')
        if [[ "${{ inputs.pytorch }}" == *"https://"* ]];then
          PYTORCH_REPO="$(echo ${{ inputs.pytorch }} |sed 's/@.*//')"
        else
          PYTORCH_REPO="https://github.com/pytorch/pytorch.git"
        fi
        git clone ${PYTORCH_REPO} pytorch
        cd pytorch
        git checkout ${TORCH_COMMIT_ID}
        # apply extra PRs for stock pytorch
        pip install requests
        if [ "${{ github.event.name }}" == "pull_request" ];then
          python ../torch-xpu-ops/.github/scripts/apply_torch_pr.py -e https://github.com/pytorch/pytorch/pull/152940
        else
          python ../torch-xpu-ops/.github/scripts/apply_torch_pr.py
        fi
        git status && git diff && git show -s
        echo "TORCH_COMMIT_ID=${TORCH_COMMIT_ID}" >> ${GITHUB_ENV}
    - name: Prepare Torch-xpu-ops
      shell: bash -xe {0}
      run: |
        cd pytorch
        rm -rf third_party/torch-xpu-ops
        if [[ "${{ inputs.torch_xpu_ops }}" == *"https://"* ]];then
          TORCH_XPU_OPS_REPO="$(echo ${{ inputs.torch_xpu_ops }} |sed 's/@.*//')"
          TORCH_XPU_OPS_COMMIT="$(echo ${{ inputs.torch_xpu_ops }} |sed 's/.*@//')"
        else
          TORCH_XPU_OPS_REPO="https://github.com/intel/torch-xpu-ops.git"
          if [ "${{ inputs.torch_xpu_ops }}" == "pinned" ];then
            TORCH_XPU_OPS_COMMIT="$(cat third_party/xpu.txt)"
          else
            TORCH_XPU_OPS_COMMIT="${{ inputs.torch_xpu_ops }}"
          fi
        fi
        if [ "${{ github.event.name }}" == "pull_request" ];then
          cp -r ${{ github.workspace }}/torch-xpu-ops third_party/torch-xpu-ops
          cd third_party/torch-xpu-ops
        else
          git clone ${TORCH_XPU_OPS_REPO} third_party/torch-xpu-ops
          cd third_party/torch-xpu-ops
          git checkout ${TORCH_XPU_OPS_COMMIT}
        fi
        git status && git diff && git show -s
    - name: Install E2E Requirements
      shell: bash -xe {0}
      run: |
        cd pytorch
        TRANSFORMERS_VERSION_ID="$((cat .ci/docker/ci_commit_pins/huggingface-requirements.txt || echo 'transformers==4.54.0') 2>&1 |grep '^transformers==' |sed 's/.*==//')"
        TIMM_COMMIT_ID="$(cat .ci/docker/ci_commit_pins/timm.txt)"
        TORCHBENCH_COMMIT_ID="$(cat .ci/docker/ci_commit_pins/torchbench.txt)"
        pip install pandas psutil scipy
        if [[ "${{ inputs.suite }}" == *"huggingface"* ]];then
          pip install transformers==${TRANSFORMERS_VERSION_ID}
        elif [[ "${{ inputs.suite }}" == *"timm_models"* ]];then
          pip install --no-deps git+https://github.com/huggingface/pytorch-image-models@${TIMM_COMMIT_ID}
        elif [[ "${{ inputs.suite }}" == *"torchbench"* ]];then
          rm -rf ./benchmark
          git clone https://github.com/pytorch/benchmark
          cd benchmark
          git checkout ${TORCHBENCH_COMMIT_ID}
          pip install -r requirements.txt
          python install.py --continue_on_fail
          pip install -U transformers==${TRANSFORMERS_VERSION_ID} pyre-extensions
          pip install --no-deps git+https://github.com/huggingface/pytorch-image-models@${TIMM_COMMIT_ID}
          # for dlrm
          curl -fsSL https://raw.githubusercontent.com/facebookresearch/dlrm/refs/heads/torchrec-dlrm/requirements.txt |xargs pip install --no-deps
        elif [[ "${{ inputs.suite }}" == *"pt2e"* ]];then
          rm -rf ./benchmark
          git clone -b yifeng/pt2e_xpu https://github.com/zxd1997066/benchmark
          cd benchmark
          TORCHBENCH_COMMIT_ID="$(git rev-parse --short  HEAD)"
          pip install -r requirements.txt
          python install.py --continue_on_fail
          pip install -U transformers==${TRANSFORMERS_VERSION_ID} pyre-extensions
          pip install --no-deps git+https://github.com/huggingface/pytorch-image-models@${TIMM_COMMIT_ID}
          # for dlrm
          curl -fsSL https://raw.githubusercontent.com/facebookresearch/dlrm/refs/heads/torchrec-dlrm/requirements.txt |xargs pip install --no-deps
        fi
    - name: Torch Config
      shell: bash -xe {0}
      run: |
        printenv
        python -c "import torch; print(torch.__config__.show())"
        python -c "import torch; print(torch.__config__.parallel_info())"
        python -c "import torch; print(torch.__config__.torch.xpu.device_count())"
        python -c "import torchvision; print(torchvision.__version__)"
        python -c "import torchaudio; print(torchaudio.__version__)"
        python -c "import triton; print(triton.__version__)"
        python pytorch/torch/utils/collect_env.py
        pip list |grep -E 'torch|intel'
        TORCH_CHECK_ID=$(python -c 'import torch; print(torch.version.git_version)')
        if [ "${TORCH_CHECK_ID}" != "${TORCH_COMMIT_ID}" ];then
          echo "Torch is re-installed when installing deps, please check"
          exit
        fi
