name: Setup Test Environment

inputs:
  test_type:
    required: true
    type: string
    description: Test scope
  pytorch:
    type: string
    default: 'main'
    description: Pytorch main by default, or 'commit/branch', or 'repo@commit/repo@branch'
  torch_xpu_ops:
    type: string
    default: 'main'
    description: Torch-xpu-ops main by default, 'commit/branch', or 'repo@commit/repo@branch', or 'pinned' for pytorch pin
  oneapi:
    type: string
    default: 'installed'
    description: Installed oneAPI DLE on host by default, fill offline.sh url if needed
  python:
    type: string
    default: '3.10'
    description: Python version

permissions: read-all

runs:
  using: composite
  steps:
    - name: Setup python-${{ inputs.python }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python }}
    - name: Check runner
      shell: bash -xe {0}
      run: |
        hostname && id
        cat /etc/os-release
        gcc -v && g++ -v
        which python && python -V
        which pip && pip list
        pip install -U pip wheel setuptools
        uname -a
        dpkg -l |grep -E 'libigc-dev|libze-dev|level-zero-dev'
        clinfo --list
        cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor |sort |uniq -c
        rm -rf ~/.triton /tmp/*inductor*
    - name: Checkout torch-xpu-ops
      uses: actions/checkout@v4
      with:
        path: torch-xpu-ops
    - name: Install oneAPI DLE
      shell: bash -xe {0}
      if: ${{ inputs.oneapi != 'installed' }}
      run: |
        rm -rf ~/intel ~/.intel
        wget -q -O oneapi.sh "${{ inputs.oneapi }}"
        bash oneapi.sh -a -s --eula accept --action install --install-dir ${HOME}/intel/oneapi
        echo "XPU_ONEAPI_PATH=${HOME}/intel/oneapi" >> ${GITHUB_ENV}
        source ${HOME}/intel/oneapi/setvars.sh
        sycl-ls && icpx -v
    - name: Download Pytorch wheel
      if: ${{ ! contains(inputs.test_type, 'wheel') }}
      uses: actions/download-artifact@v4
      with:
        pattern: Torch-XPU-Wheel-*
    - name: Prepare Stock Pytorch
      shell: bash -xe {0}
      run: |
        # install pytorch
        if [ $(echo "${{ inputs.pytorch }}" |grep -w "release_wheel" -c) -ne 0 ];then
          pip install torch torchvision torchaudio --pre --index-url https://download.pytorch.org/whl/xpu
        elif [ $(echo "${{ inputs.pytorch }}" |grep -w "test_wheel" -c) -ne 0 ];then
          pip install torch torchvision torchaudio --pre --index-url https://download.pytorch.org/whl/test/xpu
        elif [ $(echo "${{ inputs.pytorch }}" |grep -w "nightly_wheel" -c) -ne 0 ];then
          pip install torch torchvision torchaudio --pre --index-url https://download.pytorch.org/whl/nightly/xpu
        else
          pip install --force-reinstall $(find ${{ github.workspace }}/ -name "*torch*.whl")
        fi
        pip list |grep torch
        TORCH_COMMIT_ID=$(python -c 'import torch; print(torch.version.git_version)')
        if [[ "${{ inputs.pytorch }}" == *"https://"* ]];then
          PYTORCH_REPO="$(echo ${{ inputs.pytorch }} |sed 's/@.*//')"
        else
          PYTORCH_REPO="https://github.com/pytorch/pytorch.git"
        fi
        git clone ${PYTORCH_REPO} pytorch
        cd pytorch
        git checkout ${TORCH_COMMIT_ID}
        if [[ "${{ inputs.test_type }}" == *"-e2e" ]];then
          pip install pandas psutil scipy
        else
          pip install pytest-timeout pytest-xdist
          pip install -r .ci/docker/requirements-ci.txt
        fi
        # apply extra PRs for stock pytorch
        pip install requests
        if [[ "${{ inputs.test_type }}" == *"cicd"* ]];then
          python ../torch-xpu-ops/.github/scripts/apply_torch_pr.py -e https://github.com/pytorch/pytorch/pull/152940
        else
          python ../torch-xpu-ops/.github/scripts/apply_torch_pr.py
        fi
        git status && git diff && git show -s
    - name: Prepare Torch-xpu-ops
      shell: bash -xe {0}
      if: ${{ inputs.torch_xpu_ops != 'skipped' }}
      run: |
        cd pytorch
        rm -rf third_party/torch-xpu-ops
        if [[ "${{ inputs.torch_xpu_ops }}" == *"https://"* ]];then
          TORCH_XPU_OPS_REPO="$(echo ${{ inputs.torch_xpu_ops }} |sed 's/@.*//')"
          TORCH_XPU_OPS_COMMIT="$(echo ${{ inputs.torch_xpu_ops }} |sed 's/.*@//')"
        else
          TORCH_XPU_OPS_REPO="https://github.com/intel/torch-xpu-ops.git"
          if [ "${{ inputs.torch_xpu_ops }}" == "pinned" ];then
            TORCH_XPU_OPS_COMMIT="$(cat third_party/xpu.txt)"
          else
            TORCH_XPU_OPS_COMMIT="${{ inputs.torch_xpu_ops }}"
          fi
        fi
        if [ "${{ inputs.torch_xpu_ops }}" == "cicd" ];then
          cp -r ${{ github.workspace }}/torch-xpu-ops third_party/torch-xpu-ops
          cd third_party/torch-xpu-ops
        else
          git clone ${TORCH_XPU_OPS_REPO} third_party/torch-xpu-ops
          cd third_party/torch-xpu-ops
          git checkout ${TORCH_XPU_OPS_COMMIT}
        fi
        git status && git diff && git show -s
    - name: Torch Config
      shell: bash -xe {0}
      run: |
        printenv
        python -c "import torch; print(torch.__config__.show())"
        python -c "import torch; print(torch.__config__.parallel_info())"
        python -c "import torch; print(torch.__config__.torch.xpu.device_count())"
        python -c "import torchvision; print(torchvision.__version__)"
        python -c "import torchaudio; print(torchaudio.__version__)"
        python -c "import triton; print(triton.__version__)"
        python pytorch/torch/utils/collect_env.py
        pip list |grep -E 'torch|intel'
