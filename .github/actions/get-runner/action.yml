name: Get Runner Infos

outputs:
  runner_id:
    value: ${{ steps.runner.outputs.runner_id }}
  user_id:
    value: ${{ steps.runner.outputs.user_id }}
  render_id:
    value: ${{ steps.runner.outputs.render_id }}
  hostname:
    value: ${{ steps.runner.outputs.hostname }}
  ZE_AFFINITY_MASK:
    value: ${{ steps.cpu-gpu.outputs.ZE_AFFINITY_MASK }}
  numactl_args:
    value: ${{ steps.cpu-gpu.outputs.numactl_args }}
  pytest_extra_args:
    value: ${{ steps.cpu-gpu.outputs.pytest_extra_args }}

runs:
  using: composite
  steps:
    - name: Get runner id
      shell: bash -xe {0}
      id: runner
      run: |
        # get test runner
        echo "runner_id=$(echo ${RUNNER_NAME} |sed 's/\-[0-9]$//')" |tee -a ${GITHUB_OUTPUT}
        echo "user_id=$(id -u)" |tee -a ${GITHUB_OUTPUT}
        echo "render_id=$(getent group render |cut -d: -f3)" |tee -a ${GITHUB_OUTPUT}
        echo "hostname=$(hostname)" |tee -a ${GITHUB_OUTPUT}
    - name: Show runner info
      shell: bash -xe {0}
      run: |
        # show host info
        lscpu
        lshw -C display
        free -h
        df -h
        cat /etc/os-release
        uname -a
        dpkg -l |grep -E 'intel-opencl-icd|libze-dev|libigc-dev' || true
        # clinfo and reboot system to recover if hang
        timeout 120 clinfo --list || sudo reboot
    - name: CPU frequency check
      shell: bash -xe {0}
      run: |
        scaling_governor=$(cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor |sort |uniq)
        if [ $(sudo -n true > /dev/null 2>&1 && echo $? || echo $?) -eq 0 ];then
            if [ "${scaling_governor}" != "performance" ];then
                # set frequency governor to performance mode
                sudo apt-get update
                sudo apt-get install -y linux-tools-common linux-tools-$(uname -r) linux-cloud-tools-$(uname -r)
                sudo cpupower set -b 0
                sudo cpupower frequency-set -g performance
            fi
            # clean cache
            sync; sudo sh -c "echo 3 > /proc/sys/vm/drop_caches" || true
        else
            echo "[INFO] You do NOT have ROOT permission to set system config."
            echo "       The frequency governor is ${scaling_governor}."
        fi
    - name: Distribute CPUs and GPUs evently
      id: cpu-gpu
      shell: bash -xe {0}
      run: |
        cpu_num="$(lscpu |grep -E 'Core\(s\) per socket:|Socket\(s\):' |awk 'BEGIN{sum=1}{sum*=$NF}END{printf sum}')"
        total_xpu_num="$(ls /sys/class/drm/card*/device/enable |wc -l |awk '{if($1 > 8){n=8}else{n=$1};print n}')"
        online_xpu_num="$(clinfo --list |awk 'BEGIN{gpu=0;}{
          if(gpu==1 && $0~/Platform/){gpu=0}; if(gpu==1){print $0}; if($0~/Platform.*Graphics/){gpu=1}
        }' |wc -l)"
        # check the online GPUs
        if [ ${online_xpu_num} -ne ${total_xpu_num} ];then
          echo "[Warning] Some cards are offline!"
        fi
        cpus_per_xpu="$(echo |awk -v c="${cpu_num}" -v x="${total_xpu_num}" '{printf c/x}')"
        # get all online GPUs
        xpu_list=""
        for id in $(seq 0 ${total_xpu_num})
        do
          xpu_detected="$(ZE_AFFINITY_MASK=$id clinfo --list |grep "Graphics" || true)"
          if [ "${xpu_detected}" != "" ] && [[ "${xpu_detected}" != *" UHD "* ]];then
            xpu_list+="${id},"
          fi
        done
        export ZE_AFFINITY_MASK=${xpu_list%,*}
        numactl_args="$(echo |awk -v z="${ZE_AFFINITY_MASK}" -v cx="${cpus_per_xpu}" '{
          split(z, xpu_list, ",");
          if (length(xpu_list) > 1) {
            for (i=0;i<length(xpu_list);i++) {
              printf(" ZE_AFFINITY_MASK=%d OMP_NUM_THREADS=%d numactl -l -C %d-%d ;", xpu_list[i+1], cx, i*cx, (i+1)*cx-1);
            }
          }else {
            printf(" numactl -l ");
          }
        }')"
        pytest_extra_args="$(echo |awk -v z="${ZE_AFFINITY_MASK}" -v cx="${cpus_per_xpu}" '{
          split(z, xpu_list, ",");
          if (length(xpu_list) > 1) {
            for (i=0;i<length(xpu_list);i++) {
              ze = xpu_list[i+1];
              printf(" --tx popen//env:ZE_AFFINITY_MASK=%d//env:OMP_NUM_THREADS=%d//python=\"numactl -l -C %d-%d python\"",
                      ze, cx, i*cx, (i+1)*cx-1);
            }
          }else {
            printf(" -n 1 ");
          }
        }')"
        echo "ZE_AFFINITY_MASK=${ZE_AFFINITY_MASK}" |tee -a ${GITHUB_OUTPUT}
        echo "numactl_args=${numactl_args}" |tee -a ${GITHUB_OUTPUT}
        echo "pytest_extra_args=${pytest_extra_args}" |tee -a ${GITHUB_OUTPUT}
    - name: Cleanup host
      shell: bash -xe {0}
      run: |
        # clean docker cache
        docker system prune -af || true
        # fix potential permission issue
        sudo chown $(id -u):$(id -g) ${HOME} /tmp ./ -R
        cd ${RUNNER_WORKSPACE}/..
        if [ "${PWD}" != "/" ];then
          sudo chown $(id -u):$(id -g) . -R || true
        fi
