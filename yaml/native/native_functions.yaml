- func: copy(Tensor self, Tensor src, bool non_blocking=False) -> Tensor
  variants: function
  tags: core

- func: copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)
  variants: method
  device_check: NoCheck
  device_guard: False
  dispatch:
    SparseXPU: copy_sparse_wrapper_
    SparseCsrXPU: copy_sparse_compressed_
    NestedTensorXPU: copy_nested_
  autogen: copy.out

- func: _copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> Tensor
  autogen: _copy_from.out

# We need this to be able to properly copy from a CPU to an XLA tensor with different sizes.
# See https://github.com/pytorch/xla/issues/2881
- func: _copy_from_and_resize(Tensor self, Tensor dst) -> Tensor
  dispatch:
    MPS: _copy_from_and_resize_mps
  autogen: _copy_from_and_resize.out

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)

- func: add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: add.out
  variants: function, method
  dispatch:
    SparseXPU: add_sparse
    SparseCsrXPU: add_sparse_csr
    NestedTensorXPU: NestedTensor_add_Tensor
  tags: [core, pointwise]

- func: _to_copy(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, bool non_blocking=False, MemoryFormat? memory_format=None) -> Tensor
  device_check: NoCheck
  device_guard: False
  dispatch:
    NestedTensorXPU: _to_copy_nested
  autogen: _to_copy.out
  tags: core

# to(Device) must not exist because all constructors of Device also works for
# TensorOptions. Otherwise, an ambiguity error is thrown.
# See NOTE [ TensorOptions Constructors ].
- func: to.dtype_layout(Tensor(a) self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor(a)
  variants: method
  device_check: NoCheck
  device_guard: False

- func: to.device(Tensor(a) self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor(a)
  variants: method
  device_check: NoCheck
  device_guard: False

- func: to.dtype(Tensor(a) self, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor(a)
  variants: method
  device_check: NoCheck
  device_guard: False

- func: to.other(Tensor(a) self, Tensor other, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor(a)
  variants: method
  device_check: NoCheck
  device_guard: False

- func: add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: add.out
  dispatch:
    SparseXPU: add_sparse_
    SparseCsrXPU: add_sparse_csr_
    NestedTensorXPU: NestedTensor_add__Tensor
  tags: pointwise

- func: add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  ufunc_inner_loop:
    Generic: add (AllAndComplex, BFloat16, Half, ComplexHalf)
    ScalarOnly: add (Bool)
  dispatch:
    XPU: add_out_xpu
    SparseXPU: add_out_sparse_xpu
  tags: pointwise

- func: cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: cummax

- func: cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  device_check: NoCheck   # TensorIterator
  dispatch:
    CompositeExplicitAutograd: cummax_out

- func: cummax.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: cummax.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  device_check: NoCheck   # TensorIterator

- func: _cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
  variants: function
  dispatch:
    XPU: cummax_helper_xpu

- func: cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: cummin

- func: cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  device_check: NoCheck   # TensorIterator
  dispatch:
    CompositeExplicitAutograd: cummin_out

- func: cummin.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: cummin.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  device_check: NoCheck   # TensorIterator

- func: _cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
  variants: function
  dispatch:
    XPU: cummin_helper_xpu

- func: cummaxmin_backward(Tensor grad, Tensor input, Tensor indices, int dim) -> Tensor
  variants: function
  device_check: NoCheck
  device_guard: False

- func: cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor
  structured_delegate: cumsum.out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: core

- func: cumsum_(Tensor(a!) self, int dim, *, ScalarType? dtype=None) -> Tensor(a!)
  structured_delegate: cumsum.out
  variants: method

- func: cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  structured: True
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU : cumsum_out

- func: cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor
  structured_delegate: cumprod.out
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: cumprod_(Tensor(a!) self, int dim, *, ScalarType? dtype=None) -> Tensor(a!)
  structured_delegate: cumprod.out
  variants: method

- func: cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  structured: True
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: cumprod_out

- func: cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: cumprod_.dimname(Tensor(a!) self, Dimname dim, *, ScalarType? dtype=None) -> Tensor(a!)
  variants: method

- func: cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator

- func: cumprod_backward(Tensor grad, Tensor input, int dim, Tensor output) -> Tensor
  variants: function
  device_check: NoCheck
  device_guard: False

- func: _logcumsumexp(Tensor self, int dim) -> Tensor
  dispatch:
    XPU: _logcumsumexp_xpu

- func: _logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: _logcumsumexp_out_xpu

- func: logcumsumexp(Tensor self, int dim) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: logcumsumexp

- func: logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: logcumsumexp_out

- func: logcumsumexp.dimname(Tensor self, Dimname dim) -> Tensor
  variants: function, method

- func: logcumsumexp.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)

- func: sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: sub_out
    SparseXPU: sub_out_sparse
  tags: pointwise

- func: sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: sub.out
  dispatch:
    SparseXPU: sub_sparse
    NestedTensorXPU: NestedTensor_sub_Tensor
  tags: [core, pointwise]

- func: sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: sub.out
  dispatch:
    SparseXPU: sub_sparse_
  tags: pointwise
# For C++ only, until we have conversion from C++ numbers to Tensor

- func: sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: [core, pointwise]

- func: sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  autogen: sub.Scalar_out
  tags: pointwise
# subtract, alias for sub

- func: mul.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: mul.out
  variants: function, method
  dispatch:
    SparseXPU: mul_sparse
    SparseCsrXPU: mul_sparse_csr
    NestedTensorXPU: NestedTensor_mul_Tensor
  tags: [core, pointwise]

- func: mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: mul.out
  variants: method
  dispatch:
    SparseXPU: mul_sparse_
    SparseCsrXPU: mul_sparse_csr_
    NestedTensorXPU: NestedTensor_mul__Tensor
  tags: pointwise

- func: mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: mul_out
    SparseXPU: mul_out_sparse_xpu
    SparseCsrXPU: mul_out_sparse_csr
  tags: pointwise
  # For C++ only, until we have conversion from C++ numbers to Tensor

- func: mul.Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    SparseCsrXPU: mul_scalar_sparse_csr
    NestedTensorXPU: NestedTensor_mul_Scalar
  tags: [core, pointwise]

- func: mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    SparseCsrXPU: mul__scalar_sparse_csr
    NestedTensorXPU: NestedTensor_mul__Scalar
  autogen: mul.Scalar_out
  tags: pointwise
# multiply, alias for mul

- func: mv(Tensor self, Tensor vec) -> Tensor
  variants: function, method
  dispatch:
    SparseXPU: mv_sparse

- func: mvlgamma.out(Tensor self, int p, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: mvlgamma_out
  tags: pointwise

- func: mvlgamma(Tensor self, int p) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: mvlgamma
  tags: pointwise

- func: mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: mvlgamma_
  tags: pointwise

- func: narrow_copy(Tensor self, int dim, SymInt start, SymInt length) -> Tensor
  variants: function, method
  dispatch:
    SparseXPU: narrow_copy_sparse
    CompositeExplicitAutogradNonFunctional: narrow_copy_dense_symint
  tags: view_copy

- func: div.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: div.out
  dispatch:
    SparseXPU: div_sparse
    NestedTensorXPU: NestedTensor_div_Tensor
  tags: [core, pointwise]

- func: div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: div.out
  dispatch:
    SparseXPU: div_sparse_
  tags: pointwise

- func: div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: div_out
    SparseXPU: div_out_sparse_zerodim
  tags: pointwise

- func: div.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: div.out_mode
  dispatch:
    SparseXPU: div_sparse
  tags: [core, pointwise]

- func: div_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: div.out_mode
  dispatch:
    SparseXPU: div_sparse_
  tags: pointwise

- func: div.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: div_out_mode
    SparseXPU: div_out_sparse_zerodim
  tags: pointwise

# For C++ only, until we have conversion from C++ numbers to Tensor
- func: div.Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: div
    NestedTensorXPU: NestedTensor_div_Scalar
  tags: [core, pointwise]

- func: div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: div_
  autogen: div.Scalar_out
  tags: pointwise

- func: div.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: div
  tags: [core, pointwise]

- func: div_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> Tensor(a!)
  variants: method
  dispatch:
    CompositeExplicitAutograd: div_
  autogen: div.Scalar_mode_out
  tags: pointwise

# divide, alias for div
- func: divide.Tensor(Tensor self, Tensor other) -> Tensor
  variants: function, method

- func: divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method

- func: divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)

- func: divide.Scalar(Tensor self, Scalar other) -> Tensor
  variants: function, method

- func: divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method

- func: divide.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> Tensor
  variants: function, method

- func: divide_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> Tensor(a!)
  variants: method

- func: divide.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> Tensor(a!)

- func: divide.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> Tensor
  variants: function, method

- func: divide_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> Tensor(a!)
  variants: method

  # true_divide, an alias for div
- func: true_divide.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: pointwise

- func: true_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method

- func: true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator

- func: true_divide.Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: true_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method

- func: rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    XPU: rsub
  autogen: rsub.Tensor_out

- func: remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: remainder_out
  tags: pointwise

- func: remainder.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: remainder.Tensor_out
  variants: method, function
  tags: [core, pointwise]

- func: remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: remainder.Tensor_out
  variants: method
  tags: pointwise

- func: remainder.Scalar_Tensor(Scalar self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    XPU: remainder
  autogen: remainder.Scalar_Tensor_out
  tags: pointwise


- func: fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: fmod_out
  tags: pointwise

- func: fmod.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: fmod.Tensor_out
  variants: method, function
  tags: [core, pointwise]

- func: fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: fmod.Tensor_out
  tags: pointwise

- func: tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: tanh_backward_out
  tags: pointwise

- func: tanh_backward(Tensor grad_output, Tensor output) -> Tensor
  python_module: nn
  structured_delegate: tanh_backward.grad_input

- func: eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  structured_delegate: eq.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: eq_Scalar_out
  tags: pointwise

- func: eq.Scalar(Tensor self, Scalar other) -> Tensor
  structured_delegate: eq.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    NestedTensorXPU: eq_scalar_nested
  tags: [core, pointwise]

- func: eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: eq_Tensor_out
  tags: pointwise

- func: eq.Tensor(Tensor self, Tensor other) -> Tensor
  structured_delegate: eq.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    NestedTensorXPU: eq_tensor_nested
  tags: [core, pointwise]

- func: eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: eq.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: ne_Scalar_out
  tags: pointwise

- func: ne.Scalar(Tensor self, Scalar other) -> Tensor
  structured_delegate: ne.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: ne_Tensor_out
  tags: pointwise

- func: ne.Tensor(Tensor self, Tensor other) -> Tensor
  structured_delegate: ne.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  structured_delegate: ne.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: ne.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: lt_Scalar_out
  tags: pointwise

- func: lt.Scalar(Tensor self, Scalar other) -> Tensor
  structured_delegate: lt.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: lt_Tensor_out
  tags: pointwise

- func: lt.Tensor(Tensor self, Tensor other) -> Tensor
  structured_delegate: lt.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  structured_delegate: lt.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: lt.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: le_Scalar_out
  tags: pointwise

- func: le.Scalar(Tensor self, Scalar other) -> Tensor
  structured_delegate: le.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: le_Tensor_out
  tags: pointwise

- func: le.Tensor(Tensor self, Tensor other) -> Tensor
  structured_delegate: le.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  structured_delegate: le.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: le.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: gt_Scalar_out
  tags: pointwise

- func: gt.Scalar(Tensor self, Scalar other) -> Tensor
  structured_delegate: gt.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    NestedTensorXPU: gt_scalar_nested
  tags: [core, pointwise]

- func: gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: gt_Tensor_out
  tags: pointwise

- func: gt.Tensor(Tensor self, Tensor other) -> Tensor
  structured_delegate: gt.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  structured_delegate: gt.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: gt.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: ge_Scalar_out
  tags: pointwise

- func: ge.Scalar(Tensor self, Scalar other) -> Tensor
  structured_delegate: ge.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    NestedTensorXPU: ge_scalar_nested
  tags: [core, pointwise]

- func: ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: ge_Tensor_out
  tags: pointwise

- func: ge.Tensor(Tensor self, Tensor other) -> Tensor
  structured_delegate: ge.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  structured_delegate: ge.Scalar_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: ge.Tensor_out
  device_check: NoCheck   # TensorIterator
  variants: method

- func: isnan(Tensor self) -> Tensor
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    XPU: isnan
    SparseXPU: isnan_sparse
    SparseCsrXPU: isnan_sparse_csr
    NestedTensorXPU: NestedTensor_isnan
  autogen: isnan.out
  tags: [core, pointwise]

- func: masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    XPU: masked_fill__xpu
  autogen: masked_fill.Scalar_out

- func: masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    NestedTensorXPU: NestedTensor_masked_fill
  tags: pointwise

- func: masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    XPU: masked_fill__xpu
  autogen: masked_fill.Tensor_out

- func: masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: _index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    XPU: _index_put_impl_
  autogen: _index_put_impl, _index_put_impl.out

- func: index_add.out(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  structured: True
  variants: function
  precomputed:
  - dim -> int dim
  dispatch:
    XPU: index_add_xpu_out

- func: index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source, *, Scalar alpha=1) -> Tensor(a!)
  structured_delegate: index_add.out
  variants: method

- func: index_add(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha=1) -> Tensor
  structured_delegate: index_add.out
  variants: function, method

- func: index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: index_select_out_xpu

- func: index_select(Tensor self, int dim, Tensor index) -> Tensor
  variants: method, function
  dispatch:
    XPU: index_select_xpu_
    SparseXPU: index_select_sparse_xpu
  tags: core

- func: gcd.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: gcd_out
  tags: pointwise

- func: gcd(Tensor self, Tensor other) -> Tensor
  structured_delegate: gcd.out
  variants: function, method
  tags: pointwise

- func: gcd_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: gcd.out
  variants: function, method

- func: lcm.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: lcm_out
  tags: pointwise

- func: lcm(Tensor self, Tensor other) -> Tensor
  structured_delegate: lcm.out
  variants: function, method
  tags: pointwise

- func: lcm_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: lcm.out
  variants: function, method

# - func: relu(Tensor self) -> Tensor
#   device_check: NoCheck   # TensorIterator
#   variants: function, method
#   dispatch:
#     XPU: relu
#   tags: [core, pointwise]

# - func: relu_(Tensor(a!) self) -> Tensor(a!)
#   device_check: NoCheck   # TensorIterator
#   variants: function, method
#   dispatch:
#     XPU: relu_
#   autogen: relu.out
#   tags: pointwise

- func: threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function
  structured_delegate: threshold.out
  dispatch:
    QuantizedCPU: threshold_quantized_cpu

- func: threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function
  structured_delegate: threshold.out

- func: threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: threshold_out

- func: threshold_backward.grad_input(Tensor grad_output, Tensor self, Scalar threshold, *, Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: threshold_backward_out
    SparseXPU: threshold_backward_sparse_out
    SparseCsrXPU: threshold_backward_sparse_compressed_out

- func: threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor
  variants: function
  structured_delegate: threshold_backward.grad_input
  dispatch:
    SparseXPU: threshold_backward_sparse
    SparseCsrXPU: threshold_backward_sparse_compressed
    NestedTensorXPU: threshold_backwards_nested
  tags: pointwise

- func: gelu.out(Tensor self, *, str approximate='none', Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: gelu_out_xpu

- func: gelu_(Tensor(a!) self, *, str approximate='none') -> Tensor(a!)
  structured_delegate: gelu.out
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    NestedTensorXPU: NestedTensor_gelu_

- func: gelu(Tensor self, *, str approximate='none') -> Tensor
  structured_delegate: gelu.out
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    NestedTensorXPU: NestedTensor_gelu
  tags: [core, pointwise]

- func: gelu_backward.grad_input(Tensor grad_output, Tensor self, *, str approximate='none', Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: gelu_backward_out_xpu

- func: gelu_backward(Tensor grad_output, Tensor self, *, str approximate='none') -> Tensor
  structured_delegate: gelu_backward.grad_input
  python_module: nn
  dispatch:
    NestedTensorXPU: gelu_backwards_nested
  tags: pointwise

- func: arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: arange

- func: arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: arange

- func: arange.start_step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: arange
  cpp_no_default_args: ['step']
  tags: core

- func: arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: arange_out_xpu
  cpp_no_default_args: ['step']

- func: abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: abs_out
    SparseXPU: abs_sparse_out
    SparseCsrXPU: abs_sparse_csr_out
  tags: pointwise

- func: abs(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    SparseXPU: abs_sparse
    SparseCsrXPU: abs_sparse_csr
    NestedTensorXPU: NestedTensor_abs
  tags: [core, pointwise]

- func: abs_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    SparseXPU: abs_sparse_
    SparseCsrXPU: abs_sparse_csr_
    NestedTensorXPU: NestedTensor_abs_

- func: sin(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: sin.out
  variants: function, method
  dispatch:
    SparseXPU: sin_sparse
    SparseCsrXPU: sin_sparse_csr
    NestedTensorXPU: NestedTensor_sin
  tags: [core, pointwise]

- func: sin_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: sin.out
  variants: function, method
  dispatch:
    SparseXPU: sin_sparse_
    SparseCsrXPU: sin_sparse_csr_
  tags: pointwise

- func: sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: sin_out
    SparseXPU: sin_sparse_out
    SparseCsrXPU: sin_sparse_csr_out
  tags: pointwise

- func: sinc(Tensor self) -> Tensor
  structured_delegate: sinc.out
  variants: function, method
  tags: pointwise

- func: sinc_(Tensor(a!) self) -> Tensor(a!)
  structured_delegate: sinc.out
  variants: function, method
  tags: pointwise

- func: sinc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: sinc_out
  tags: pointwise

- func: cos(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: cos.out
  dispatch:
    NestedTensorXPU: NestedTensor_cos
  tags: [core, pointwise]

- func: cos_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: cos.out
  tags: pointwise

- func: cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: cos_out
  tags: pointwise

- func: log(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: log.out
  variants: function, method
  tags: [core, pointwise]

- func: log_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: log.out
  variants: function, method
  tags: pointwise

- func: log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: log_out
  tags: pointwise

- func: sqrt(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: sqrt.out
  variants: function, method
  dispatch:
    SparseXPU: sqrt_sparse
    SparseCsrXPU: sqrt_sparse_csr
    NestedTensorXPU: NestedTensor_sqrt
  tags: [core, pointwise]

- func: sqrt_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: sqrt.out
  variants: function, method
  dispatch:
    SparseXPU: sqrt_sparse_
    SparseCsrXPU: sqrt_sparse_csr_
  tags: pointwise

- func: sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: sqrt_out
    SparseXPU: sqrt_sparse_out
    SparseCsrXPU: sqrt_sparse_csr_out
  tags: pointwise

- func: rsqrt(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: rsqrt.out
  variants: function, method
  tags: [core, pointwise]

- func: rsqrt_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: rsqrt.out
  variants: function, method
  tags: pointwise

- func: rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: rsqrt_out
  tags: pointwise

- func: tanh(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: tanh.out
  variants: function, method
  dispatch:
    SparseXPU: tanh_sparse
    SparseCsrXPU: tanh_sparse_csr
    NestedTensorXPU: NestedTensor_tanh
  tags: [core, pointwise]

- func: tanh_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: tanh.out
  variants: function, method
  dispatch:
    SparseXPU: tanh_sparse_
    SparseCsrXPU: tanh_sparse_csr_
    NestedTensorXPU: NestedTensor_tanh_
  tags: pointwise

- func: tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: tanh_out
    SparseXPU: tanh_sparse_out
    SparseCsrXPU: tanh_sparse_csr_out
  tags: pointwise

- func: neg(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: neg.out
  variants: function, method
  dispatch:
    SparseXPU: neg_sparse
    SparseCsrXPU: neg_sparse_csr
    NestedTensorXPU: NestedTensor_neg
  tags: [core, pointwise]

- func: neg_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: neg.out
  variants: function, method
  dispatch:
    SparseXPU: neg_sparse_
    SparseCsrXPU: neg_sparse_csr_
    NestedTensorXPU: NestedTensor_neg_
  tags: pointwise

- func: neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: neg_out
    SparseXPU: neg_out_sparse
    SparseCsrXPU: neg_sparse_csr_out
  tags: pointwise

- func: reciprocal(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: reciprocal.out
  variants: function, method
  tags: [core, pointwise]

- func: reciprocal_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: reciprocal.out
  variants: function, method
  tags: pointwise

- func: reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: reciprocal_out
  tags: pointwise

- func: pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: pow_Tensor_Tensor_out
  tags: pointwise

- func: pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: pow.Tensor_Tensor_out
  variants: method, function
  tags: [core, pointwise]

- func: pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  dispatch:
    XPU: pow_Scalar_out
  tags: pointwise

- func: pow.Scalar(Scalar self, Tensor exponent) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: pow.Scalar_out
  tags: [core, pointwise]

- func: pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: pow_Tensor_Scalar_out
    SparseXPU: pow_out_sparse_scalar
  tags: pointwise

- func: pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: pow.Tensor_Scalar_out
  variants: function, method
  dispatch:
    SparseXPU: pow_sparse_scalar
  tags: [core, pointwise]

- func: pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: pow.Tensor_Scalar_out
  variants: method
  tags: pointwise

- func: pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: pow.Tensor_Tensor_out
  variants: method
  tags: pointwise

- func: empty.memory_format(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  dispatch:
    XPU: empty_xpu
    SparseXPU: empty_sparse
    SparseCsrXPU: empty_sparse_compressed
  tags: core

- func: empty_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeExplicitAutograd: empty_like
    SparseXPU: empty_like_sparse_coo
    SparseCsrXPU: empty_like_sparse_csr
    NestedTensorXPU: empty_like_nested
  autogen: empty_like.out

- func: new_empty_strided(Tensor self, SymInt[] size, SymInt[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  variants: method
  dispatch:
    CompositeExplicitAutogradNonFunctional: new_empty_strided_symint
  autogen: new_empty_strided.out

- func: empty_strided(SymInt[] size, SymInt[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    XPU: empty_strided_xpu
  autogen: empty_strided.out
  tags: core

- func: fill.Scalar(Tensor self, Scalar value) -> Tensor
  variants: function
  tags: core

- func: fill.Tensor(Tensor self, Tensor value) -> Tensor
  variants: function

- func: fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: fill_
    SparseCsrXPU: fill_sparse_csr_
    NestedTensorXPU: fill_nested_
  autogen: fill.Scalar_out

- func: fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: fill_
    NestedTensorXPU: fill_nested_
  autogen: fill.Tensor_out

- func: resize_as_sparse_(Tensor(a!) self, Tensor the_template) -> Tensor(a!)
  use_const_ref_for_mutable_tensors: True
  variants: function, method
  dispatch:
    SparseXPU: resize_as_sparse_
    SparseCsrXPU: resize_as_sparse_compressed_
  autogen: resize_as_sparse, resize_as_sparse.out

- func: zero_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    XPU: zero_
    SparseXPU: zero_sparse_
    SparseCsrXPU: zero_sparse_csr_
    NestedTensorXPU: zero_nested_
  autogen: zero, zero.out

- func: random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  tags: nondeterministic_seeded
  dispatch:
    XPU: random_
  autogen: random.from, random.from_out

- func: random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  tags: nondeterministic_seeded
  variants: method
  dispatch:
    XPU: random_
  autogen: random.to, random.to_out

- func: random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  tags: nondeterministic_seeded
  variants: method
  dispatch:
    XPU: random_
  autogen: random, random.out

- func: normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  tags: nondeterministic_seeded
  variants: method
  dispatch:
    XPU: normal_
    SparseCsrXPU: normal_sparse_csr_
    NestedTensorXPU: normal_nested_
  autogen: normal.out

# Only used by the functionalization pass.
# Normally, the codegen would be able to generate a normal() NativeFunction,
# but we can't due to overload ambiguity with normal.Tensor_float.
- func: normal_functional(Tensor self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  tags: nondeterministic_seeded

- func: normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  tags: nondeterministic_seeded
  dispatch:
    XPU: normal_out

- func: normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor
  dispatch:
    XPU: normal
  tags: nondeterministic_seeded

- func: normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: normal_out
  tags: nondeterministic_seeded

- func: normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor
  dispatch:
    XPU: normal
  tags: nondeterministic_seeded

- func: normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: normal_out
  tags: nondeterministic_seeded

- func: normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor
  dispatch:
    XPU: normal
  tags: nondeterministic_seeded

- func: normal.float_float(float mean, float std, SymInt[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: normal
  tags: nondeterministic_seeded

- func: normal.float_float_out(float mean, float std, SymInt[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: normal
  tags: nondeterministic_seeded

- func: uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  tags: nondeterministic_seeded
  variants: method
  dispatch:
    XPU: uniform_
  autogen: uniform, uniform.out

# Sample bernoulli with values in `self` as probability.
- func: bernoulli(Tensor self, *, Generator? generator=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: nondeterministic_seeded

- func: bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function
  tags: nondeterministic_seeded
  dispatch:
    XPU: bernoulli_out

- func: bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  tags: nondeterministic_seeded
  dispatch:
    XPU: bernoulli_
  autogen: bernoulli.Tensor, bernoulli.Tensor_out

- func: bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  tags: nondeterministic_seeded
  dispatch:
    XPU: bernoulli_
  autogen: bernoulli.float_out

# Note [bernoulli.p schema]
# We should probably just fix the overload ambiguity by appending a _functional to the C++ API name (BC breaking)
# This out-of-place version isn't used explicitly, but needed by jit.
# There is no default valid on `p` here because it would introduce ambiguity
# with `bernoulli(Tensor self, *, Generator? generator=None)` declaration.
- func: bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: nondeterministic_seeded

- func: native_dropout(Tensor input, float p, bool? train) -> (Tensor, Tensor)
  variants: function
  dispatch:
    XPU: native_dropout_xpu
    NestedTensorXPU: native_dropout_nested
  tags: [nondeterministic_seeded, core]
  autogen: native_dropout.out

- func: native_dropout_backward(Tensor grad_output, Tensor mask, float scale) -> Tensor
  dispatch:
    XPU: native_dropout_backward_xpu
    NestedTensorXPU: native_dropout_backward
  autogen: native_dropout_backward.out
  tags: pointwise

- func: view(Tensor(a) self, SymInt[] size) -> Tensor(a)
  variants: method
  device_check: NoCheck
  device_guard: False
  dispatch:
    XPU: view
    NestedTensorXPU: view_nested
  tags: core

- func: view_as_real(Tensor(a) self) -> Tensor(a)
  variants: function
  dispatch:
    XPU: view_as_real

- func: view_as_complex(Tensor(a) self) -> Tensor(a)
  variants: function
  dispatch:
    XPU: view_as_complex

- func: view_copy(Tensor self, SymInt[] size) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: view_copy_symint
  tags: view_copy
  autogen: view_copy.out

- func: view_as_real_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: view_as_real_copy
  tags: view_copy
  autogen: view_as_real_copy.out

- func: view_as_complex_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: view_as_complex_copy
  tags: view_copy
  autogen: view_as_complex_copy.out

- func: as_strided_copy(Tensor self, SymInt[] size, SymInt[] stride, SymInt? storage_offset=None) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: as_strided_copy_symint
  tags: view_copy
  autogen: as_strided_copy.out

- func: split_with_sizes_copy(Tensor self, SymInt[] split_sizes, int dim=0) -> Tensor[]
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: split_with_sizes_copy_symint
  tags: view_copy

- func: split_with_sizes_copy.out(Tensor self, SymInt[] split_sizes, int dim=0, *, Tensor(a!)[] out) -> ()
  variants: function
  dispatch:
    XPU: split_with_sizes_copy_out_xpu

- func: _chunk_cat(Tensor[] tensors, int dim, int num_chunks) -> Tensor
  dispatch:
    XPU: _chunk_cat_xpu

- func: _chunk_cat.out(Tensor[] tensors, int dim, int num_chunks, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: _chunk_cat_out_xpu

- func: as_strided(Tensor(a) self, SymInt[] size, SymInt[] stride, SymInt? storage_offset=None) -> Tensor(a)
  variants: function, method
  dispatch:
    XPU: as_strided_tensorimpl
  device_check: NoCheck
  device_guard: False
  tags: core

- func: _reshape_alias(Tensor(a) self, SymInt[] size, SymInt[] stride) -> Tensor(a)
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    XPU: _reshape_alias

- func: _reshape_alias_copy(Tensor self, SymInt[] size, SymInt[] stride) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: _reshape_alias_copy_symint
  tags: view_copy
  autogen: _reshape_alias_copy.out

- func: resize_(Tensor(a!) self, SymInt[] size, *, MemoryFormat? memory_format=None) -> Tensor(a!)
  use_const_ref_for_mutable_tensors: True
  variants: method
  device_check: NoCheck
  device_guard: False
  tags: [core, inplace_view]
  dispatch:
    XPU: resize_xpu_
    SparseCsrXPU: resize_sparse_csr_
  autogen: resize, resize.out

- func: set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)
  variants: method
  device_check: NoCheck
  device_guard: False
  dispatch:
    XPU: set_
  autogen: set.source_Storage, set.source_Storage_out
  tags: inplace_view

- func: set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, SymInt storage_offset, SymInt[] size, SymInt[] stride=[]) -> Tensor(a!)
  variants: method
  device_check: NoCheck
  device_guard: False
  dispatch:
    XPU: set_storage_xpu_
  autogen: set.source_Storage_storage_offset, set.source_Storage_storage_offset_out
  tags: inplace_view

- func: unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)
  variants: method
  device_check: NoCheck
  device_guard: False
  dispatch:
    XPU: unfold

- func: unfold_copy(Tensor self, int dimension, int size, int step) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: unfold_copy
  tags: view_copy
  autogen: unfold_copy.out

- func: bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  variants: function
  dispatch:
    XPU: bitwise_and_out
  tags: pointwise

- func: bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function
  tags: pointwise

- func: bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: bitwise_and.Scalar_Tensor(Scalar self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function
  autogen: bitwise_and.Scalar_Tensor_out
  tags: pointwise

- func: bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  structured_delegate: bitwise_and.Tensor_out
  tags: [core, pointwise]

- func: bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  tags: pointwise

- func: bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: bitwise_and.Tensor_out
  tags: pointwise

- func: bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  variants: function
  dispatch:
    XPU: bitwise_xor_out
  tags: pointwise

- func: bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function
  tags: pointwise

- func: bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: bitwise_xor.Scalar_Tensor(Scalar self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function
  autogen: bitwise_xor.Scalar_Tensor_out
  tags: pointwise

- func: bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  structured_delegate: bitwise_xor.Tensor_out
  tags: [core, pointwise]

- func: bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: bitwise_xor_
  tags: pointwise

- func: bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: bitwise_xor.Tensor_out
  tags: pointwise

- func: bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  variants: function
  dispatch:
    XPU: bitwise_or_out
  tags: pointwise

- func: bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function
  tags: pointwise

- func: bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: bitwise_or.Scalar_Tensor(Scalar self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function
  autogen: bitwise_or.Scalar_Tensor_out
  tags: pointwise

- func: bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  structured_delegate: bitwise_or.Tensor_out
  tags: [core, pointwise]

- func: bitwise_or_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  tags: pointwise

- func: bitwise_or_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: bitwise_or.Tensor_out
  tags: pointwise

- func: bitwise_not(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: bitwise_not.out
  variants: function, method
  tags: [core, pointwise]

- func: bitwise_not_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: bitwise_not.out
  variants: method
  tags: pointwise

- func: bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: bitwise_not_out
  tags: pointwise

- func: where.self_out(Tensor condition, Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: where_self_out
    NestedTensorXPU: NestedTensor_where_out

- func: where.self(Tensor condition, Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: where
    NestedTensorXPU: NestedTensor_where
  tags: [core, pointwise]

- func: clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  cpp_no_default_args: ['min']
  structured_delegate: clamp.out
  tags: [core, pointwise]

- func: clamp.Tensor(Tensor self, Tensor? min=None, Tensor? max=None) -> Tensor
  variants: function, method
  structured_delegate: clamp.Tensor_out
  tags: [core, pointwise]

- func: clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  cpp_no_default_args: ['min']
  structured_delegate: clamp.out
  tags: pointwise

- func: clamp_.Tensor(Tensor(a!) self, Tensor? min=None, Tensor? max=None) -> Tensor(a!)
  variants: function, method
  structured_delegate: clamp.Tensor_out
  tags: pointwise

- func: clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  cpp_no_default_args: ['min']
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: clamp_out
  tags: pointwise

- func: clamp.Tensor_out(Tensor self, Tensor? min=None, Tensor? max=None, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: clamp_Tensor_out
  tags: pointwise

- func: clamp_max(Tensor self, Scalar max) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: clamp_max.out
  tags: pointwise

- func: clamp_max.Tensor(Tensor self, Tensor max) -> Tensor
  variants: function, method
  structured_delegate: clamp_max.Tensor_out
  tags: pointwise

- func: clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: clamp_max.out
  tags: pointwise

- func: clamp_max_.Tensor(Tensor(a!) self, Tensor max) -> Tensor(a!)
  variants: function, method
  structured_delegate: clamp_max.Tensor_out
  tags: pointwise

- func: clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: clamp_max_out
  tags: pointwise

- func: clamp_max.Tensor_out(Tensor self, Tensor max, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: clamp_max_Tensor_out
  tags: pointwise

- func: clamp_min(Tensor self, Scalar min) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: clamp_min.out
  tags: pointwise

- func: clamp_min.Tensor(Tensor self, Tensor min) -> Tensor
  variants: function, method
  structured_delegate: clamp_min.Tensor_out
  tags: pointwise

- func: clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: clamp_min.out
  tags: pointwise

- func: clamp_min_.Tensor(Tensor(a!) self, Tensor min) -> Tensor(a!)
  variants: function, method
  structured_delegate: clamp_min.Tensor_out
  tags: pointwise

- func: clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: clamp_min_out
  tags: pointwise

- func: clamp_min.Tensor_out(Tensor self, Tensor min, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: clamp_min_Tensor_out
  tags: pointwise

- func: max(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    XPU: max

- func: max.unary_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: max_unary_out

- func: max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  device_check: NoCheck   # TensorIterator
  structured_delegate: max.dim_max
  variants: function, method
  tags: core

- func: max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
  device_check: NoCheck   # TensorIterator
  structured: True
  precomputed:
  - dim -> int dim
  dispatch:
    XPU: max_out

- func: max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
  device_check: NoCheck   # TensorIterator


- func: min(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    XPU: min

- func: min.unary_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: min_unary_out

- func: min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  device_check: NoCheck   # TensorIterator
  structured_delegate: min.dim_min
  variants: function, method
  dispatch:
    QuantizedCPU, QuantizedCUDA: qmin
  tags: core

- func: min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
  device_check: NoCheck   # TensorIterator
  structured: True
  precomputed:
  - dim -> int dim
  dispatch:
    XPU: min_out

- func: min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
  device_check: NoCheck   # TensorIterator

- func: sum(Tensor self, *, ScalarType? dtype=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: sum
    SparseXPU: sum_coo
    SparseCsrXPU: sum_csr
  autogen: sum.out

- func: sum.dim_IntList(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  # TODO: Align the signature of sum.dim_IntList and _sparse_csr_sum.dim_dtype
  structured_delegate: sum.IntList_out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    SparseXPU: sum_sparse_coo
    SparseCsrXPU: sum_sparse_compressed
  tags: core

- func: sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: sum.IntList_out(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  structured: True
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: sum_out

- func: sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator

- func: mean.dim(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  structured_delegate: mean.out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: core

- func: mean.out(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  structured: True
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: mean_out

- func: any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  dispatch:
    XPU: any_out

- func: any.all_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  structured: True
  dispatch:
    XPU: any_all_out

- func: argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
  structured_delegate: argmax.out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: core

- func: argmax.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: argmax_out

- func: _local_scalar_dense(Tensor self) -> Scalar
  tags: [core, data_dependent_output]
  dispatch:
    XPU: _local_scalar_dense_xpu
  variants: function

- func: col2im.out(Tensor self, SymInt[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: col2im_out_xpu

- func: col2im(Tensor self, SymInt[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
  python_module: nn
  dispatch:
    XPU: col2im_xpu
  tags: core

- func: im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: im2col_out_xpu

- func: im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
  python_module: nn
  dispatch:
    XPU: im2col_xpu

- func: flip(Tensor self, int[] dims) -> Tensor
  variants: function, method
  dispatch:
    XPU: flip
  autogen: flip.out
  tags: core

- func: nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: nonzero_out_xpu
  tags: dynamic_output_shape

- func: nonzero(Tensor self) -> Tensor
  variants: method, function
  dispatch:
    XPU: nonzero_xpu
  tags: [dynamic_output_shape, core]

- func: maximum(Tensor self, Tensor other) -> Tensor
  structured_delegate: maximum.out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: maximum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: maximum_out
  tags: pointwise

- func: minimum(Tensor self, Tensor other) -> Tensor
  structured_delegate: minimum.out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: [core, pointwise]

- func: minimum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: minimum_out
  tags: pointwise

- func: sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: sigmoid_backward_out
  tags: pointwise

- func: sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor
  python_module: nn
  structured_delegate: sigmoid_backward.grad_input
  tags: pointwise

- func: _softmax(Tensor self, int dim, bool half_to_float) -> Tensor
  structured_delegate: _softmax.out
  dispatch:
    NestedTensorXPU: softmax_nested
  tags: core

- func: _softmax.out(Tensor self, int dim, bool half_to_float, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: softmax_xpu_out

- func: _safe_softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
  dispatch:
    XPU: _safe_softmax_xpu
    NestedTensorXPU: _safe_softmax

- func: _softmax_backward_data(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype) -> Tensor
  structured_delegate: _softmax_backward_data.out
  dispatch:
    NestedTensorXPU: nested_softmax_backward

- func: _softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype, *, Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: softmax_backward_xpu_out

- func: log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
  variants: function, method

- func: _log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
  structured_delegate: _log_softmax.out
  tags: core

- func: _log_softmax.out(Tensor self, int dim, bool half_to_float, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: log_softmax_xpu_out

- func: _log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype) -> Tensor
  structured_delegate: _log_softmax_backward_data.out

- func: _log_softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: log_softmax_backward_xpu_out

- func: _masked_softmax(Tensor self, Tensor mask, int? dim=None, int? mask_type=None) -> Tensor
  dispatch:
    XPU: masked_softmax_xpu
  autogen: _masked_softmax.out

- func: _masked_softmax_backward(Tensor grad_output, Tensor output, Tensor mask, int? dim=None) -> Tensor
  dispatch:
    XPU: masked_softmax_backward_xpu
  autogen: _masked_softmax_backward.out

- func: exp(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: exp.out
  variants: function, method
  tags: [core, pointwise]

- func: exp_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: exp.out
  variants: function, method
  tags: pointwise

- func: exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: exp_out
  tags: pointwise

- func: sigmoid(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: sigmoid.out
  variants: function, method
  tags: [core, pointwise]

- func: sigmoid_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: sigmoid.out
  variants: function, method
  tags: pointwise

- func: sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: sigmoid_out
  tags: pointwise

- func: sgn(Tensor self) -> Tensor
  variants: function, method
  structured_delegate: sgn.out
  dispatch:
    SparseXPU: sgn_sparse
    SparseCsrXPU: sgn_sparse_csr
    NestedTensorXPU: NestedTensor_sgn
  tags: pointwise

- func: sgn_(Tensor(a!) self) -> Tensor(a!)
  variants: method
  structured_delegate: sgn.out
  dispatch:
    SparseXPU: sgn_sparse_
    SparseCsrXPU: sgn_sparse_csr_
    NestedTensorXPU: NestedTensor_sgn_
  tags: pointwise

- func: sgn.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: sgn_out
    SparseXPU: sgn_sparse_out
    SparseCsrXPU: sgn_sparse_csr_out
  tags: pointwise

- func: _foreach_clamp_min.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_scalar_kernel_slow
    XPU: foreach_tensor_clamp_min_scalar_kernel_xpu

- func: _foreach_clamp_min_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_scalar_kernel_slow_
    XPU: foreach_tensor_clamp_min_scalar_kernel_xpu_
  autogen: _foreach_clamp_min.Scalar_out

- func: _foreach_clamp_min.List(Tensor[] self, Tensor[] other) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_list_kernel_slow
    XPU: foreach_tensor_clamp_min_list_kernel_xpu

- func: _foreach_clamp_min_.List(Tensor(a!)[] self, Tensor[] other) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_list_kernel_slow_
    XPU: foreach_tensor_clamp_min_list_kernel_xpu_
  autogen: _foreach_clamp_min.List_out

- func: _foreach_clamp_min.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_scalarlist_kernel_slow
    XPU: foreach_tensor_clamp_min_scalarlist_kernel_xpu

- func: _foreach_clamp_min_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_scalarlist_kernel_slow_
    XPU: foreach_tensor_clamp_min_scalarlist_kernel_xpu_
  autogen: _foreach_clamp_min.ScalarList_out

- func: _foreach_add.List(Tensor[] self, Tensor[] other, *, Scalar alpha=1) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_add_list_kernel_xpu

- func: _foreach_add_.List(Tensor(a!)[] self, Tensor[] other, *, Scalar alpha=1) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_add_list_kernel_xpu_
  autogen: _foreach_add.List_out

- func: _foreach_add.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_add_scalar_kernel_xpu

- func: _foreach_add_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_add_scalar_kernel_xpu_
  autogen: _foreach_add.Scalar_out

- func: _foreach_add.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_add_scalarlist_kernel_xpu

- func: _foreach_add_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_add_scalarlist_kernel_xpu_
  autogen: _foreach_add.ScalarList_out

- func: _foreach_add.Tensor(Tensor[] self, Tensor other, *, Scalar alpha=1) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_add_tensor_kernel_xpu

- func: _foreach_add_.Tensor(Tensor(a!)[] self, Tensor other, *, Scalar alpha=1) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_add_tensor_kernel_xpu_
  autogen: _foreach_add.Tensor_out

- func: _foreach_sub.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sub_scalar_kernel_slow
    XPU: foreach_tensor_sub_scalar_kernel_xpu

- func: _foreach_sub_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sub_scalar_kernel_slow_
    XPU: foreach_tensor_sub_scalar_kernel_xpu_
  autogen: _foreach_sub.Scalar_out

- func: _foreach_sub.List(Tensor[] self, Tensor[] other, *, Scalar alpha=1) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sub_list_kernel_slow
    XPU: foreach_tensor_sub_list_kernel_xpu

- func: _foreach_sub_.List(Tensor(a!)[] self, Tensor[] other, *, Scalar alpha=1) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sub_list_kernel_slow_
    XPU: foreach_tensor_sub_list_kernel_xpu_
  autogen: _foreach_sub.List_out

- func: _foreach_sub.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sub_scalarlist_kernel_slow
    XPU: foreach_tensor_sub_scalarlist_kernel_xpu

- func: _foreach_sub_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sub_scalarlist_kernel_slow_
    XPU: foreach_tensor_sub_scalarlist_kernel_xpu_
  autogen: _foreach_sub.ScalarList_out

- func: _foreach_mul.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_mul_scalar_kernel_xpu

- func: _foreach_mul.List(Tensor[] self, Tensor[] other) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_mul_list_kernel_xpu

- func: _foreach_mul_.List(Tensor(a!)[] self, Tensor[] other) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_mul_list_kernel_xpu_
  autogen: _foreach_mul.List_out

- func: _foreach_mul_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_mul_scalar_kernel_xpu_
  autogen: _foreach_mul.Scalar_out

- func: _foreach_mul.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_mul_scalarlist_kernel_xpu

- func: _foreach_mul_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_mul_scalarlist_kernel_xpu_
  autogen: _foreach_mul.ScalarList_out

- func: _foreach_mul.Tensor(Tensor[] self, Tensor other) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_mul_tensor_kernel_xpu

- func: _foreach_mul_.Tensor(Tensor(a!)[] self, Tensor other) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_mul_tensor_kernel_xpu_
  autogen: _foreach_mul.Tensor_out

- func: _foreach_div.List(Tensor[] self, Tensor[] other) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_div_list_kernel_xpu

- func: _foreach_div_.List(Tensor(a!)[] self, Tensor[] other) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_div_list_kernel_xpu_
  autogen: _foreach_div.List_out

- func: _foreach_div.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_div_scalar_kernel_xpu

- func: _foreach_div_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_div_scalar_kernel_xpu_
  autogen: _foreach_div.Scalar_out

- func: _foreach_div.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_div_scalarlist_kernel_xpu

- func: _foreach_div_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_div_scalarlist_kernel_xpu_
  autogen: _foreach_div.ScalarList_out

- func: _foreach_div.Tensor(Tensor[] self, Tensor other) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_div_tensor_kernel_xpu

- func: _foreach_div_.Tensor(Tensor(a!)[] self, Tensor other) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_div_tensor_kernel_xpu_
  autogen: _foreach_div.Tensor_out

- func: _foreach_clamp_max.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_scalar_kernel_slow
    XPU: foreach_tensor_clamp_max_scalar_kernel_xpu

- func: _foreach_clamp_max_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_scalar_kernel_slow_
    XPU: foreach_tensor_clamp_max_scalar_kernel_xpu_
  autogen: _foreach_clamp_max.Scalar_out

- func: _foreach_clamp_max.List(Tensor[] self, Tensor[] other) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_list_kernel_slow
    XPU: foreach_tensor_clamp_max_list_kernel_xpu

- func: _foreach_clamp_max_.List(Tensor(a!)[] self, Tensor[] other) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_list_kernel_slow_
    XPU: foreach_tensor_clamp_max_list_kernel_xpu_
  autogen: _foreach_clamp_max.List_out

- func: _foreach_clamp_max.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_scalarlist_kernel_slow
    XPU: foreach_tensor_clamp_max_scalarlist_kernel_xpu

- func: _foreach_clamp_max_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_scalarlist_kernel_slow_
    XPU: foreach_tensor_clamp_max_scalarlist_kernel_xpu_
  autogen: _foreach_clamp_max.ScalarList_out

# foreach_minimum/maximum dispatches to clamp_max/min
- func: _foreach_maximum.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_scalar_kernel_slow
    XPU: foreach_tensor_clamp_min_scalar_kernel_xpu

- func: _foreach_maximum_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_scalar_kernel_slow_
    XPU: foreach_tensor_clamp_min_scalar_kernel_xpu_
  autogen: _foreach_maximum.Scalar_out

# foreach_minimum/maximum dispatches to clamp_max/min
- func: _foreach_maximum.List(Tensor[] self, Tensor[] other) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_list_kernel_slow
    XPU: foreach_tensor_clamp_min_list_kernel_xpu

- func: _foreach_maximum_.List(Tensor(a!)[] self, Tensor[] other) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_list_kernel_slow_
    XPU: foreach_tensor_clamp_min_list_kernel_xpu_
  autogen: _foreach_maximum.List_out

# foreach_minimum/maximum dispatches to clamp_max/min
- func: _foreach_maximum.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_scalarlist_kernel_slow
    XPU: foreach_tensor_clamp_min_scalarlist_kernel_xpu

- func: _foreach_maximum_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_min_scalarlist_kernel_slow_
    XPU: foreach_tensor_clamp_min_scalarlist_kernel_xpu_
  autogen: _foreach_maximum.ScalarList_out

# foreach_minimum dispatches to clamp_max
- func: _foreach_minimum.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_scalar_kernel_slow
    XPU: foreach_tensor_clamp_max_scalar_kernel_xpu

- func: _foreach_minimum_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_scalar_kernel_slow_
    XPU: foreach_tensor_clamp_max_scalar_kernel_xpu_
  autogen: _foreach_minimum.Scalar_out

# foreach_minimum dispatches to clamp_max
- func: _foreach_minimum.List(Tensor[] self, Tensor[] other) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_list_kernel_slow
    XPU: foreach_tensor_clamp_max_list_kernel_xpu

- func: _foreach_minimum_.List(Tensor(a!)[] self, Tensor[] other) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_list_kernel_slow_
    XPU: foreach_tensor_clamp_max_list_kernel_xpu_
  autogen: _foreach_minimum.List_out

# foreach_minimum dispatches to clamp_max
- func: _foreach_minimum.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_scalarlist_kernel_slow
    XPU: foreach_tensor_clamp_max_scalarlist_kernel_xpu

- func: _foreach_minimum_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_clamp_max_scalarlist_kernel_slow_
    XPU: foreach_tensor_clamp_max_scalarlist_kernel_xpu_
  autogen: _foreach_minimum.ScalarList_out

- func: _foreach_addcmul.Scalar(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcmul_scalar_xpu

- func: _foreach_addcmul_.Scalar(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcmul_scalar_xpu_
  autogen: _foreach_addcmul.Scalar_out


- func: _foreach_addcmul.ScalarList(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcmul_scalarlist_xpu

- func: _foreach_addcmul_.ScalarList(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcmul_scalarlist_xpu_
  autogen: _foreach_addcmul.ScalarList_out

- func: _foreach_addcmul.Tensor(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Tensor scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcmul_tensor_xpu

- func: _foreach_addcmul_.Tensor(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Tensor scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcmul_tensor_xpu_
  autogen: _foreach_addcmul.Tensor_out

- func: _foreach_addcdiv_.ScalarList(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcdiv_scalarlist_xpu_
  autogen: _foreach_addcdiv.ScalarList_out

- func: _foreach_addcdiv.ScalarList(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcdiv_scalarlist_xpu

- func: _foreach_addcdiv.Scalar(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcdiv_scalar_xpu

- func: _foreach_addcdiv_.Scalar(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcdiv_scalar_xpu_
  autogen: _foreach_addcdiv.Scalar_out

- func: _foreach_addcdiv.Tensor(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Tensor scalars) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcdiv_tensor_xpu

- func: _foreach_addcdiv_.Tensor(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Tensor scalars) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_addcdiv_tensor_xpu_
  autogen: _foreach_addcdiv.Tensor_out

- func: _foreach_abs(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_abs_slow
    XPU: foreach_tensor_abs_xpu

- func: _foreach_abs_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_abs_slow_
    XPU: foreach_tensor_abs_xpu_
  autogen: _foreach_abs.out

- func: _foreach_acos(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_acos_slow
    XPU: foreach_tensor_acos_xpu

- func: _foreach_acos_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_acos_slow_
    XPU: foreach_tensor_acos_xpu_
  autogen: _foreach_acos.out

- func: _foreach_asin(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_asin_slow
    XPU: foreach_tensor_asin_xpu

- func: _foreach_asin_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_asin_slow_
    XPU: foreach_tensor_asin_xpu_
  autogen: _foreach_asin.out

- func: _foreach_atan(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_atan_slow
    XPU: foreach_tensor_atan_xpu

- func: _foreach_atan_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_atan_slow_
    XPU: foreach_tensor_atan_xpu_
  autogen: _foreach_atan.out

- func: _foreach_ceil(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_ceil_slow
    XPU: foreach_tensor_ceil_xpu

- func: _foreach_ceil_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_ceil_slow_
    XPU: foreach_tensor_ceil_xpu_
  autogen: _foreach_ceil.out

- func: _foreach_cos(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_cos_slow
    XPU: foreach_tensor_cos_xpu

- func: _foreach_cos_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_cos_slow_
    XPU: foreach_tensor_cos_xpu_
  autogen: _foreach_cos.out

- func: _foreach_cosh(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_cosh_slow
    XPU: foreach_tensor_cosh_xpu

- func: _foreach_cosh_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_cosh_slow_
    XPU: foreach_tensor_cosh_xpu_
  autogen: _foreach_cosh.out

- func: _foreach_erf(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_erf_slow
    XPU: foreach_tensor_erf_xpu

- func: _foreach_erf_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_erf_slow_
    XPU: foreach_tensor_erf_xpu_
  autogen: _foreach_erf.out

- func: _foreach_erfc(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_erfc_slow
    XPU: foreach_tensor_erfc_xpu

- func: _foreach_erfc_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_erfc_slow_
    XPU: foreach_tensor_erfc_xpu_
  autogen: _foreach_erfc.out

- func: _foreach_exp(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_exp_slow
    XPU: foreach_tensor_exp_xpu

- func: _foreach_exp_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_exp_slow_
    XPU: foreach_tensor_exp_xpu_
  autogen: _foreach_exp.out

- func: _foreach_expm1(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_expm1_slow
    XPU: foreach_tensor_expm1_xpu

- func: _foreach_expm1_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_expm1_slow_
    XPU: foreach_tensor_expm1_xpu_
  autogen: _foreach_expm1.out

- func: _foreach_floor(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_floor_slow
    XPU: foreach_tensor_floor_xpu

- func: _foreach_floor_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_floor_slow_
    XPU: foreach_tensor_floor_xpu_
  autogen: _foreach_floor.out

- func: _foreach_frac(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_frac_slow
    XPU: foreach_tensor_frac_xpu

- func: _foreach_frac_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_frac_slow_
    XPU: foreach_tensor_frac_xpu_
  autogen: _foreach_frac.out


- func: _foreach_lgamma(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_lgamma_slow
    XPU: foreach_tensor_lgamma_xpu

- func: _foreach_lgamma_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_lgamma_slow_
    XPU: foreach_tensor_lgamma_xpu_
  autogen: _foreach_lgamma.out

- func: _foreach_log(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_log_slow
    XPU: foreach_tensor_log_xpu

- func: _foreach_log_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_log_slow_
    XPU: foreach_tensor_log_xpu_
  autogen: _foreach_log.out

- func: _foreach_log10(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_log10_slow
    XPU: foreach_tensor_log10_xpu

- func: _foreach_log10_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_log10_slow_
    XPU: foreach_tensor_log10_xpu_
  autogen: _foreach_log10.out

- func: _foreach_log1p(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_log1p_slow
    XPU: foreach_tensor_log1p_xpu

- func: _foreach_log1p_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_log1p_slow_
    XPU: foreach_tensor_log1p_xpu_
  autogen: _foreach_log1p.out

- func: _foreach_log2(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_log2_slow
    XPU: foreach_tensor_log2_xpu

- func: _foreach_log2_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_log2_slow_
    XPU: foreach_tensor_log2_xpu_
  autogen: _foreach_log2.out


- func: _foreach_neg(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_neg_slow
    XPU: foreach_tensor_neg_xpu

- func: _foreach_neg_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_neg_slow_
    XPU: foreach_tensor_neg_xpu_
  autogen: _foreach_neg.out

- func: _foreach_pow.List(Tensor[] self, Tensor[] exponent) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_pow_list_kernel_slow
    XPU: foreach_tensor_pow_list_kernel_xpu

- func: _foreach_pow.Scalar(Tensor[] self, Scalar exponent) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_pow_scalar_kernel_slow
    XPU: foreach_tensor_pow_scalar_kernel_xpu

- func: _foreach_pow.ScalarList(Tensor[] self, Scalar[] exponent) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_pow_scalarlist_kernel_slow
    XPU: foreach_tensor_pow_scalarlist_kernel_xpu

- func: _foreach_pow.ScalarAndTensor(Scalar self, Tensor[] exponent) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_scalar_pow_list_kernel_slow
    XPU: foreach_scalar_pow_list_kernel_xpu

- func: _foreach_pow_.List(Tensor(a!)[] self, Tensor[] exponent) -> ()
  device_check: NoCheck
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_pow_list_kernel_slow_
    XPU: foreach_tensor_pow_list_kernel_xpu_
  autogen: _foreach_pow.List_out

- func: _foreach_pow_.Scalar(Tensor(a!)[] self, Scalar exponent) -> ()
  device_check: NoCheck
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_pow_scalar_kernel_slow_
    XPU: foreach_tensor_pow_scalar_kernel_xpu_
  autogen: _foreach_pow.Scalar_out

- func: _foreach_pow_.ScalarList(Tensor(a!)[] self, Scalar[] exponent) -> ()
  device_check: NoCheck
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_pow_scalarlist_kernel_slow_
    XPU: foreach_tensor_pow_scalarlist_kernel_xpu_
  autogen: _foreach_pow.ScalarList_out

- func: _foreach_reciprocal(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_reciprocal_slow
    XPU: foreach_tensor_reciprocal_xpu

- func: _foreach_reciprocal_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_reciprocal_slow_
    XPU: foreach_tensor_reciprocal_xpu_
  autogen: _foreach_reciprocal.out

- func: _foreach_round(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_round_slow
    XPU: foreach_tensor_round_xpu

- func: _foreach_round_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_round_slow_
    XPU: foreach_tensor_round_xpu_
  autogen: _foreach_round.out

- func: _foreach_sigmoid(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sigmoid_slow
    XPU: foreach_tensor_sigmoid_xpu

- func: _foreach_sigmoid_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sigmoid_slow_
    XPU: foreach_tensor_sigmoid_xpu_
  autogen: _foreach_sigmoid.out

- func: _foreach_sign(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sign_slow
    XPU: foreach_tensor_sign_xpu

- func: _foreach_sign_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sign_slow_
    XPU: foreach_tensor_sign_xpu_
  autogen: _foreach_sign.out

- func: _foreach_sin(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sin_slow
    XPU: foreach_tensor_sin_xpu

- func: _foreach_sin_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sin_slow_
    XPU: foreach_tensor_sin_xpu_
  autogen: _foreach_sin.out

- func: _foreach_sinh(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sinh_slow
    XPU: foreach_tensor_sinh_xpu

- func: _foreach_sinh_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sinh_slow_
    XPU: foreach_tensor_sinh_xpu_
  autogen: _foreach_sinh.out

- func: _foreach_sqrt(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sqrt_slow
    XPU: foreach_tensor_sqrt_xpu

- func: _foreach_sqrt_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_sqrt_slow_
    XPU: foreach_tensor_sqrt_xpu_
  autogen: _foreach_sqrt.out

- func: _foreach_tan(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_tan_slow
    XPU: foreach_tensor_tan_xpu

- func: _foreach_tan_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_tan_slow_
    XPU: foreach_tensor_tan_xpu_
  autogen: _foreach_tan.out

- func: _foreach_tanh(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_tanh_slow
    XPU: foreach_tensor_tanh_xpu

- func: _foreach_tanh_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_tanh_slow_
    XPU: foreach_tensor_tanh_xpu_
  autogen: _foreach_tanh.out

- func: _foreach_trunc(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_trunc_slow
    XPU: foreach_tensor_trunc_xpu

- func: _foreach_trunc_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_trunc_slow_
    XPU: foreach_tensor_trunc_xpu_
  autogen: _foreach_trunc.out

- func: _foreach_zero_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_zero_slow_
    XPU: foreach_tensor_zero_xpu_
  autogen: _foreach_zero, _foreach_zero.out

- func: _foreach_copy_(Tensor(a!)[] self, Tensor[] src, bool non_blocking=False) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_copy_list_kernel_slow_
    XPU: foreach_tensor_copy_list_kernel_xpu_
  autogen: _foreach_copy.out

- func: _foreach_copy(Tensor[] self, Tensor[] src, bool non_blocking=False) -> Tensor[] self_out
  device_check: NoCheck
  variants: function
  dispatch:
    CompositeExplicitAutograd: _foreach_copy

- func: _foreach_max(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_max_slow
    XPU: foreach_tensor_max_xpu
  autogen: _foreach_max.out

- func: _foreach_rsqrt(Tensor[] self) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_rsqrt_slow
    XPU: foreach_tensor_rsqrt_xpu

- func: _foreach_rsqrt_(Tensor(a!)[] self) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_rsqrt_slow_
    XPU: foreach_tensor_rsqrt_xpu_
  autogen: _foreach_rsqrt.out

- func: kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: kthvalue

- func: kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  dispatch:
    XPU: kthvalue_out_xpu

- func: kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method

- func: kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)

- func: native_layer_norm(Tensor input, SymInt[] normalized_shape, Tensor? weight, Tensor? bias, float eps) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: layer_norm_xpu
    NestedTensorXPU: nested_layer_norm
  autogen: native_layer_norm.out
  tags: core

- func: native_layer_norm_backward(Tensor grad_out, Tensor input, SymInt[] normalized_shape, Tensor mean, Tensor rstd, Tensor? weight, Tensor? bias, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: layer_norm_backward_xpu
    NestedTensorXPU: layer_norm_backward_nested
  autogen: native_layer_norm_backward.out
  tags: core

- func: tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: tril_xpu

- func: tril(Tensor self, int diagonal=0) -> Tensor
  structured_delegate: tril.out
  variants: method, function

- func: tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)
  structured_delegate: tril.out
  variants: method

- func: triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)
  structured_delegate: triu.out
  variants: method

- func: triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: triu_xpu

- func: triu(Tensor self, int diagonal=0) -> Tensor
  structured_delegate: triu.out
  variants: method, function

- func: set_(Tensor(a!) self) -> Tensor(a!)
  variants: method
  dispatch:
    XPU: set_xpu_
  autogen: set, set.out
  tags: inplace_view

- func: set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)
  variants: method
  device_check: NoCheck
  device_guard: False
  dispatch:
    XPU: set_tensor_
  autogen: set.source_Tensor, set.source_Tensor_out
  tags: inplace_view

- func: multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    XPU: multilabel_margin_loss_forward_out_xpu

- func: multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)
  python_module: nn
  dispatch:
    XPU: multilabel_margin_loss_forward_xpu

- func: multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: multilabel_margin_loss_backward_xpu_out

- func: multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor
  python_module: nn
  dispatch:
    XPU: multilabel_margin_loss_backward_xpu

- func: nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  structured: True
  dispatch:
    XPU: nll_loss_forward_out_xpu

- func: nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index) -> (Tensor output, Tensor total_weight)
  python_module: nn
  structured_delegate: nll_loss_forward.output

- func: nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: nll_loss_backward_out_xpu

- func: nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight) -> Tensor
  python_module: nn
  structured_delegate: nll_loss_backward.grad_input

# - func: sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
#   device_check: NoCheck   # TensorIterator
#   dispatch:
#     CompositeExplicitAutograd: sort_out

- func: sort.values_stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  structured: True
  dispatch:
    XPU: sort_stable_out

# - func: sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
#   device_check: NoCheck   # TensorIterator
#   variants: method, function
#   dispatch:
#     CompositeExplicitAutograd: sort
#   tags: core

- func: sort.stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
  structured_delegate: sort.values_stable
  variants: method, function

- func: cat(Tensor[] tensors, int dim=0) -> Tensor
  structured_delegate: cat.out
  dispatch:
    SparseXPU: cat_sparse
    NestedTensorXPU: cat_nested
  tags: core

- func: cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  precomputed:
  - dim -> int dim, int valid, bool all_contiguous, bool all_same_dtype, bool all_same_sizes_and_stride, MemoryFormat memory_format
  dispatch:
    XPU: cat_out_xpu

- func: is_pinned(Tensor self, Device? device=None) -> bool
  variants: method
  dispatch:
    XPU: is_pinned_xpu

# TODO: add a copy kwarg that guarantees that the tensor is put into fresh
# pinned memory
- func: pin_memory(Tensor(a) self, Device? device=None) -> Tensor(a)
  variants: method

# Unlike pin_memory, this is guaranteed to give a new non-aliasing tensor
- func: _pin_memory(Tensor self, Device? device=None) -> Tensor
  dispatch:
    XPU: _pin_memory_xpu
  autogen: _pin_memory.out

- func: rad2deg(Tensor self) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: rad2deg
    SparseXPU: rad2deg_sparse
    SparseCsrXPU: rad2deg_sparse_csr

- func: rad2deg_(Tensor(a!) self) -> Tensor(a!)
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: rad2deg_
    SparseXPU: rad2deg_sparse_
    SparseCsrXPU: rad2deg_sparse_csr_

- func: rad2deg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: rad2deg_out
    SparseXPU: rad2deg_sparse_out
    SparseCsrXPU: rad2deg_sparse_csr_out

- func: deg2rad(Tensor self) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: deg2rad
    SparseXPU: deg2rad_sparse
    SparseCsrXPU: deg2rad_sparse_csr
  tags: pointwise

- func: deg2rad_(Tensor(a!) self) -> Tensor(a!)
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: deg2rad_
    SparseXPU: deg2rad_sparse_
    SparseCsrXPU: deg2rad_sparse_csr_
  tags: pointwise

- func: deg2rad.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: deg2rad_out
    SparseXPU: deg2rad_sparse_out
    SparseCsrXPU: deg2rad_sparse_csr_out
  tags: pointwise

- func: _embedding_bag_forward_only(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)
  dispatch:
    XPU: _embedding_bag_forward_only_xpu
  autogen: _embedding_bag_forward_only.out

- func: _embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)
  dispatch:
    XPU: _embedding_bag_xpu
  autogen: _embedding_bag.out
  tags: core

# Return: (Tensor output, Tensor indices)
- func: fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  structured: True
  dispatch:
    XPU: fractional_max_pool2d_out_xpu

# Return: (Tensor output, Tensor indices)
- func: fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)
  python_module: nn
  structured_delegate: fractional_max_pool2d.output

- func: fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: fractional_max_pool2d_backward_xpu

- func: fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor
  python_module: nn
  structured_delegate: fractional_max_pool2d_backward.grad_input

# Return: (Tensor output, Tensor indices)
- func: fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  structured: True
  precomputed:
  - kernel_size -> int poolSizeT, int poolSizeH, int poolSizeW
  - output_size -> int outputT, int outputH, int outputW
  - int numBatch, int numPlanes, int inputT, int inputH, int inputW
  dispatch:
    XPU: fractional_max_pool3d_out_xpu

# Return: (Tensor output, Tensor indices)
- func: fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)
  python_module: nn
  structured_delegate: fractional_max_pool3d.output

- func: fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: fractional_max_pool3d_backward_out_xpu

- func: fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor
  python_module: nn
  dispatch:
    XPU: fractional_max_pool3d_backward_xpu

# Return: (Tensor output, Tensor indices)
- func: max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  structured: True
  dispatch:
    XPU: max_pool2d_with_indices_out_xpu

# Return: (Tensor output, Tensor indices)
- func: max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
  python_module: nn
  structured_delegate: max_pool2d_with_indices.out
  tags: core

- func: max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: max_pool2d_with_indices_backward_out_xpu

- func: max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor
  python_module: nn
  structured_delegate: max_pool2d_with_indices_backward.grad_input
  tags: core

- func: max_unpool2d.out(Tensor self, Tensor indices, SymInt[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: max_unpooling2d_forward_out_xpu

- func: max_unpool2d(Tensor self, Tensor indices, SymInt[2] output_size) -> Tensor
  python_module: nn
  dispatch:
    XPU: max_unpooling2d_forward_xpu

- func: max_unpool3d.out(Tensor self, Tensor indices, SymInt[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: max_unpooling3d_forward_out_xpu

- func: max_unpool3d(Tensor self, Tensor indices, SymInt[3] output_size, int[3] stride, int[3] padding) -> Tensor
  python_module: nn
  dispatch:
    XPU: max_unpooling3d_forward_xpu

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  structured: True
  dispatch:
    XPU: adaptive_max_pool3d_out_xpu

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)
  python_module: nn
  structured_delegate: adaptive_max_pool3d.out

- func: adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: adaptive_max_pool3d_backward_out_xpu

- func: adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor
  python_module: nn
  structured_delegate: adaptive_max_pool3d_backward.grad_input

- func: _adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor
  python_module: nn
  dispatch:
    XPU: adaptive_avg_pool2d_backward_xpu
  autogen: _adaptive_avg_pool2d_backward.out
  tags: core

- func: quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor
  dispatch:
    XPU: quantized_max_pool2d_xpu
  autogen: quantized_max_pool2d.out

- func: embedding_dense_backward(Tensor grad_output, Tensor indices, SymInt num_weights, SymInt padding_idx, bool scale_grad_by_freq) -> Tensor
  dispatch:
    XPU: embedding_dense_backward_xpu
  autogen: embedding_dense_backward.out
  tags: core

- func: embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)
  dispatch:
    XPU: embedding_renorm_xpu_
  autogen: embedding_renorm, embedding_renorm.out

- func: elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: elu_out

- func: elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor
  structured_delegate: elu.out
  device_check: NoCheck   # TensorIterator
  python_module: nn

- func: elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, Tensor self_or_result, *, Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: elu_backward_out

- func: elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, Tensor self_or_result) -> Tensor
  structured_delegate: elu_backward.grad_input
  python_module: nn

- func: elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)
  structured_delegate: elu.out
  device_check: NoCheck   # TensorIterator
  python_module: nn

- func: silu(Tensor self) -> Tensor
  structured_delegate: silu.out
  python_module: nn
  dispatch:
    NestedTensorXPU: NestedTensor_silu
  tags: pointwise

- func: silu_(Tensor(a!) self) -> Tensor(a!)
  structured_delegate: silu.out
  python_module: nn
  dispatch:
    NestedTensorXPU: NestedTensor_silu_
  tags: pointwise

- func: silu.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: silu_out
  tags: pointwise

- func: silu_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: silu_backward_out
  tags: pointwise

- func: silu_backward(Tensor grad_output, Tensor self) -> Tensor
  structured_delegate: silu_backward.grad_input
  python_module: nn
  dispatch:
    CompositeImplicitAutograd: math_silu_backward
    NestedTensorXPU: silu_backward_nested
  tags: pointwise

- func: hardswish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: hardswish_out

- func: hardswish(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: hardswish

- func: hardswish_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: hardswish_

- func: hardswish_backward(Tensor grad_output, Tensor self) -> Tensor
  python_module: nn
  dispatch:
    XPU: hardswish_backward
  autogen: hardswish_backward.out

- func: hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: hardtanh_out

- func: hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: hardtanh
  tags: core

- func: hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: hardtanh_backward_out
    MPS: hardtanh_backward_out_mps

- func: hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor
  python_module: nn
  dispatch:
    XPU: hardtanh_backward

- func: hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: hardtanh_

- func: relu(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: relu
    SparseXPU: relu_sparse
    SparseCsrXPU: relu_sparse_csr
    NestedTensorXPU: NestedTensor_relu
  tags: [core, pointwise]

- func: relu_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: relu_
    SparseXPU: relu_sparse_
    SparseCsrXPU: relu_sparse_csr_
    NestedTensorXPU: NestedTensor_relu_
  autogen: relu.out
  tags: pointwise

- func: all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: all.out
  variants: function, method
  dispatch:
    NestedTensorXPU: NestedTensor_all

- func: all.dims(Tensor self, int[]? dim=None, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: all.dims_out
  variants: function, method
  cpp_no_default_args: ['dim']
  dispatch:
    CompositeExplicitAutograd: all_dims_default

- func: all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  dispatch:
    XPU: all_out

- func: all.dims_out(Tensor self, int[]? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  dispatch:
    XPU: all_dims_out
    CompositeExplicitAutograd: all_dims_out_default
  cpp_no_default_args: ['dim']

- func: all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator

- func: all(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: all.all_out
  variants: method, function

- func: all.all_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  structured: True
  dispatch:
    XPU: all_all_out

- func: any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: any.out
  variants: function, method
  tags: core

- func: any.dims(Tensor self, int[]? dim=None, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: any.dims_out
  variants: function, method
  cpp_no_default_args: ['dim']
  tags: core
  dispatch:
    CompositeExplicitAutograd: any_dims_default

- func: any.dims_out(Tensor self, int[]? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  dispatch:
    XPU: any_dims_out
    CompositeExplicitAutograd: any_dims_out_default
  cpp_no_default_args: ['dim']

- func: any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator

- func: any(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: any.all_out
  variants: method, function
  dispatch:
    SparseXPU: any_sparse
  tags: core

- func: addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
  variants: function, method
  dispatch:
    XPU: addr

- func: addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
  variants: method

- func: addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: addr_out

- func: _foreach_lerp.List(Tensor[] self, Tensor[] tensors1, Tensor[] weights) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensors are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_lerp_ternary_xpu
  autogen: _foreach_lerp.List_out

- func: _foreach_lerp_.List(Tensor(a!)[] self, Tensor[] tensors1, Tensor[] weights) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensors are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_lerp_ternary_xpu_
  autogen: _foreach_lerp.List_out

- func: _foreach_lerp.Scalar(Tensor[] self, Tensor[] tensors1, Scalar weight) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensors are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_lerp_list_xpu
  autogen: _foreach_lerp.Scalar_out

- func: _foreach_lerp_.Scalar(Tensor(a!)[] self, Tensor[] tensors1, Scalar weight) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensors are on different devices
  variants: function
  dispatch:
    XPU: foreach_tensor_lerp_list_xpu_
  autogen: _foreach_lerp.Scalar_out

- func: _foreach_lerp.ScalarList(Tensor[] self, Tensor[] tensors1, Scalar[] weight) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensors are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_lerp_scalarlist_kernel_slow
    XPU: foreach_tensor_lerp_scalarlist_xpu
  autogen: _foreach_lerp.ScalarList_out

- func: _foreach_lerp_.ScalarList(Tensor(a!)[] self, Tensor[] tensors1, Scalar[] weight) -> ()
  device_check: NoCheck   # foreach kernels fall back to slow path when tensors are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_lerp_scalarlist_kernel_slow_
    XPU: foreach_tensor_lerp_scalarlist_xpu_
  autogen: _foreach_lerp.ScalarList_out

- func: acos(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: acos.out
  tags: [core, pointwise]

- func: acos_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: acos.out
  tags: pointwise

- func: acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: acos_out
  tags: pointwise

- func: acosh(Tensor self) -> Tensor
  variants: function, method
  structured_delegate: acosh.out
  tags: [core, pointwise]

- func: acosh_(Tensor(a!) self) -> Tensor(a!)
  variants: function, method
  structured_delegate: acosh.out
  tags: pointwise

- func: acosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: acosh_out
  tags: pointwise

- func: index.Tensor(Tensor self, Tensor?[] indices) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: index.Tensor_out
  variants: function, method
  tags: [core, dynamic_output_shape]
  # NB: This function is special-cased in tools/autograd/gen_variable_type.py
  # NB: The following functions are declared in aten/src/ATen/templates/TensorBody.h and defined in aten/src/ATen/TensorIndexing.cpp:
  # - Tensor Tensor::index(ArrayRef<TensorIndex> indices)
  # - Tensor Tensor::index(std::initializer_list<TensorIndex> indices)

- func: index.Tensor_out(Tensor self, Tensor?[] indices, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  structured: True
  structured_inherits: TensorIteratorBase
  precomputed:
  - indices -> DimVector sizes, DimVector strides
  dispatch:
    XPU: index_out

- func: scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor
  structured_delegate: scatter.src_out
  variants: function, method
  tags: core

- func: scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)
  structured_delegate: scatter.src_out
  variants: method

- func: scatter.src_out(Tensor self, int dim, Tensor index, Tensor src, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  variants: function
  dispatch:
    XPU: scatter_src_out

- func: scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor
  structured_delegate: scatter.value_out
  variants: function, method
  tags: core

- func: scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)
  structured_delegate: scatter.value_out
  variants: method

- func: scatter.value_out(Tensor self, int dim, Tensor index, Scalar value, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  variants: function
  dispatch:
    XPU: scatter_value_out

- func: scatter.reduce(Tensor self, int dim, Tensor index, Tensor src, *, str reduce) -> Tensor
  structured_delegate: scatter.reduce_out
  variants: function, method

- func: scatter_.reduce(Tensor(a!) self, int dim, Tensor index, Tensor src, *, str reduce) -> Tensor(a!)
  structured_delegate: scatter.reduce_out
  variants: method

- func: scatter.reduce_out(Tensor self, int dim, Tensor index, Tensor src, *, str reduce, Tensor(a!) out) -> Tensor(a!)
  structured: True
  variants: function
  dispatch:
    XPU: scatter_reduce_out

- func: scatter.value_reduce(Tensor self, int dim, Tensor index, Scalar value, *, str reduce) -> Tensor
  structured_delegate: scatter.value_reduce_out
  variants: function, method

- func: scatter_.value_reduce(Tensor(a!) self, int dim, Tensor index, Scalar value, *, str reduce) -> Tensor(a!)
  structured_delegate: scatter.value_reduce_out
  variants: method

- func: scatter.value_reduce_out(Tensor self, int dim, Tensor index, Scalar value, *, str reduce, Tensor(a!) out) -> Tensor(a!)
  structured: True
  variants: function
  dispatch:
    XPU: scatter_value_reduce_out

- func: scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor
  variants: function, method

- func: scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor
  variants: function, method

- func: scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor
  structured_delegate: scatter_add.out
  variants: function, method
  tags: core

- func: scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)
  structured_delegate: scatter_add.out
  variants: method

- func: scatter_add.out(Tensor self, int dim, Tensor index, Tensor src, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  variants: function
  dispatch:
    XPU: scatter_add

- func: scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor
  variants: function, method

- func: scatter_reduce.two(Tensor self, int dim, Tensor index, Tensor src, str reduce, *, bool include_self=True) -> Tensor
  structured_delegate: scatter_reduce.two_out
  variants: function, method
  tags: core

- func: scatter_reduce_.two(Tensor(a!) self, int dim, Tensor index, Tensor src, str reduce, *, bool include_self=True) -> Tensor(a!)
  structured_delegate: scatter_reduce.two_out
  variants: method

- func: scatter_reduce.two_out(Tensor self, int dim, Tensor index, Tensor src, str reduce, *, bool include_self=True, Tensor(a!) out) -> Tensor(a!)
  structured: True
  variants: function
  dispatch:
    XPU: scatter_reduce_two

- func: amax(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor
  variants: function, method
  structured_delegate: amax.out
  tags: core

- func: amax.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: amax_out

- func: amin(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor
  variants: function, method
  structured_delegate: amin.out
  tags: core

- func: amin.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: amin_out

- func: upsample_trilinear3d.out(Tensor self, SymInt[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_trilinear3d_out_xpu

- func: upsample_trilinear3d(Tensor self, SymInt[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_trilinear3d.out

- func: upsample_trilinear3d_backward.grad_input(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_trilinear3d_backward_out_xpu

- func: upsample_trilinear3d_backward(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_trilinear3d_backward.grad_input

- func: upsample_nearest1d.vec(Tensor input, SymInt[]? output_size, float[]? scale_factors) -> Tensor
  python_module: nn
  autogen: upsample_nearest1d.vec_out

- func: _upsample_nearest_exact1d.vec(Tensor input, SymInt[]? output_size, float[]? scale_factors) -> Tensor
  python_module: nn
  autogen: _upsample_nearest_exact1d.vec_out

- func: _upsample_nearest_exact1d.out(Tensor self, SymInt[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_nearest_exact1d_out_xpu

- func: _upsample_nearest_exact1d(Tensor self, SymInt[1] output_size, float? scales=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_nearest_exact1d.out

- func: upsample_nearest1d.out(Tensor self, SymInt[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_nearest1d_out_xpu

- func: upsample_nearest1d(Tensor self, SymInt[1] output_size, float? scales=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_nearest1d.out

- func: _upsample_nearest_exact1d_backward.grad_input(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_nearest_exact1d_backward_out_xpu

- func: _upsample_nearest_exact1d_backward(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, float? scales=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_nearest_exact1d_backward.grad_input

- func: upsample_nearest1d_backward.grad_input(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_nearest1d_backward_out_xpu

- func: upsample_nearest1d_backward(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, float? scales=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_nearest1d_backward.grad_input

- func: upsample_nearest2d.out(Tensor self, SymInt[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_nearest2d_out_xpu

- func: _upsample_nearest_exact2d.out(Tensor self, SymInt[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_nearest_exact2d_out_xpu

- func: upsample_nearest2d(Tensor self, SymInt[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_nearest2d.out

- func: _upsample_nearest_exact2d(Tensor self, SymInt[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_nearest_exact2d.out

- func: upsample_nearest2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_nearest2d_backward_out_xpu

- func: _upsample_nearest_exact2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_nearest_exact2d_backward_out_xpu

- func: upsample_nearest2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_nearest2d_backward.grad_input

- func: _upsample_nearest_exact2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_nearest_exact2d_backward.grad_input

- func: upsample_nearest3d.out(Tensor self, SymInt[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_nearest3d_out_xpu

- func: _upsample_nearest_exact3d.out(Tensor self, SymInt[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_nearest_exact3d_out_xpu

- func: upsample_nearest3d(Tensor self, SymInt[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_nearest3d.out
  dispatch:
    QuantizedCPU: upsample_nearest3d_quantized_cpu

- func: _upsample_nearest_exact3d(Tensor self, SymInt[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_nearest_exact3d.out
  dispatch:
    QuantizedCPU: _upsample_nearest_exact3d_quantized_cpu

- func: upsample_nearest3d_backward.grad_input(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_nearest3d_backward_out_xpu

- func: _upsample_nearest_exact3d_backward.grad_input(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_nearest_exact3d_backward_out_xpu

- func: upsample_nearest3d_backward(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_nearest3d_backward.grad_input

- func: _upsample_nearest_exact3d_backward(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_nearest_exact3d_backward.grad_input

- func: unfold_backward(Tensor grad_in, SymInt[] input_sizes, int dim, int size, int step) -> Tensor
  variants: function
  dispatch:
    XPU: unfold_backward
  autogen: unfold_backward.out

- func: bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor
  variants: function, method
  dispatch:
    XPU: _bincount_xpu
  tags: dynamic_output_shape
  autogen: bincount.out

- func: reflection_pad1d.out(Tensor self, SymInt[2] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: reflection_pad1d_out_xpu

- func: reflection_pad1d(Tensor self, SymInt[2] padding) -> Tensor
  python_module: nn
  structured_delegate: reflection_pad1d.out
  tags: core

- func: reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: reflection_pad1d_backward_out_xpu

- func: reflection_pad1d_backward(Tensor grad_output, Tensor self, SymInt[2] padding) -> Tensor
  python_module: nn
  structured_delegate: reflection_pad1d_backward.grad_input

- func: reflection_pad2d.out(Tensor self, SymInt[4] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: reflection_pad2d_out_xpu

- func: reflection_pad2d(Tensor self, SymInt[4] padding) -> Tensor
  python_module: nn
  dispatch:
    XPU: reflection_pad2d_xpu
  tags: core

- func: reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: reflection_pad2d_backward_out_xpu

- func: reflection_pad2d_backward(Tensor grad_output, Tensor self, SymInt[4] padding) -> Tensor
  python_module: nn
  dispatch:
    XPU: reflection_pad2d_backward_xpu

- func: addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: addcmul_out
  tags: pointwise

- func: addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
  structured_delegate: addcmul.out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: pointwise

- func: addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)
  structured_delegate: addcmul.out
  device_check: NoCheck   # TensorIterator
  variants: method
  tags: pointwise

- func: group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor

- func: native_group_norm(Tensor input, Tensor? weight, Tensor? bias, SymInt N, SymInt C, SymInt HxW, int group, float eps) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: native_group_norm
  autogen: native_group_norm.out
  tags: core

- func: native_group_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, SymInt N, SymInt C, SymInt HxW, int group, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: native_group_norm_backward
  autogen: native_group_norm_backward.out
  tags: core

- func: grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor

- func: grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
  dispatch:
    XPU: grid_sampler_2d_xpu
  autogen: grid_sampler_2d.out
  tags: core

- func: grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
  dispatch:
    XPU: grid_sampler_2d_backward_xpu
  autogen: grid_sampler_2d_backward.out

- func: grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
  dispatch:
    XPU: grid_sampler_3d_xpu
  autogen: grid_sampler_3d.out

# `grid_sampler_3d_backward` takes in `output_mask` to optimize performance for
# the case where `input` doesn't require gradient. Gradient for `grid` is always
# computed (only `output_mask[0]` is checked by the implementations).
- func: grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
  dispatch:
    XPU: grid_sampler_3d_backward_xpu
  autogen: grid_sampler_3d_backward.out

- func: _foreach_norm.Scalar(Tensor[] self, Scalar ord=2, ScalarType? dtype=None) -> Tensor[]
  device_check: NoCheck   # foreach kernels fall back to slow path when tensor are on different devices
  variants: function
  dispatch:
    CompositeExplicitAutograd: foreach_tensor_norm_slow
    XPU: foreach_tensor_norm_xpu
  autogen: _foreach_norm.Scalar_out

- func: cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor

- func: _cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> Tensor
  dispatch:
    XPU: _cdist_forward
  autogen: _cdist_forward.out
  tags: core

- func: _cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor
  dispatch:
    XPU: _cdist_backward
  autogen: _cdist_backward.out

- func: pdist(Tensor self, float p=2) -> Tensor

- func: _pdist_forward(Tensor self, float p=2) -> Tensor
  dispatch:
    XPU: _pdist_forward
  autogen: _pdist_forward.out
  tags: core

- func: _pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor
  dispatch:
    XPU: _pdist_backward
  autogen: _pdist_backward.out

- func: permute_copy(Tensor self, int[] dims) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: permute_copy
  tags: view_copy
  autogen: permute_copy.out

- func: permute(Tensor(a) self, int[] dims) -> Tensor(a)
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: permute
    SparseXPU: permute_sparse_coo
  tags: core

- func: _amp_foreach_non_finite_check_and_unscale_(Tensor(a!)[] self, Tensor(b!) found_inf, Tensor inv_scale) -> ()
  variants: function
  dispatch:
    XPU: _amp_foreach_non_finite_check_and_unscale_xpu_
  autogen: _amp_foreach_non_finite_check_and_unscale, _amp_foreach_non_finite_check_and_unscale.out

- func: _amp_update_scale_(Tensor(a!) self, Tensor(b!) growth_tracker, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> Tensor(a!)
  variants: function
  dispatch:
    XPU: _amp_update_scale_xpu_
  autogen: _amp_update_scale, _amp_update_scale.out

- func: hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: hardsigmoid_out

- func: hardsigmoid(Tensor self) -> Tensor
  structured_delegate: hardsigmoid.out
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    QuantizedCPU: hardsigmoid_quantized_cpu

- func: hardsigmoid_(Tensor(a!) self) -> Tensor(a!)
  structured_delegate: hardsigmoid.out
  device_check: NoCheck   # TensorIterator
  python_module: nn

- func: hardsigmoid_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: hardsigmoid_backward_out

- func: hardsigmoid_backward(Tensor grad_output, Tensor self) -> Tensor
  structured_delegate: hardsigmoid_backward.grad_input
  python_module: nn

- func: leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: leaky_relu_out

- func: leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor
  structured_delegate: leaky_relu.out
  device_check: NoCheck   # TensorIterator
  python_module: nn
  tags: core

- func: leaky_relu_backward.grad_input(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result, *, Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: leaky_relu_backward_out

- func: leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> Tensor
  structured_delegate: leaky_relu_backward.grad_input
  python_module: nn

- func: leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)
  structured_delegate: leaky_relu.out
  device_check: NoCheck   # TensorIterator
  python_module: nn

- func: linalg_vector_norm(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  python_module: linalg
  variants: function
  structured_delegate: linalg_vector_norm.out

- func: linalg_vector_norm.out(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  python_module: linalg
  structured: True
  dispatch:
    XPU: linalg_vector_norm_out

- func: clone(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: clone
    SparseXPU: clone_sparse
    SparseCsrXPU: clone_sparse_compressed
    NestedTensorXPU: clone_nested
  autogen: clone.out
  tags: [core, pointwise]

- func: randperm(SymInt n, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  tags: [core, nondeterministic_seeded]
  dispatch:
    CompositeExplicitAutograd: randperm

- func: randperm.generator(SymInt n, *, Generator? generator, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  tags: nondeterministic_seeded
  dispatch:
    CompositeExplicitAutograd: randperm

- func: randperm.out(SymInt n, *, Tensor(a!) out) -> Tensor(a!)
  tags: nondeterministic_seeded
  dispatch:
    CompositeExplicitAutograd: randperm_out

- func: randperm.generator_out(SymInt n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
  tags: nondeterministic_seeded
  dispatch:
    XPU: randperm_out_xpu

- func: roll(Tensor self, SymInt[1] shifts, int[1] dims=[]) -> Tensor
  variants: function, method
  dispatch:
    XPU: roll_xpu
  autogen: roll.out

- func: _nested_from_padded(Tensor padded, Tensor cpu_nested_shape_example, bool fuse_transform_0213=False) -> Tensor
  device_check: NoCheck # cpu_nested_shape_example will always be on CPU
  dispatch:
    XPU: nested_from_padded_xpu
  autogen: _nested_from_padded.out

- func: _nested_tensor_softmax_with_shape(Tensor self, Tensor query) -> Tensor
  dispatch:
    NestedTensorXPU: NestedTensor_softmax_dropout_xpu
  tags: nondeterministic_seeded

- func: avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  precomputed:
  - kernel_size -> int kH, int kW
  - stride -> int dH, int dW
  - padding -> int padH, int padW
  dispatch:
    XPU: avg_pool2d_out_xpu

- func: avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
  python_module: nn
  structured_delegate: avg_pool2d.out
  dispatch:
    MkldnnCPU: mkldnn_avg_pool2d
    QuantizedCPU: avg_pool2d_quantized_cpu
  tags: core

- func: avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: avg_pool2d_backward_out_xpu

- func: avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
  python_module: nn
  structured_delegate: avg_pool2d_backward.grad_input
  tags: core

- func: avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: avg_pool3d_out_xpu
    MkldnnCPU: mkldnn_avg_pool3d_out

- func: avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
  python_module: nn
  structured_delegate: avg_pool3d.out
  dispatch:
    MkldnnCPU: mkldnn_avg_pool3d
    QuantizedCPU: avg_pool3d_quantized_cpu
  tags: core

- func: avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: avg_pool3d_backward_out_xpu
    MkldnnCPU: mkldnn_avg_pool3d_backward_out

- func: avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
  python_module: nn
  structured_delegate: avg_pool3d_backward.grad_input
  dispatch:
    MkldnnCPU: mkldnn_avg_pool3d_backward

- func: mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: mse_loss_out

- func: mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: mse_loss.out
  python_module: nn

- func: mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: mse_loss_backward_out

- func: mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
  python_module: nn
  dispatch:
    XPU: mse_loss_backward

- func: glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: glu_out

- func: glu(Tensor self, int dim=-1) -> Tensor
  structured_delegate: glu.out
  device_check: NoCheck   # TensorIterator
  python_module: nn

- func: glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: glu_backward_xpu_out

- func: glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor
  python_module: nn
  dispatch:
    XPU: glu_backward_xpu

- func: glu_jvp(Tensor glu, Tensor x, Tensor dx, int dim) -> Tensor
  python_module: nn
  dispatch:
    XPU: glu_jvp
  autogen: glu_jvp.out

- func: glu_backward_jvp(Tensor grad_x, Tensor grad_glu, Tensor x, Tensor dgrad_glu, Tensor dx, int dim) -> Tensor
  python_module: nn
  dispatch:
    XPU: glu_backward_jvp
  autogen: glu_backward_jvp.out

- func: softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: softplus_out

- func: softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor
  structured_delegate: softplus.out
  device_check: NoCheck   # TensorIterator
  python_module: nn

- func: softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, *, Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: softplus_backward_out

- func: softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold) -> Tensor
  structured_delegate: softplus_backward.grad_input
  python_module: nn

- func: softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: softshrink_out

- func: softshrink(Tensor self, Scalar lambd=0.5) -> Tensor
  structured_delegate: softshrink.out
  device_check: NoCheck   # TensorIterator
  python_module: nn

- func: softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: softshrink_backward_out

- func: softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor
  structured_delegate: softshrink_backward.grad_input
  python_module: nn

- func: hypot.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: hypot_out
  tags: pointwise

- func: hypot(Tensor self, Tensor other) -> Tensor
  structured_delegate: hypot.out
  variants: method, function
  tags: pointwise

- func: hypot_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: hypot.out
  variants: method
  tags: pointwise

- func: igamma.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: igamma_out
  tags: pointwise

- func: igamma(Tensor self, Tensor other) -> Tensor
  structured_delegate: igamma.out
  variants: method, function
  tags: pointwise

- func: igamma_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: igamma.out
  variants: method
  tags: pointwise

- func: igammac.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: igammac_out
  tags: pointwise

- func: igammac(Tensor self, Tensor other) -> Tensor
  structured_delegate: igammac.out
  variants: method, function
  tags: pointwise

- func: igammac_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: igammac.out
  variants: method
  tags: pointwise

- func: _efficientzerotensor(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    XPU: _efficientzerotensor_xpu
  autogen: _efficientzerotensor.out

- func: complex(Tensor real, Tensor imag) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutograd: complex

- func: complex.out(Tensor real, Tensor imag, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: complex_out

- func: trace(Tensor self) -> Tensor
  variants: method, function
  dispatch:
    XPU: trace_xpu
  autogen: trace.out

- func: _adaptive_avg_pool2d(Tensor self, SymInt[2] output_size) -> Tensor
  dispatch:
    XPU: adaptive_avg_pool2d_xpu
  autogen: _adaptive_avg_pool2d.out
  tags: core

- func: adaptive_avg_pool2d(Tensor self, SymInt[2] output_size) -> Tensor
  python_module: nn
  dispatch:
    CompositeImplicitAutograd: adaptive_avg_pool2d_symint

- func: adaptive_avg_pool2d.out(Tensor self, SymInt[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: adaptive_avg_pool2d_out_xpu

- func: adaptive_avg_pool3d.out(Tensor self, SymInt[3] output_size, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: adaptive_avg_pool3d_out_xpu
    QuantizedCPU: adaptive_avg_pool3d_out_quantized_cpu

- func: adaptive_avg_pool3d(Tensor self, SymInt[3] output_size) -> Tensor
  python_module: nn
  dispatch:
    CompositeImplicitAutograd: adaptive_avg_pool3d_symint

- func: _adaptive_avg_pool3d(Tensor self, SymInt[3] output_size) -> Tensor
  dispatch:
    XPU: adaptive_avg_pool3d_xpu
    QuantizedCPU: adaptive_avg_pool3d_quantized_cpu
  autogen: _adaptive_avg_pool3d.out
  tags: core

- func: adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: adaptive_avg_pool3d_backward_out_xpu

- func: _adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor
  python_module: nn
  dispatch:
    XPU: adaptive_avg_pool3d_backward_xpu
  autogen: _adaptive_avg_pool3d_backward.out

- func: std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function
  cpp_no_default_args: ["unbiased"]

- func: std_mean.dim(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function
  cpp_no_default_args: ["unbiased"]

- func: std_mean.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    XPU: std_mean_xpu
  autogen: std_mean.correction_out

- func: std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function
  cpp_no_default_args: ["unbiased"]

- func: std_mean.correction_names(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function

- func: std(Tensor self, bool unbiased=True) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  cpp_no_default_args: ["unbiased"]

- func: std.dim(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  cpp_no_default_args: ["unbiased"]

- func: std.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: std_xpu

- func: std.correction_out(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: std_xpu_out

- func: var(Tensor self, bool unbiased=True) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  cpp_no_default_args: ["unbiased"]

- func: var.dim(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: core
  cpp_no_default_args: ["unbiased"]

- func: var.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: var_xpu
  tags: core

- func: var.out(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  cpp_no_default_args: ["unbiased"]

- func: var.correction_out(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: var_xpu_out

- func: var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  cpp_no_default_args: ["unbiased"]

- func: var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  cpp_no_default_args: ["unbiased"]

- func: var.correction_names(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: var.correction_names_out(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function

- func: var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function
  cpp_no_default_args: ["unbiased"]

- func: var_mean.dim(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function
  cpp_no_default_args: ["unbiased"]

- func: var_mean.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    XPU: var_mean_xpu
  autogen: var_mean.correction_out

- func: var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function
  cpp_no_default_args: ["unbiased"]

- func: var_mean.correction_names(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
  device_check: NoCheck   # TensorIterator
  variants: function

- func: gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: gather_out

- func: gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor
  variants: method, function
  structured_delegate: gather.out
  tags: core

- func: gather_backward(Tensor grad, Tensor self, int dim, Tensor index, bool sparse_grad) -> Tensor
  variants: function
  device_check: NoCheck
  device_guard: False

- func: gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)

- func: gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor
  variants: method, function

- func: upsample_bicubic2d.out(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_bicubic2d_out_xpu

- func: upsample_bicubic2d(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_bicubic2d.out

- func: upsample_bicubic2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_bicubic2d_backward_out_xpu

- func: upsample_bicubic2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_bicubic2d_backward.grad_input

- func: _upsample_bicubic2d_aa.out(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_bicubic2d_aa_out_xpu

- func: _upsample_bicubic2d_aa(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_bicubic2d_aa.out

- func: _upsample_bicubic2d_aa_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_bicubic2d_aa_backward_out_xpu

- func: _upsample_bicubic2d_aa_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_bicubic2d_aa_backward.grad_input

- func: upsample_bilinear2d.out(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_bilinear2d_out_xpu

- func: upsample_bilinear2d(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_bilinear2d.out

- func: upsample_bilinear2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_bilinear2d_backward_out_xpu

- func: upsample_bilinear2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_bilinear2d_backward.grad_input

- func: _upsample_bilinear2d_aa.out(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_bilinear2d_aa_out_xpu

- func: _upsample_bilinear2d_aa(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_bilinear2d_aa.out

- func: _upsample_bilinear2d_aa_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: _upsample_bilinear2d_aa_backward_out_xpu

- func: _upsample_bilinear2d_aa_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  structured_delegate: _upsample_bilinear2d_aa_backward.grad_input

- func: native_norm(Tensor self, Scalar p=2) -> Tensor
  dispatch:
    SparseXPU: norm_sparse
  autogen: native_norm.out

- func: native_norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, ScalarType? dtype) -> Tensor
  dispatch:
    SparseXPU: norm_sparse
  autogen: native_norm.ScalarOpt_dim_dtype_out

- func: batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)
  dispatch:
    XPU: batch_norm_stats_xpu
  autogen: batch_norm_stats.out

- func: batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor
  dispatch:
    XPU: batch_norm_elemt_xpu

- func: batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: batch_norm_elemt_xpu_out

- func: batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)
  dispatch:
    XPU: batch_norm_backward_reduce_xpu
  autogen: batch_norm_backward_reduce.out

- func: batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor sum_dy, Tensor sum_dy_xmu, Tensor count) -> Tensor
  dispatch:
    XPU: batch_norm_backward_elemt_xpu
  autogen: batch_norm_backward_elemt.out

- func: batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)
  dispatch:
    XPU: batch_norm_update_stats_xpu
  autogen: batch_norm_update_stats.out

- func: native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: batch_norm_xpu

- func: native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  dispatch:
    XPU: batch_norm_xpu_out

- func: native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: batch_norm_backward_xpu
  autogen: native_batch_norm_backward.out

# TODO: In 2 weeks, we should make native_batch_norm composite implicit so that this correct schema percolates correctly through our dispatching
- func: _native_batch_norm_legit(Tensor input, Tensor? weight, Tensor? bias, Tensor(a!) running_mean, Tensor(b!) running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: _batch_norm_legit_xpu
  autogen: _native_batch_norm_legit_functional
  tags: core

- func: _native_batch_norm_legit.out(Tensor input, Tensor? weight, Tensor? bias, Tensor(a!) running_mean, Tensor(b!) running_var, bool training, float momentum, float eps, *, Tensor(d!) out, Tensor(e!) save_mean, Tensor(f!) save_invstd) -> (Tensor(d!), Tensor(e!), Tensor(f!))
  dispatch:
    XPU: _batch_norm_legit_xpu_out

- func: _native_batch_norm_legit.no_stats(Tensor input, Tensor? weight, Tensor? bias, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: _batch_norm_legit_no_stats_xpu
  tags: core

- func: _native_batch_norm_legit.no_stats_out(Tensor input, Tensor? weight, Tensor? bias, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  dispatch:
    XPU: _batch_norm_legit_no_stats_xpu_out

- func: _batch_norm_with_update(Tensor input, Tensor? weight, Tensor? bias, Tensor(a!) running_mean, Tensor(b!) running_var, float momentum, float eps) -> (Tensor, Tensor, Tensor, Tensor)
  dispatch:
    XPU: _batch_norm_with_update_xpu
  autogen: _batch_norm_with_update_functional

- func: _batch_norm_with_update.out(Tensor input, Tensor? weight, Tensor? bias, Tensor(a!) running_mean, Tensor(b!) running_var, float momentum, float eps, *, Tensor(d!) out, Tensor(e!) save_mean, Tensor(f!) save_invstd, Tensor(g!) reserve) -> (Tensor(d!), Tensor(e!), Tensor(f!), Tensor(g!))
  dispatch:
    XPU: _batch_norm_with_update_xpu_out

- func: batch_norm_backward(Tensor grad_out, Tensor input, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, bool update, float eps, bool[3] output_mask, Tensor reserve) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: _new_batch_norm_backward_xpu

- func: batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)
  dispatch:
    XPU: batch_norm_gather_stats_xpu
  autogen: batch_norm_gather_stats.out

- func: batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)
  dispatch:
    XPU: batch_norm_gather_stats_with_counts_xpu
  autogen: batch_norm_gather_stats_with_counts.out

- func: lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: lerp_Scalar
  tags: pointwise

- func: lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  structured_delegate: lerp.Scalar_out
  tags: pointwise

- func: lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: lerp.Scalar_out
  tags: pointwise

- func: lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  structured_delegate: lerp.Tensor_out
  tags: pointwise

- func: lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: lerp_Tensor
  tags: pointwise

- func: lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: lerp.Tensor_out
  tags: pointwise

- func: addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: addcdiv_out
  tags: pointwise

- func: addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
  structured_delegate: addcdiv.out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: pointwise

- func: addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)
  structured_delegate: addcdiv.out
  device_check: NoCheck   # TensorIterator
  variants: method
  tags: pointwise

- func: eye(SymInt n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: eye

- func: eye.m(SymInt n, SymInt m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: eye

- func: eye.out(SymInt n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: eye_out_xpu

- func: eye.m_out(SymInt n, SymInt m, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: eye_out_xpu

- func: logical_not(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: logical_not
    NestedTensorXPU: NestedTensor_logical_not
  tags: [core, pointwise]

- func: logical_not_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: logical_not_
    NestedTensorXPU: NestedTensor_logical_not_
  tags: pointwise

- func: logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: logical_not_out
  tags: pointwise

- func: erf(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: erf.out
  variants: function, method
  dispatch:
    SparseXPU: erf_sparse
    SparseCsrXPU: erf_sparse_csr
  tags: [core, pointwise]

- func: erf_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: erf.out
  variants: function, method
  dispatch:
    SparseXPU: erf_sparse_
    SparseCsrXPU: erf_sparse_csr_
  tags: pointwise

- func: erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: erf_out
    SparseXPU: erf_sparse_out
    SparseCsrXPU: erf_sparse_csr_out
  tags: pointwise

- func: erfc(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: erfc.out
  variants: function, method
  tags: pointwise

- func: erfc_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: erfc.out
  variants: function, method
  tags: pointwise

- func: erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: erfc_out
  tags: pointwise

- func: _conj_physical(Tensor self) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: _conj_physical
    SparseCsrXPU: conj_physical_sparse_csr
  autogen: _conj_physical.out

- func: conj_physical(Tensor self) -> Tensor
  variants: function, method
  tags: pointwise

- func: conj_physical.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: conj_physical_out
    SparseXPU: conj_physical_out_sparse
    SparseCsrXPU: conj_physical_sparse_csr_out
  tags: pointwise

- func: conj_physical_(Tensor(a!) self) -> Tensor(a!)
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: conj_physical_
    SparseCsrXPU: conj_physical_sparse_csr_
  tags: pointwise

- func: ceil(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: ceil.out
  variants: function, method
  dispatch:
    SparseXPU: ceil_sparse
    SparseCsrXPU: ceil_sparse_csr
  tags: [core, pointwise]

- func: ceil_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: ceil.out
  variants: function, method
  dispatch:
    SparseXPU: ceil_sparse_
    SparseCsrXPU: ceil_sparse_csr_
  tags: pointwise

- func: ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: ceil_out
    SparseXPU: ceil_sparse_out
    SparseCsrXPU: ceil_sparse_csr_out
  tags: pointwise

- func: searchsorted.Tensor(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None) -> Tensor
  dispatch:
    XPU: searchsorted_xpu

- func: searchsorted.Tensor_out(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: searchsorted_out_xpu

- func: searchsorted.Scalar(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None) -> Tensor
  dispatch:
    XPU: searchsorted_xpu

- func: searchsorted.Scalar_out(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: searchsorted_out_xpu

- func: _convert_indices_from_coo_to_csr(Tensor self, int size, *, bool out_int32=False) -> Tensor
  structured_delegate: _convert_indices_from_coo_to_csr.out
  
- func: _convert_indices_from_coo_to_csr.out(Tensor self, int size, *, bool out_int32=False, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: _convert_indices_from_coo_to_csr_structured_xpu

- func: _convert_indices_from_csr_to_coo(Tensor crow_indices, Tensor col_indices, *, bool out_int32=False, bool transpose=False) -> Tensor
  structured_delegate: _convert_indices_from_csr_to_coo.out

- func: _convert_indices_from_csr_to_coo.out(Tensor crow_indices, Tensor col_indices, *, bool out_int32=False, bool transpose=False, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: _convert_indices_from_csr_to_coo_structured_xpu

- func: bucketize.Tensor(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor
  dispatch:
    XPU: bucketize_xpu

- func: bucketize.Tensor_out(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: bucketize_out_xpu

- func: bucketize.Scalar(Scalar self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor
  dispatch:
    XPU: bucketize_xpu
  autogen: bucketize.Scalar_out

- func: is_set_to(Tensor self, Tensor tensor) -> bool
  variants: method
  device_check: NoCheck
  device_guard: False
  dispatch:
    XPU: is_set_to

- func: mish(Tensor self) -> Tensor
  structured_delegate: mish.out
  python_module: nn

- func: mish_(Tensor(a!) self) -> Tensor(a!)
  structured_delegate: mish.out
  python_module: nn

- func: mish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: mish_out

- func: mish_backward(Tensor grad_output, Tensor self) -> Tensor
  python_module: nn
  dispatch:
    XPU: mish_backward

- func: atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: atan2_out
  tags: [core, pointwise]

- func: atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: atan2.out
  variants: method
  tags: pointwise

- func: atan2(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: atan2.out
  variants: method, function
  tags: [core, pointwise]
# arctan2, alias of atan2

- func: copysign.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: copysign_out
  tags: pointwise

- func: copysign.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: copysign.out
  tags: pointwise

- func: copysign_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: copysign.out

- func: copysign.Scalar(Tensor self, Scalar other) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: copysign
  tags: pointwise

- func: copysign_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  dispatch:
    CompositeExplicitAutograd: copysign_

- func: copysign.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: copysign_out
  tags: pointwise

# TODO: remove dispatch section when porting TH CUDA to ATen
- func: multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  tags: nondeterministic_seeded
  dispatch:
    XPU: multinomial_out

- func: multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor
  variants: method, function
  dispatch:
    XPU: multinomial
  tags: nondeterministic_seeded

- func: _fused_adam_(Tensor(a!)[] self, Tensor(b!)[] grads, Tensor(c!)[] exp_avgs, Tensor(d!)[] exp_avg_sqs, Tensor(e!)[] max_exp_avg_sqs, Tensor[] state_steps, *, float lr, float beta1, float beta2, float weight_decay, float eps, bool amsgrad, bool maximize, Tensor? grad_scale=None, Tensor? found_inf=None) -> ()
  # Unlike "foreach" functions, lists of tensors should be guaranteed to be on the same device (for now).
  variants: function
  dispatch:
    XPU: _fused_adam_kernel_xpu_
  autogen: _fused_adam, _fused_adam.out

- func: _fused_adam_.tensor_lr(Tensor(a!)[] self, Tensor(b!)[] grads, Tensor(c!)[] exp_avgs, Tensor(d!)[] exp_avg_sqs, Tensor(e!)[] max_exp_avg_sqs, Tensor[] state_steps, *, Tensor lr, float beta1, float beta2, float weight_decay, float eps, bool amsgrad, bool maximize, Tensor? grad_scale=None, Tensor? found_inf=None) -> ()
  # Unlike "foreach" functions, lists of tensors should be guaranteed to be on the same device (for now),
  # but still skip the device check as the Tensor LR can be on CPU
  device_check: NoCheck
  variants: function
  dispatch:
    XPU: _fused_adam_kernel_xpu_
  autogen: _fused_adam.tensor_lr, _fused_adam.tensor_lr_out

- func: _fused_adamw_(Tensor(a!)[] self, Tensor(b!)[] grads, Tensor(c!)[] exp_avgs, Tensor(d!)[] exp_avg_sqs, Tensor(e!)[] max_exp_avg_sqs, Tensor[] state_steps, *, float lr, float beta1, float beta2, float weight_decay, float eps, bool amsgrad, bool maximize, Tensor? grad_scale=None, Tensor? found_inf=None) -> ()
  # Unlike "foreach" functions, lists of tensors should be guaranteed to be on the same device (for now).
  variants: function
  dispatch:
    XPU: _fused_adamw_kernel_xpu_
  autogen: _fused_adamw, _fused_adamw.out

- func: _fused_adamw_.tensor_lr(Tensor(a!)[] self, Tensor(b!)[] grads, Tensor(c!)[] exp_avgs, Tensor(d!)[] exp_avg_sqs, Tensor(e!)[] max_exp_avg_sqs, Tensor[] state_steps, *, Tensor lr, float beta1, float beta2, float weight_decay, float eps, bool amsgrad, bool maximize, Tensor? grad_scale=None, Tensor? found_inf=None) -> ()
  # Unlike "foreach" functions, lists of tensors should be guaranteed to be on the same device (for now),
  # but still skip the device check as the Tensor LR can be on CPU
  device_check: NoCheck
  variants: function
  dispatch:
    XPU: _fused_adamw_kernel_xpu_
  autogen: _fused_adamw.tensor_lr, _fused_adamw.tensor_lr_out

- func: huber_loss.out(Tensor self, Tensor target, int reduction=Mean, float delta=1.0, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: huber_loss_out

- func: huber_loss(Tensor self, Tensor target, int reduction=Mean, float delta=1.0) -> Tensor
  python_module: nn
  dispatch:
    XPU: huber_loss

- func: huber_loss_backward.out(Tensor grad_output, Tensor self, Tensor target, int reduction, float delta, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: huber_loss_backward_out

- func: huber_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float delta) -> Tensor
  python_module: nn
  dispatch:
    CompositeExplicitAutograd: huber_loss_backward

- func: reflection_pad3d.out(Tensor self, SymInt[6] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: reflection_pad3d_out_xpu

- func: reflection_pad3d(Tensor self, SymInt[6] padding) -> Tensor
  python_module: nn
  structured_delegate: reflection_pad3d.out
  tags: core

- func: reflection_pad3d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: reflection_pad3d_backward_out_xpu

- func: reflection_pad3d_backward(Tensor grad_output, Tensor self, SymInt[6] padding) -> Tensor
  python_module: nn
  structured_delegate: reflection_pad3d_backward.grad_input

- func: count_nonzero.dim_IntList(Tensor self, int[] dim) -> Tensor
  variants: function, method
  dispatch:
    XPU: count_nonzero_xpu
  autogen: count_nonzero.dim_IntList_out

- func: count_nonzero(Tensor self, int? dim=None) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: count_nonzero
  autogen: count_nonzero.out

- func: sinh(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: sinh.out
  variants: function, method
  dispatch:
    SparseXPU: sinh_sparse
    SparseCsrXPU: sinh_sparse_csr
  tags: [core, pointwise]

- func: sinh_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: sinh.out
  variants: function, method
  dispatch:
    SparseXPU: sinh_sparse_
    SparseCsrXPU: sinh_sparse_csr_
  tags: pointwise

- func: sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: sinh_out
    SparseXPU: sinh_sparse_out
    SparseCsrXPU: sinh_sparse_csr_out
# Returns a copy of this `Variable` that is detached from its autograd graph.
# This method is OK to call if the `Variable` is a view.
#
# NOTE: Previously, if we change the tensor metadata (e.g. sizes / strides /
# storage / storage_offset) of a tensor created from `detach()`, those metadata
# in the original tensor will also be updated. However, the new behavior is that
# those metadata changes to the detached tensor will not update the original tensor
# anymore, and in the `detach()` function we need to set `allow_tensor_metadata_change_`
# to false to make such changes explicitly illegal, in order to prevent users from
# changing metadata of the detached tensor and expecting the original tensor to also
# be updated.
  tags: pointwise

- func: asinh(Tensor self) -> Tensor
  variants: function, method
  structured_delegate: asinh.out
  dispatch:
    SparseXPU: asinh_sparse
    SparseCsrXPU: asinh_sparse_csr
  tags: [core, pointwise]

- func: asinh_(Tensor(a!) self) -> Tensor(a!)
  variants: function, method
  structured_delegate: asinh.out
  dispatch:
    SparseXPU: asinh_sparse_
    SparseCsrXPU: asinh_sparse_csr_
  tags: pointwise

- func: asinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: asinh_out
    SparseXPU: asinh_sparse_out
    SparseCsrXPU: asinh_sparse_csr_out
  tags: pointwise

- func: tan(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: tan.out
  variants: function, method
  dispatch:
    SparseXPU: tan_sparse
    SparseCsrXPU: tan_sparse_csr
  tags: [core, pointwise]

- func: tan_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: tan.out
  variants: function, method
  dispatch:
    SparseXPU: tan_sparse_
    SparseCsrXPU: tan_sparse_csr_
  tags: pointwise

- func: tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: tan_out
    SparseXPU: tan_sparse_out
    SparseCsrXPU: tan_sparse_csr_out
  tags: pointwise

- func: atan(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: atan.out
  variants: function, method
  dispatch:
    SparseXPU: atan_sparse
    SparseCsrXPU: atan_sparse_csr
  tags: [core, pointwise]

- func: atan_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: atan.out
  variants: function, method
  dispatch:
    SparseXPU: atan_sparse_
    SparseCsrXPU: atan_sparse_csr_
  tags: pointwise

- func: atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: atan_out
    SparseXPU: atan_sparse_out
    SparseCsrXPU: atan_sparse_csr_out
  tags: pointwise

- func: atanh(Tensor self) -> Tensor
  structured_delegate: atanh.out
  variants: function, method
  dispatch:
    SparseXPU: atanh_sparse
    SparseCsrXPU: atanh_sparse_csr
  tags: [core, pointwise]

- func: atanh_(Tensor(a!) self) -> Tensor(a!)
  structured_delegate: atanh.out
  variants: function, method
  dispatch:
    SparseXPU: atanh_sparse_
    SparseCsrXPU: atanh_sparse_csr_
  tags: pointwise

- func: atanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: atanh_out
    SparseXPU: atanh_sparse_out
    SparseCsrXPU: atanh_sparse_csr_out
  tags: pointwise
# arctanh, alias for atanh

- func: cosh(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: cosh.out
  tags: [core, pointwise]

- func: cosh_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: cosh.out
  tags: pointwise

- func: cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: cosh_out
  tags: pointwise

- func: nan_to_num(Tensor self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: nan_to_num
    SparseXPU: nan_to_num_sparse
  tags: pointwise

- func: nan_to_num_(Tensor(a!) self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor(a!)
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: nan_to_num_
    SparseXPU: nan_to_num_sparse_
  tags: pointwise

- func: nan_to_num.out(Tensor self, float? nan=None, float? posinf=None, float? neginf=None, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: nan_to_num_out
    SparseXPU: nan_to_num_sparse_out
  tags: pointwise

- func: linalg_cross(Tensor self, Tensor other, *, int dim=-1) -> Tensor
  python_module: linalg
  variants: function
  structured_delegate: linalg_cross.out
  dispatch:
    ZeroTensor: linalg_cross_zerotensor

- func: linalg_cross.out(Tensor self, Tensor other, *, int dim=-1, Tensor(a!) out) -> Tensor(a!)
  python_module: linalg
  structured: True
  dispatch:
    XPU: linalg_cross_out

- func: log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  python_module: nn

- func: log_sigmoid(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  python_module: nn

- func: log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: log_sigmoid_forward_out_xpu

- func: log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)
  device_check: NoCheck   # TensorIterator
  python_module: nn
  dispatch:
    XPU: log_sigmoid_forward_xpu

- func: log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: log_sigmoid_backward_xpu_out

- func: log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor
  python_module: nn
  dispatch:
    XPU: log_sigmoid_backward_xpu

- func: logical_and(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: logical_and
  tags: [core, pointwise]

- func: logical_and_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: logical_and_
  tags: pointwise

- func: logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: logical_and_out
  tags: pointwise

- func: logical_or(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: logical_or
  tags: [core, pointwise]

- func: logical_or_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: logical_or_
  tags: pointwise

- func: logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: logical_or_out
  tags: pointwise

- func: logical_xor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: logical_xor
  tags: [core, pointwise]

- func: logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: logical_xor_
  tags: pointwise

- func: logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: logical_xor_out
  tags: pointwise

- func: isin.Tensor_Tensor_out(Tensor elements, Tensor test_elements, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> Tensor(a!)
  variants: function
  structured: True
  dispatch:
    XPU: isin_Tensor_Tensor_out

- func: isin.Tensor_Tensor(Tensor elements, Tensor test_elements, *, bool assume_unique=False, bool invert=False) -> Tensor
  variants: function
  structured_delegate: isin.Tensor_Tensor_out

- func: isin.Tensor_Scalar_out(Tensor elements, Scalar test_element, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> Tensor(a!)
  variants: function
  structured: True
  dispatch:
    XPU: isin_Tensor_Scalar_out

- func: isin.Tensor_Scalar(Tensor elements, Scalar test_element, *, bool assume_unique=False, bool invert=False) -> Tensor
  variants: function
  structured_delegate: isin.Tensor_Scalar_out

- func: isin.Scalar_Tensor_out(Scalar element, Tensor test_elements, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> Tensor(a!)
  variants: function
  structured: True
  dispatch:
    XPU: isin_Scalar_Tensor_out

- func: isin.Scalar_Tensor(Scalar element, Tensor test_elements, *, bool assume_unique=False, bool invert=False) -> Tensor
  variants: function
  structured_delegate: isin.Scalar_Tensor_out

- func: equal(Tensor self, Tensor other) -> bool
  tags: [data_dependent_output, pointwise]
  variants: method, function
  dispatch:
    XPU: xpu_equal

- func: nextafter.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: nextafter_out
  tags: pointwise

- func: nextafter(Tensor self, Tensor other) -> Tensor
  structured_delegate: nextafter.out
  variants: method, function
  tags: pointwise

- func: nextafter_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  structured_delegate: nextafter.out
  variants: method
  tags: pointwise

- func: heaviside.out(Tensor self, Tensor values, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: heaviside_out
  tags: pointwise

- func: heaviside(Tensor self, Tensor values) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: heaviside.out
  tags: pointwise

- func: heaviside_(Tensor(a!) self, Tensor values) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: heaviside.out

- func: logit_backward.grad_input(Tensor grad_output, Tensor self, float? eps=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: logit_backward_out
  tags: pointwise

- func: logit_backward(Tensor grad_output, Tensor self, float? eps=None) -> Tensor
  python_module: nn
  structured_delegate: logit_backward.grad_input
  tags: pointwise

- func: logaddexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: logaddexp_out
  tags: pointwise

- func: logaddexp(Tensor self, Tensor other) -> Tensor
  variants: method, function
  structured_delegate: logaddexp.out
  tags: pointwise

- func: logaddexp2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: logaddexp2_out
  tags: pointwise

- func: logaddexp2(Tensor self, Tensor other) -> Tensor
  variants: method, function
  structured_delegate: logaddexp2.out
  tags: pointwise

- func: floor_divide(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: floor_divide
    SparseXPU: floor_divide_sparse

- func: floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    XPU: floor_divide_
    SparseXPU: floor_divide_sparse_

- func: floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: floor_divide_out
    SparseXPU: floor_divide_out_sparse_zerodim

- func: floor_divide.Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: floor_divide

- func: floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: floor_divide_
  autogen: floor_divide.Scalar_out

- func: fmax(Tensor self, Tensor other) -> Tensor
  structured_delegate: fmax.out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: pointwise

- func: fmax.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: fmax_out
  tags: pointwise

- func: fmin(Tensor self, Tensor other) -> Tensor
  structured_delegate: fmin.out
  device_check: NoCheck   # TensorIterator
  variants: method, function
  tags: pointwise

- func: fmin.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: fmin_out
  tags: pointwise

- func: log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  tags: nondeterministic_seeded
  variants: method
  dispatch:
    XPU: log_normal_
  autogen: log_normal, log_normal.out

- func: exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  tags: nondeterministic_seeded
  variants: method
  dispatch:
    XPU: exponential_
  autogen: exponential, exponential.out

- func: _embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, SymInt num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
  dispatch:
    XPU: _embedding_bag_backward_symint

- func: _embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, SymInt num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
  dispatch:
    XPU: _embedding_bag_dense_backward_xpu
  autogen: _embedding_bag_dense_backward.out

- func: _embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode, int padding_idx=-1) -> Tensor
  dispatch:
    XPU: _embedding_bag_per_sample_weights_backward_xpu
  autogen: _embedding_bag_per_sample_weights_backward.out

- func: take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: take_out

- func: take(Tensor self, Tensor index) -> Tensor
  variants: method, function
  dispatch:
    XPU: take

- func: put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)
  variants: method
  dispatch:
    XPU: put_
  autogen: put.out

- func: put(Tensor self, Tensor index, Tensor source, bool accumulate=False) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: put

- func: masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)
  variants: method
  dispatch:
    XPU: masked_scatter__xpu
  autogen: masked_scatter.out

- func: masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: masked_scatter

- func: masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: masked_select_out_xpu
  tags: dynamic_output_shape

- func: masked_select(Tensor self, Tensor mask) -> Tensor
  variants: method, function
  dispatch:
    XPU: masked_select_xpu
  tags: dynamic_output_shape

- func: mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method
  dispatch:
    XPU: mode

- func: mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  dispatch:
    CompositeExplicitAutograd: mode_out

- func: mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method

- func: mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)

- func: smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, float beta=1.0, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: nn
  dispatch:
    XPU: smooth_l1_loss_out

- func: smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean, float beta=1.0) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: smooth_l1_loss.out
  python_module: nn

- func: smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: smooth_l1_loss_backward_out

- func: smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta) -> Tensor
  python_module: nn
  dispatch:
    CompositeExplicitAutograd: smooth_l1_loss_backward

- func: binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
  device_check: NoCheck   # TensorIterator
  python_module: nn
  variants: function
  dispatch:
    XPU: binary_cross_entropy_xpu

- func: binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  python_module: nn
  variants: function
  dispatch:
    XPU: binary_cross_entropy_out_xpu

- func: binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
  python_module: nn
  variants: function
  dispatch:
    XPU: binary_cross_entropy_backward_xpu

- func: binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  variants: function
  dispatch:
    XPU: binary_cross_entropy_backward_out_xpu

- func: binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    CompositeExplicitAutograd: binary_cross_entropy_with_logits
  autogen: binary_cross_entropy_with_logits.out

- func: cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  tags: nondeterministic_seeded
  dispatch:
    XPU: cauchy_
  autogen: cauchy, cauchy.out

- func: geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  tags: nondeterministic_seeded
  variants: method
  dispatch:
    XPU: geometric_

  # wrappers for TH functions
  autogen: geometric, geometric.out

- func: binomial(Tensor count, Tensor prob, Generator? generator=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: _s_binomial_xpu
  tags: nondeterministic_seeded
  autogen: binomial.out

- func: _standard_gamma_grad(Tensor self, Tensor output) -> Tensor
  variants: function
  dispatch:
    XPU: _standard_gamma_grad_xpu
  autogen: _standard_gamma_grad.out

- func: _standard_gamma(Tensor self, Generator? generator=None) -> Tensor
  variants: function
  dispatch:
    XPU: _s_gamma_xpu
  tags: nondeterministic_seeded
  autogen: _standard_gamma.out

- func: _sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor
  tags: nondeterministic_seeded
  variants: function
  dispatch:
    XPU: _sample_dirichlet_xpu
  autogen: _sample_dirichlet.out

- func: _dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor
  dispatch:
    XPU: _dirichlet_grad_xpu
  autogen: _dirichlet_grad.out

# Fused implementation detail for transformers. Adds in-projection bias to QKV and divides Q by sqrt(D/num_heads).
- func: _transform_bias_rescale_qkv(Tensor qkv, Tensor qkv_bias, int num_heads) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU, NestedTensorXPU: transform_bias_rescale_qkv_xpu
  autogen: _transform_bias_rescale_qkv.out

# These private functions are temporary. They will be updated/deleted when nested tensors switch to using SymInts for their metadata representation
- func: _nested_tensor_size(Tensor self) -> Tensor
  variants: method
  dispatch:
    NestedTensorXPU: _nested_tensor_size
  autogen: _nested_tensor_size.out

- func: _nested_tensor_strides(Tensor self) -> Tensor
  variants: method
  dispatch:
    NestedTensorXPU: _nested_tensor_strides
  autogen: _nested_tensor_strides.out

- func: _nested_tensor_storage_offsets(Tensor self) -> Tensor
  variants: method
  dispatch:
    NestedTensorXPU: _nested_tensor_storage_offsets
  autogen: _nested_tensor_storage_offsets.out

# _nested_from_padded is not usable from Python, so
# _nested_from_padded_and_nested_example is available for testing.
- func: _nested_from_padded_and_nested_example(Tensor padded, Tensor nt_example) -> Tensor
  dispatch:
    NestedTensorXPU: NestedTensor_from_padded_and_nested_example
  autogen: _nested_from_padded_and_nested_example.out

- func: _native_multi_head_attention(Tensor query, Tensor key, Tensor value, int embed_dim, int num_head, Tensor qkv_weight, Tensor qkv_bias, Tensor proj_weight, Tensor proj_bias, Tensor? mask=None, bool need_weights=True, bool average_attn_weights=True, int? mask_type=None) -> (Tensor, Tensor)
  variants: function
  dispatch:
    XPU, NestedTensorXPU: native_multi_head_attention_xpu
  autogen: _native_multi_head_attention.out

- func: argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
  structured_delegate: argmin.out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: core

- func: argmin.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  dispatch:
    XPU: argmin_out

- func: tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    XPU: tril_indices_xpu
  autogen: tril_indices.out

- func: triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    XPU: triu_indices_xpu
  autogen: triu_indices.out

- func: nansum(Tensor self, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  dispatch:
    XPU: nansum

- func: nansum.out(Tensor self, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: nansum_out

- func: norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: norm
  autogen: norm.ScalarOpt_dtype_out

- func: norm.Scalar(Tensor self, Scalar p=2) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: norm
  autogen: norm.Scalar_out

- func: norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor
  structured_delegate: norm.dtype_out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    SparseXPU: sparse_dtype_norm

- func: norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor
  structured_delegate: norm.out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    SparseXPU: sparse_norm

- func: norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)
  structured: True
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: norm_dtype_out

- func: norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: norm_out

# These four redispatch in their implementation, so OK to be CompositeImplicitAutograd
- func: norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator

- func: norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator

- func: frexp.Tensor(Tensor self) -> (Tensor mantissa, Tensor exponent)
  variants: method, function
  dispatch:
    CompositeExplicitAutograd: frexp
  tags: pointwise

- func: frexp.Tensor_out(Tensor self, *, Tensor(a!) mantissa, Tensor(b!) exponent) -> (Tensor(a!) mantissa, Tensor(b!) exponent)
  dispatch:
    XPU: frexp_out
  tags: pointwise

# DEPRECATED: Use torch.aminmax instead
- func: _aminmax(Tensor self) -> (Tensor, Tensor)
  dispatch:
    XPU: _aminmax_all
  autogen: _aminmax.out

# DEPRECATED: Use torch.aminmax instead
- func: _aminmax.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)
  dispatch:
    XPU: _aminmax
  autogen: _aminmax.dim_out

- func: aminmax(Tensor self, *, int? dim=None, bool keepdim=False) -> (Tensor min, Tensor max)
  device_check: NoCheck   # TensorIterator
  structured_delegate: aminmax.out
  variants: function, method

- func: aminmax.out(Tensor self, *, int? dim=None, bool keepdim=False, Tensor(a!) min, Tensor(b!) max) -> (Tensor(a!) min, Tensor(b!) max)
  device_check: NoCheck   # TensorIterator
  structured: True
  dispatch:
    XPU: aminmax_out

- func: _compute_linear_combination(Tensor input, Tensor coefficients) -> Tensor
  dispatch:
    XPU: _compute_linear_combination

- func: _compute_linear_combination.out(Tensor input, Tensor coefficients, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: _compute_linear_combination_out

- func: index_reduce.out(Tensor self, int dim, Tensor index, Tensor source, str reduce, *, bool include_self=True, Tensor(a!) out) -> Tensor(a!)
  structured: True
  variants: function
  precomputed:
  - dim -> int dim
  dispatch:
    XPU: index_reduce_xpu_out

- func: index_reduce_(Tensor(a!) self, int dim, Tensor index, Tensor source, str reduce, *, bool include_self=True) -> Tensor(a!)
  structured_delegate: index_reduce.out
  variants: method
  
- func: index_reduce(Tensor self, int dim, Tensor index, Tensor source, str reduce, *, bool include_self=True) -> Tensor
  structured_delegate: index_reduce.out
  variants: function, method

- func: index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    XPU: index_fill_
  autogen: index_fill.int_Scalar_out

- func: index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: index_fill

- func: index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    XPU: index_fill_
  autogen: index_fill.int_Tensor_out

- func: index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: index_fill

- func: index_fill_.Dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Scalar value) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method

- func: index_fill_.Dimname_Tensor(Tensor(a!) self, Dimname dim, Tensor index, Tensor value) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method

- func: index_fill.Dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: index_fill.Dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: polar(Tensor abs, Tensor angle) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutograd: polar

- func: polar.out(Tensor abs, Tensor angle, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: polar_out

- func: digamma_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: digamma.out
  variants: method
  tags: pointwise

- func: digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: digamma_out
  tags: pointwise

- func: digamma(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: digamma.out
  variants: method, function
  tags: pointwise

- func: polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: polygamma_out
  tags: pointwise

- func: polygamma(int n, Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: polygamma.out
  variants: method, function
  tags: pointwise

- func: polygamma_(Tensor(a!) self, int n) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: polygamma_
  tags: pointwise

- func: lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: lgamma_out
  tags: pointwise

- func: lgamma_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: lgamma.out
  variants: method
  tags: pointwise

- func: lgamma(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: lgamma.out
  variants: method, function
  tags: pointwise

- func: log10(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: log10.out
  variants: function, method
  tags: [core, pointwise]

- func: log10_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: log10.out
  variants: function, method
  tags: pointwise

- func: log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: log10_out
  tags: pointwise

- func: log1p(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: log1p.out
  variants: function, method
  dispatch:
    SparseXPU: log1p_sparse
    SparseCsrXPU: log1p_sparse_csr
  tags: [core, pointwise]

- func: log1p_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: log1p.out
  variants: function, method
  dispatch:
    SparseXPU: log1p_sparse_
    SparseCsrXPU: log1p_sparse_csr_
  tags: pointwise

- func: log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: log1p_out
    SparseXPU: log1p_sparse_out
    SparseCsrXPU: log1p_sparse_csr_out
  tags: pointwise

- func: log2(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: log2.out
  variants: function, method
  tags: [core, pointwise]

- func: log2_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: log2.out
  variants: function, method
  tags: pointwise

- func: log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: log2_out
  tags: pointwise

- func: logit(Tensor self, float? eps=None) -> Tensor
  variants: function, method
  dispatch:
    XPU: logit
  tags: pointwise

- func: logit_(Tensor(a!) self, float? eps=None) -> Tensor(a!)
  variants: function, method
  dispatch:
    XPU: logit_
  tags: pointwise

- func: logit.out(Tensor self, float? eps=None, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: logit_out
  tags: pointwise

- func: xlogy.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: xlogy.OutTensor
  variants: function, method
  tags: pointwise

# xlogy: inplace variant
- func: xlogy_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: xlogy.OutTensor
  tags: pointwise

# xlogy: out variant
- func: xlogy.OutTensor(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  variants: function
  dispatch:
    XPU: xlogy_out
  tags: pointwise

- func: erfinv(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: erfinv.out
  variants: method, function
  dispatch:
    SparseXPU: erfinv_sparse
    SparseCsrXPU: erfinv_sparse_csr
  tags: pointwise

- func: erfinv_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: erfinv.out
  variants: method
  dispatch:
    SparseXPU: erfinv_sparse_
    SparseCsrXPU: erfinv_sparse_csr_
  tags: pointwise

- func: erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: erfinv_out
    SparseXPU: erfinv_sparse_out
    SparseCsrXPU: erfinv_sparse_csr_out
  tags: pointwise

- func: exp2(Tensor self) -> Tensor
  structured_delegate: exp2.out
  variants: function, method
  tags: pointwise

- func: exp2_(Tensor(a!) self) -> Tensor(a!)
  structured_delegate: exp2.out
  variants: function, method
  tags: pointwise

- func: exp2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: exp2_out
  tags: pointwise

- func: expm1(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: expm1.out
  variants: function, method
  dispatch:
    SparseXPU: expm1_sparse
    SparseCsrXPU: expm1_sparse_csr
  tags: [core, pointwise]

- func: expm1_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: expm1.out
  variants: function, method
  dispatch:
    SparseXPU: expm1_sparse_
    SparseCsrXPU: expm1_sparse_csr_
  tags: pointwise

- func: expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: expm1_out
    SparseXPU: expm1_sparse_out
    SparseCsrXPU: expm1_sparse_csr_out
  tags: pointwise

- func: frac(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: frac.out
  variants: function, method
  dispatch:
    SparseXPU: frac_sparse
    SparseCsrXPU: frac_sparse_csr
  tags: pointwise

- func: frac_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: frac.out
  variants: function, method
  dispatch:
    SparseXPU: frac_sparse_
    SparseCsrXPU: frac_sparse_csr_
  tags: pointwise

- func: frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: frac_out
    SparseXPU: frac_sparse_out
    SparseCsrXPU: frac_sparse_csr_out
  tags: pointwise

- func: asin(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: asin.out
  dispatch:
    SparseXPU: asin_sparse
    SparseCsrXPU: asin_sparse_csr
  tags: [core, pointwise]

- func: asin_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: asin.out
  dispatch:
    SparseXPU: asin_sparse_
    SparseCsrXPU: asin_sparse_csr_
  tags: pointwise

- func: asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: asin_out
    SparseXPU: asin_sparse_out
    SparseCsrXPU: asin_sparse_csr_out
  tags: pointwise

- func: round(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: round.out
  variants: function, method
  dispatch:
    SparseXPU: round_sparse
    SparseCsrXPU: round_sparse_csr
  tags: [core, pointwise]

- func: round_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: round.out
  variants: function, method
  dispatch:
    SparseXPU: round_sparse_
    SparseCsrXPU: round_sparse_csr_
  tags: pointwise

- func: round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: round_out
    SparseXPU: round_sparse_out
    SparseCsrXPU: round_sparse_csr_out
  tags: pointwise

- func: round.decimals(Tensor self, *, int decimals) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: round.decimals_out
  variants: function, method
  tags: pointwise

- func: round_.decimals(Tensor(a!) self, *, int decimals) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: round.decimals_out
  variants: function, method
  tags: pointwise

- func: round.decimals_out(Tensor self, *, int decimals, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: round_decimals_out
  tags: pointwise

- func: floor(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: floor.out
  variants: function, method
  dispatch:
    SparseXPU: floor_sparse
    SparseCsrXPU: floor_sparse_csr
  tags: [core, pointwise]

- func: floor_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: floor.out
  variants: function, method
  dispatch:
    SparseXPU: floor_sparse_
    SparseCsrXPU: floor_sparse_csr_
  tags: pointwise

- func: floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: floor_out
    SparseXPU: floor_sparse_out
    SparseCsrXPU: floor_sparse_csr_out
  tags: pointwise

- func: trunc(Tensor self) -> Tensor
  structured_delegate: trunc.out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    SparseXPU: trunc_sparse
    SparseCsrXPU: trunc_sparse_csr
  tags: [core, pointwise]

- func: trunc_(Tensor(a!) self) -> Tensor(a!)
  structured_delegate: trunc.out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    SparseXPU: trunc_sparse_
    SparseCsrXPU: trunc_sparse_csr_
  tags: pointwise

- func: trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: trunc_out
    SparseXPU: trunc_sparse_out
    SparseCsrXPU: trunc_sparse_csr_out
  tags: pointwise

- func: replication_pad1d.out(Tensor self, SymInt[2] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: replication_pad1d_out_xpu

- func: replication_pad1d(Tensor self, SymInt[2] padding) -> Tensor
  python_module: nn
  structured_delegate: replication_pad1d.out

- func: replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: replication_pad1d_backward_out_xpu

- func: replication_pad1d_backward(Tensor grad_output, Tensor self, SymInt[2] padding) -> Tensor
  python_module: nn
  structured_delegate: replication_pad1d_backward.grad_input

- func: replication_pad2d.out(Tensor self, SymInt[4] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: replication_pad2d_out_xpu

- func: replication_pad2d(Tensor self, SymInt[4] padding) -> Tensor
  python_module: nn
  structured_delegate: replication_pad2d.out
  tags: core

- func: replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: replication_pad2d_backward_out_xpu

- func: replication_pad2d_backward(Tensor grad_output, Tensor self, SymInt[4] padding) -> Tensor
  python_module: nn
  dispatch:
    XPU: replication_pad2d_backward_xpu

- func: replication_pad3d.out(Tensor self, SymInt[6] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: replication_pad3d_out_xpu

- func: replication_pad3d(Tensor self, SymInt[6] padding) -> Tensor
  python_module: nn
  structured_delegate: replication_pad3d.out
  tags: core

- func: replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: replication_pad3d_backward_out_xpu

- func: replication_pad3d_backward(Tensor grad_output, Tensor self, SymInt[6] padding) -> Tensor
  python_module: nn
  dispatch:
    XPU: replication_pad3d_backward_xpu

- func: histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: _histc_out_xpu

- func: histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor
  variants: method, function
  dispatch:
    XPU: _histc_xpu

- func: histogram.bins_tensor_out(Tensor self, Tensor bins, *, Tensor? weight=None, bool density=False, Tensor(a!) hist, Tensor(b!) bin_edges) -> (Tensor(a!) hist, Tensor(b!) bin_edges)
  dispatch:
    XPU: histogram_out

- func: histogram.bins_tensor(Tensor self, Tensor bins, *, Tensor? weight=None, bool density=False) -> (Tensor hist, Tensor bin_edges)
  variants: method, function
  dispatch:
    XPU: histogram

- func: histogram.bin_ct_out(Tensor self, int bins=100, *, float[]? range=None, Tensor? weight=None, bool density=False, Tensor(a!) hist, Tensor(b!) bin_edges) -> (Tensor(a!) hist, Tensor(b!) bin_edges)
  dispatch:
    XPU: histogram_out

- func: histogram.bin_ct(Tensor self, int bins=100, *, float[]? range=None, Tensor? weight=None, bool density=False) -> (Tensor hist, Tensor bin_edges)
  variants: method, function
  dispatch:
    XPU: histogram

# - func: _histogramdd_from_bin_cts(Tensor self, int[] bins, *, float[]? range=None, Tensor? weight=None, bool density=False) -> Tensor
#   dispatch:
#     XPU: _histogramdd
#   autogen: _histogramdd_from_bin_cts.out

# - func: _histogramdd_from_bin_tensors(Tensor self, Tensor[] bins, *, Tensor? weight=None, bool density=False) -> Tensor
#   dispatch:
#     XPU: _histogramdd
#   autogen: _histogramdd_from_bin_tensors.out

- func: _unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)
  variants: function
  dispatch:
    XPU: _unique_xpu
  autogen: _unique.out

- func: unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    XPU: unique_dim_xpu
  tags: dynamic_output_shape
  autogen: unique_dim.out

- func: unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    XPU: unique_consecutive_xpu
  tags: dynamic_output_shape
  autogen: unique_consecutive.out

- func: unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    XPU: unique_dim_consecutive_xpu
  tags: dynamic_output_shape
  autogen: unique_dim_consecutive.out

# _unique and _unique_dim are fragile and modifying them easily cause internal break
# the below operator is a temporary hack for adding return_counts support
# Please don't rely on these two operators, they will be removed soon

- func: _unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    XPU: _unique2_xpu
  tags: dynamic_output_shape
  autogen: _unique2.out

- func: unsqueeze_copy(Tensor self, int dim) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: unsqueeze_copy
  tags: view_copy
  autogen: unsqueeze_copy.out

- func: unsqueeze(Tensor(a) self, int dim) -> Tensor(a)
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeExplicitAutograd: unsqueeze
    SparseXPU: unsqueeze_sparse
    NestedTensorXPU: unsqueeze_nested
  tags: core

- func: zeros(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: zeros_symint

- func: zeros_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  dispatch:
    # NB: Although this composite mutates on the inside, it is
    # non-differentiable so NonFunctional doesn't apply
    CompositeExplicitAutograd, CompositeImplicitAutogradNestedTensor: zeros_like
  autogen: zeros_like.out

- func: zeros.out(SymInt[] size, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: zeros_out
    SparseXPU: zeros_sparse_out

- func: multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: multi_margin_loss_xpu_out

- func: multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor
  python_module: nn
  dispatch:
    XPU: multi_margin_loss_xpu

- func: multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: multi_margin_loss_xpu_backward_out

- func: multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor
  python_module: nn
  dispatch:
    XPU: multi_margin_loss_xpu_backward

- func: upsample_linear1d.vec(Tensor input, SymInt[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor
  python_module: nn
  autogen: upsample_linear1d.vec_out

# NOTE: all of the non-"vec" upsample overloads are only kept for backward compatibility.
- func: upsample_linear1d.out(Tensor self, SymInt[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_linear1d_out_xpu

- func: upsample_linear1d(Tensor self, SymInt[1] output_size, bool align_corners, float? scales=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_linear1d.out

- func: upsample_linear1d_backward.grad_input(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, bool align_corners, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: upsample_linear1d_backward_out_xpu

- func: upsample_linear1d_backward(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, bool align_corners, float? scales=None) -> Tensor
  python_module: nn
  structured_delegate: upsample_linear1d_backward.grad_input


- func: nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn

- func: nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100) -> Tensor
  python_module: nn
  dispatch:
    CompositeImplicitAutograd: nll_loss2d_symint

- func: nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    XPU: nll_loss2d_forward_out_xpu

- func: nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index) -> (Tensor output, Tensor total_weight)
  python_module: nn
  dispatch:
    XPU: nll_loss2d_forward_xpu

- func: nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: nll_loss2d_backward_out_xpu

- func: nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight) -> Tensor
  python_module: nn
  dispatch:
    XPU: nll_loss2d_backward_xpu

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  structured: True
  dispatch:
    XPU: adaptive_max_pool2d_out_xpu

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)
  python_module: nn
  structured_delegate: adaptive_max_pool2d.out

- func: adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  structured: True
  dispatch:
    XPU: adaptive_max_pool2d_backward_out_xpu

- func: adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor
  python_module: nn
  structured_delegate: adaptive_max_pool2d_backward.grad_input

# Return: (Tensor output, Tensor indices)
- func: max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    XPU: max_pool3d_with_indices_out_xpu

# Return: (Tensor output, Tensor indices)
- func: max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
  python_module: nn
  dispatch:
    XPU: max_pool3d_with_indices_xpu
  tags: core

- func: max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    XPU: max_pool3d_with_indices_backward_out_xpu

- func: max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor
  python_module: nn
  dispatch:
    XPU: max_pool3d_with_indices_backward_xpu

  # VariableType::_weight_norm does not want to be given a gap in the autograd graph,
# so we don't define "dispatch" variants for it.
- func: _weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor
  variants: function

- func: _weight_norm_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)
  variants: function
  dispatch:
    XPU: weight_norm_xpu
  autogen: _weight_norm_interface.out

- func: _weight_norm_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
  variants: function
  dispatch:
    XPU: weight_norm_backward_xpu
  autogen: _weight_norm_interface_backward.out

- func: _weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
  variants: function

- func: renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  dispatch:
    XPU: renorm_out

- func: renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  structured_delegate: renorm.out

- func: renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: renorm.out

- func: isposinf(Tensor self) -> Tensor
  variants: function, method
  structured_delegate: isposinf.out
  dispatch:
    SparseXPU: isposinf_sparse
    SparseCsrXPU: isposinf_sparse_csr
    NestedTensorXPU: NestedTensor_isposinf
  tags: pointwise

- func: isposinf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: isposinf_out
    SparseXPU: isposinf_sparse_out
    SparseCsrXPU: isposinf_sparse_csr_out
  tags: pointwise

- func: isneginf(Tensor self) -> Tensor
  variants: function, method
  structured_delegate: isneginf.out
  dispatch:
    SparseXPU: isneginf_sparse
    SparseCsrXPU: isneginf_sparse_csr
    NestedTensorXPU: NestedTensor_isneginf
  tags: pointwise

- func: isneginf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: isneginf_out
    SparseXPU: isneginf_sparse_out
    SparseCsrXPU: isneginf_sparse_csr_out
  tags: pointwise

- func: topk.values(Tensor self, SymInt k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  structured: True
  dispatch:
    XPU: topk_out_xpu

- func: topk(Tensor self, SymInt k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)
  variants: method, function
  structured_delegate: topk.values
  tags: core

- func: segment_reduce(Tensor data, str reduce, *, Tensor? lengths=None, Tensor? indices=None, Tensor? offsets=None, int axis=0, bool unsafe=False, Scalar? initial=None) -> Tensor
  variants: function
  dispatch:
    XPU: segment_reduce_kernel
  autogen: segment_reduce.out

- func: _segment_reduce_backward(Tensor grad, Tensor output, Tensor data, str reduce, *, Tensor? lengths=None, Tensor? offsets=None, int axis=0, Scalar? initial=None) -> Tensor
  variants: function
  dispatch:
    XPU: _segment_reduce_backward_kernel
  autogen: _segment_reduce_backward.out

- func: repeat(Tensor self, SymInt[] repeats) -> Tensor
  variants: method  # This is method-only to match the previous tensor API. In the future we could make this a function too.
  dispatch:
    CompositeExplicitAutograd: repeat
    MPS: repeat_mps
  autogen: repeat.out
  tags: core

- func: repeat_interleave.Tensor(Tensor repeats, *, SymInt? output_size=None) -> Tensor
  variants: function
  dispatch:
    XPU: repeat_interleave_xpu
  tags: dynamic_output_shape
  autogen: repeat_interleave.Tensor_out

- func: repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None, *, SymInt? output_size=None) -> Tensor
  variants: function, method
  dispatch:
    CompositeImplicitAutograd: repeat_interleave_symint

- func: repeat_interleave.self_int(Tensor self, SymInt repeats, int? dim=None, *, SymInt? output_size=None) -> Tensor
  variants: function, method
  dispatch:
    CompositeImplicitAutograd: repeat_interleave_symint

- func: prod(Tensor self, *, ScalarType? dtype=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: prod
  autogen: prod.out
  tags: core

- func: prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  structured_delegate: prod.int_out
  device_check: NoCheck   # TensorIterator
  variants: function, method
  tags: core

- func: prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  structured: True
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: prod_out

- func: prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator

- func: signbit(Tensor self) -> Tensor
  variants: function, method
  structured_delegate: signbit.out
  dispatch:
    SparseXPU: signbit_sparse
    SparseCsrXPU: signbit_sparse_csr
  tags: pointwise

- func: signbit.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: signbit_out
    SparseXPU: signbit_sparse_out
    SparseCsrXPU: signbit_sparse_csr_out
  tags: pointwise

- func: median(Tensor self) -> Tensor
  variants: function, method
  dispatch:
    XPU: median_xpu
  autogen: median.out

- func: median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: median

- func: median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  dispatch:
    XPU: median_out_xpu

- func: median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method

- func: median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)

- func: nanmedian(Tensor self) -> Tensor
  variants: function, method
  dispatch:
    XPU: nanmedian_xpu
  autogen: nanmedian.out

- func: nanmedian.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: nanmedian

- func: nanmedian.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  dispatch:
    XPU: nanmedian_out_xpu

- func: nanmedian.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method

- func: nanmedian.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)

- func: prelu(Tensor self, Tensor weight) -> Tensor
  variants: function, method
  autogen: prelu.out

- func: _prelu_kernel(Tensor self, Tensor weight) -> Tensor
  dispatch:
    XPU: _prelu_kernel

- func: _prelu_kernel_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)
  dispatch:
    XPU: _prelu_kernel_backward

- func: __lshift__.Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    XPU: __lshift__
  tags: pointwise

- func: __lshift__.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    XPU: __lshift__
  tags: pointwise

- func: __ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    XPU: __ilshift__
  autogen: __lshift__.Scalar_out
  tags: pointwise

- func: __ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    XPU: __ilshift__
  autogen: __lshift__.Tensor_out
  tags: pointwise

- func: bitwise_left_shift.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: bitwise_left_shift.Tensor_out
  tags: pointwise

- func: bitwise_left_shift_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: bitwise_left_shift.Tensor_out
  tags: pointwise

- func: bitwise_left_shift.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: bitwise_left_shift_out
  tags: pointwise

- func: bitwise_left_shift.Tensor_Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    CompositeExplicitAutograd: bitwise_left_shift
  tags: pointwise

- func: bitwise_left_shift_.Tensor_Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: bitwise_left_shift_
  tags: pointwise

- func: bitwise_left_shift.Tensor_Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    CompositeExplicitAutograd: bitwise_left_shift_out
  tags: pointwise

- func: bitwise_left_shift.Scalar_Tensor(Scalar self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    CompositeExplicitAutograd: bitwise_left_shift
  autogen: bitwise_left_shift.Scalar_Tensor_out
  tags: pointwise

- func: __rshift__.Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    XPU: __rshift__
  tags: pointwise

- func: __rshift__.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    XPU: __rshift__
  tags: pointwise

- func: __irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    XPU: __irshift__
  autogen: __rshift__.Scalar_out

- func: __irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    XPU: __irshift__
  autogen: __rshift__.Tensor_out

- func: bitwise_right_shift.Tensor(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  structured_delegate: bitwise_right_shift.Tensor_out
  tags: pointwise

- func: bitwise_right_shift_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  structured_delegate: bitwise_right_shift.Tensor_out
  tags: pointwise

- func: bitwise_right_shift.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: bitwise_right_shift_out
  tags: pointwise

- func: bitwise_right_shift.Tensor_Scalar(Tensor self, Scalar other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: method, function
  dispatch:
    CompositeExplicitAutograd: bitwise_right_shift
  tags: pointwise

- func: bitwise_right_shift_.Tensor_Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: method
  dispatch:
    CompositeExplicitAutograd: bitwise_right_shift_
  tags: pointwise

- func: bitwise_right_shift.Tensor_Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    CompositeExplicitAutograd: bitwise_right_shift_out
  tags: pointwise

- func: bitwise_right_shift.Scalar_Tensor(Scalar self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function
  dispatch:
    CompositeExplicitAutograd: bitwise_right_shift
  autogen: bitwise_right_shift.Scalar_Tensor_out
  tags: pointwise

# it's a factory function receiving a tensor argument, thus overriding explicitly
# other overrides are to provide a more helpful error message that dtype is required
- func: _empty_per_channel_affine_quantized(SymInt[] size, *, Tensor scales, Tensor zero_points, int axis, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=contiguous_format) -> Tensor
  category_override: factory
  dispatch:
    XPU: empty_per_channel_affine_quantized
  autogen: _empty_per_channel_affine_quantized.out

# other overrides are to provide a more helpful error message that dtype is required
- func: _empty_affine_quantized(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor
  dispatch:
    XPU: empty_affine_quantized
  autogen: _empty_affine_quantized.out

- func: quantize_per_tensor_dynamic(Tensor self, ScalarType dtype, bool reduce_range) -> Tensor
  variants: function
  dispatch:
    XPU: quantize_per_tensor_dynamic
  autogen: quantize_per_tensor_dynamic.out

- func: quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor
  variants: function
  dispatch:
    XPU: quantize_per_tensor
  autogen: quantize_per_tensor.out

- func: quantize_per_tensor.tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, ScalarType dtype) -> Tensor
  variants: function
  dispatch:
    XPU: quantize_per_tensor_tensor_qparams
  autogen: quantize_per_tensor.tensor_qparams_out

- func: quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor
  variants: function
  dispatch:
    XPU: quantize_per_channel
  autogen: quantize_per_channel.out

- func: dequantize.self(Tensor self) -> Tensor
  variants: function, method
  dispatch:
    XPU: dequantize_cpu_or_cuda
  autogen: dequantize.self_out

- func: _make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> Tensor
  dispatch:
    XPU: make_per_tensor_quantized_tensor_xpu
  autogen: _make_per_tensor_quantized_tensor.out

- func: _make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> Tensor
  dispatch:
    XPU: make_per_channel_quantized_tensor_xpu
  autogen: _make_per_channel_quantized_tensor.out

- func: fake_quantize_per_tensor_affine_cachemask(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
  variants: function
  dispatch:
    XPU: fake_quantize_per_tensor_affine_cachemask
  autogen: fake_quantize_per_tensor_affine_cachemask.out

- func: _fake_quantize_per_tensor_affine_cachemask_tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, Tensor fake_quant_enabled, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
  variants: function
  dispatch:
    XPU: _fake_quantize_per_tensor_affine_cachemask_tensor_qparams
  autogen: _fake_quantize_per_tensor_affine_cachemask_tensor_qparams.out

- func: fake_quantize_per_channel_affine_cachemask(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
  variants: function
  dispatch:
    XPU: fake_quantize_per_channel_affine_cachemask
  autogen: fake_quantize_per_channel_affine_cachemask.out

- func: _fake_quantize_learnable_per_tensor_affine(Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max, float grad_factor=1.0) -> Tensor
  variants: function
  dispatch:
    XPU: _fake_quantize_learnable_per_tensor_affine
  autogen: _fake_quantize_learnable_per_tensor_affine.out

- func: _fake_quantize_learnable_per_tensor_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max, float grad_factor=1.0) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    XPU: _fake_quantize_learnable_per_tensor_affine_backward

- func: _fake_quantize_learnable_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max, float grad_factor=1.0) -> Tensor
  variants: function
  dispatch:
    XPU: _fake_quantize_learnable_per_channel_affine
  autogen: _fake_quantize_learnable_per_channel_affine.out

- func: _fake_quantize_learnable_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max, float grad_factor=1.0) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    XPU: _fake_quantize_learnable_per_channel_affine_backward

- func: _fused_moving_avg_obs_fq_helper(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor output, Tensor mask)
  dispatch:
    XPU: fused_moving_avg_obs_fake_quant_xpu
  autogen: _fused_moving_avg_obs_fq_helper_functional, _fused_moving_avg_obs_fq_helper.out

- func: sign(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  structured_delegate: sign.out
  variants: function, method
  dispatch:
    SparseXPU: sign_sparse
    SparseCsrXPU: sign_sparse_csr
  tags: [core, pointwise]

- func: sign_(Tensor(a!) self) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured_delegate: sign.out
  variants: method
  dispatch:
    SparseXPU: sign_sparse_
    SparseCsrXPU: sign_sparse_csr_
  tags: pointwise

- func: sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: sign_out
    SparseXPU: sign_sparse_out
    SparseCsrXPU: sign_sparse_csr_out
  tags: pointwise

- func: range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: range

- func: range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: range

- func: range.out_(Scalar start, Scalar end, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: range_out_no_step

- func: range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: range_xpu_out
  cpp_no_default_args: ['step']

- func: _convert_weight_to_int4pack(Tensor self, int innerKTiles) -> Tensor
  dispatch:
    XPU: _convert_weight_to_int4pack_xpu

- func: special_chebyshev_polynomial_t(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_chebyshev_polynomial_t.out
  variants: function
  tags: pointwise

- func: special_chebyshev_polynomial_t.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_chebyshev_polynomial_t_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_chebyshev_polynomial_u(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_chebyshev_polynomial_u.out
  variants: function
  tags: pointwise

- func: special_chebyshev_polynomial_u.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_chebyshev_polynomial_u_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_chebyshev_polynomial_v(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_chebyshev_polynomial_v.out
  variants: function
  tags: pointwise

- func: special_chebyshev_polynomial_v.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_chebyshev_polynomial_v_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_chebyshev_polynomial_w(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_chebyshev_polynomial_w.out
  variants: function
  tags: pointwise

- func: special_chebyshev_polynomial_w.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_chebyshev_polynomial_w_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_shifted_chebyshev_polynomial_t(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_shifted_chebyshev_polynomial_t.out
  variants: function
  tags: pointwise

- func: special_shifted_chebyshev_polynomial_t.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_shifted_chebyshev_polynomial_t_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_shifted_chebyshev_polynomial_u(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_shifted_chebyshev_polynomial_u.out
  variants: function
  tags: pointwise

- func: special_shifted_chebyshev_polynomial_u.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_shifted_chebyshev_polynomial_u_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_shifted_chebyshev_polynomial_v(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_shifted_chebyshev_polynomial_v.out
  variants: function
  tags: pointwise

- func: special_shifted_chebyshev_polynomial_v.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_shifted_chebyshev_polynomial_v_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_shifted_chebyshev_polynomial_w(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_shifted_chebyshev_polynomial_w.out
  variants: function
  tags: pointwise

- func: special_shifted_chebyshev_polynomial_w.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_shifted_chebyshev_polynomial_w_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function

- func: logspace(Scalar start, Scalar end, int steps, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: logspace

- func: logspace.Tensor_Tensor(Tensor start, Tensor end, int steps, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: logspace

- func: logspace.Tensor_Scalar(Tensor start, Scalar end, int steps, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: logspace

- func: logspace.Scalar_Tensor(Scalar start, Tensor end, int steps, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: logspace

- func: logspace.out(Scalar start, Scalar end, int steps, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: logspace_xpu_out

- func: logspace.Tensor_Tensor_out(Tensor start, Tensor end, int steps, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: logspace_out

- func: logspace.Tensor_Scalar_out(Tensor start, Scalar end, int steps, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: logspace_out

- func: logspace.Scalar_Tensor_out(Scalar start, Tensor end, int steps, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: logspace_out

- func: linspace(Scalar start, Scalar end, int steps, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CompositeExplicitAutograd: linspace

- func: linspace.Tensor_Tensor(Tensor start, Tensor end, int steps, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: linspace

- func: linspace.Tensor_Scalar(Tensor start, Scalar end, int steps, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: linspace

- func: linspace.Scalar_Tensor(Scalar start, Tensor end, int steps, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: linspace

- func: linspace.out(Scalar start, Scalar end, int steps, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: linspace_xpu_out

- func: linspace.Tensor_Tensor_out(Tensor start, Tensor end, int steps, *, Tensor(a!) out) -> Tensor(a!)
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: linspace_out

- func: linspace.Tensor_Scalar_out(Tensor start, Scalar end, int steps, *, Tensor(a!) out) -> Tensor(a!)
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: linspace_out

- func: linspace.Scalar_Tensor_out(Scalar start, Tensor end, int steps, *, Tensor(a!) out) -> Tensor(a!)
  category_override: factory
  dispatch:
    CompositeExplicitAutograd: linspace_out

- func: _assert_async(Tensor self) -> ()
  dispatch:
    XPU: _assert_async_xpu

- func: _assert_async.msg(Tensor self, str assert_msg) -> ()
  dispatch:
    XPU: _assert_async_msg_xpu

- func: _fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)
  variants: function
  dispatch:
    XPU: fused_dropout_xpu
  tags: nondeterministic_seeded
  autogen: _fused_dropout.out

- func: _masked_scale(Tensor self, Tensor mask, float scale) -> Tensor
  variants: function
  dispatch:
    XPU: masked_scale_xpu
  autogen: _masked_scale.out

- func: _ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)
  dispatch:
    XPU: ctc_loss_xpu
  autogen: _ctc_loss.out
  tags: dynamic_output_shape  # the shape of second output is data dependent

- func: _ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)
  dispatch:
    XPU: ctc_loss_tensor
  autogen: _ctc_loss.Tensor_out
  tags: dynamic_output_shape  # the shape of second output is data dependent

- func: _ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor
  dispatch:
    XPU: ctc_loss_backward_xpu
  autogen: _ctc_loss_backward.out

- func: _ctc_loss_backward.Tensor(Tensor grad, Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor
  dispatch:
    XPU: ctc_loss_backward_tensor

- func: lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)

- func: gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor

# Fused RNN kernels
- func: _thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: _thnn_fused_lstm_cell_xpu
  autogen: _thnn_fused_lstm_cell.out

# NB: The composite version of this function below is a simple wrapper that duplicates some of the outputs
#     It is necessary to avoid triggering TensorImpl use count checks in debug mode
# NB: this is function is NOT differentiable
- func: _thnn_fused_lstm_cell_backward_impl(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor)
  dispatch:
    XPU: _thnn_fused_lstm_cell_backward_xpu
  autogen: _thnn_fused_lstm_cell_backward_impl.out

- func: _thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)
  dispatch:
    XPU: _thnn_fused_gru_cell_xpu
  autogen: _thnn_fused_gru_cell.out

- func: _thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
  dispatch:
    XPU: _thnn_fused_gru_cell_backward_xpu
  autogen: _thnn_fused_gru_cell_backward.out

- func: hardshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: hardshrink_out

- func: hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor
  structured_delegate: hardshrink.out
  device_check: NoCheck   # TensorIterator
  variants: function, method

- func: hardshrink_backward.grad_input(Tensor grad_out, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: hardshrink_backward_out

- func: hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor
  structured_delegate: hardshrink_backward.grad_input
  variants: function, method

- func: angle(Tensor self) -> Tensor
  device_check: NoCheck   # TensorIterator
  variants: function, method
  dispatch:
    XPU: angle
    SparseCsrXPU: angle_sparse_csr
  tags: pointwise

- func: angle.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: angle_out
    SparseCsrXPU: angle_sparse_csr_out
  tags: pointwise

- func: special_airy_ai(Tensor x) -> Tensor
  python_module: special
  structured_delegate: special_airy_ai.out
  variants: function
  tags: pointwise

- func: special_airy_ai.out(Tensor x, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_airy_ai_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_bessel_j0(Tensor self) -> Tensor
  python_module: special
  structured_delegate: special_bessel_j0.out
  variants: function
  tags: pointwise

- func: special_bessel_j0.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_bessel_j0_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_bessel_j1(Tensor self) -> Tensor
  python_module: special
  structured_delegate: special_bessel_j1.out
  variants: function
  tags: pointwise

- func: special_bessel_j1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_bessel_j1_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_bessel_y0(Tensor self) -> Tensor
  python_module: special
  structured_delegate: special_bessel_y0.out
  variants: function
  tags: pointwise

- func: special_bessel_y0.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_bessel_y0_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_bessel_y1(Tensor self) -> Tensor
  python_module: special
  structured_delegate: special_bessel_y1.out
  variants: function
  tags: pointwise

- func: special_bessel_y1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_bessel_y1_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_modified_bessel_i0(Tensor self) -> Tensor
  python_module: special
  structured_delegate: special_modified_bessel_i0.out
  variants: function
  tags: pointwise

- func: special_modified_bessel_i0.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_modified_bessel_i0_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_modified_bessel_i1(Tensor self) -> Tensor
  python_module: special
  structured_delegate: special_modified_bessel_i1.out
  variants: function
  tags: pointwise

- func: special_modified_bessel_i1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_modified_bessel_i1_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_modified_bessel_k0(Tensor self) -> Tensor
  python_module: special
  structured_delegate: special_modified_bessel_k0.out
  variants: function
  tags: pointwise

- func: special_modified_bessel_k0.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_modified_bessel_k0_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_modified_bessel_k1(Tensor self) -> Tensor
  python_module: special
  structured_delegate: special_modified_bessel_k1.out
  variants: function
  tags: pointwise

- func: special_modified_bessel_k1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_modified_bessel_k1_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_spherical_bessel_j0(Tensor x) -> Tensor
  python_module: special
  structured_delegate: special_spherical_bessel_j0.out
  variants: function
  tags: pointwise

- func: special_spherical_bessel_j0.out(Tensor x, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_spherical_bessel_j0_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_scaled_modified_bessel_k0(Tensor x) -> Tensor
  python_module: special
  structured_delegate: special_scaled_modified_bessel_k0.out
  variants: function
  tags: pointwise

- func: special_scaled_modified_bessel_k0.out(Tensor x, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_scaled_modified_bessel_k0_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_scaled_modified_bessel_k1(Tensor x) -> Tensor
  python_module: special
  structured_delegate: special_scaled_modified_bessel_k1.out
  variants: function
  tags: pointwise

- func: special_scaled_modified_bessel_k1.out(Tensor x, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    XPU: special_scaled_modified_bessel_k1_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_xlog1py(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  python_module: special
  variants: function
  structured_delegate: special_xlog1py.out
  tags: pointwise

- func: special_xlog1py.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: special
  variants: function
  dispatch:
    XPU: special_xlog1py_out
  tags: pointwise

- func: special_zeta(Tensor self, Tensor other) -> Tensor
  device_check: NoCheck   # TensorIterator
  python_module: special
  variants: function
  structured_delegate: special_zeta.out
  tags: pointwise

- func: special_zeta.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck   # TensorIterator
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: special
  variants: function
  dispatch:
    XPU: special_zeta_out
  tags: pointwise

- func: special_entr(Tensor self) -> Tensor
  structured_delegate: special_entr.out
  python_module: special
  variants: function
  tags: pointwise

- func: special_entr.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: special
  variants: function
  dispatch:
    XPU: special_entr_out
  tags: pointwise

- func: special_erfcx(Tensor self) -> Tensor
  python_module: special
  variants: function
  structured_delegate: special_erfcx.out
  tags: pointwise

- func: special_erfcx.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  python_module: special
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: special_erfcx_out
  tags: pointwise

- func: poisson(Tensor self, Generator? generator=None) -> Tensor
  device_check: NoCheck   # TensorIterator
  dispatch:
    XPU: _s_poisson_xpu
  tags: nondeterministic_seeded
  autogen: poisson.out

- func: channel_shuffle(Tensor self, SymInt groups) -> Tensor
  dispatch:
    XPU: channel_shuffle
  autogen: channel_shuffle.out

- func: index_copy.out(Tensor self, int dim, Tensor index, Tensor source, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  variants: function
  precomputed:
  - dim -> int dim
  dispatch:
    XPU: index_copy_out

- func: index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)
  variants: method
  structured_delegate: index_copy.out

- func: index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor
  variants: function, method
  structured_delegate: index_copy.out

- func: index_copy_.dimname(Tensor(a!) self, Dimname dim, Tensor index, Tensor source) -> Tensor(a!)
  variants: method

- func: index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor
  variants: function, method

- func: isinf(Tensor self) -> Tensor
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeExplicitAutograd: isinf
    SparseXPU: isinf_sparse
    SparseCsrXPU: isinf_sparse_csr
    NestedTensorXPU: NestedTensor_isinf
  autogen: isinf.out
  tags: [core, pointwise]

- func: record_stream(Tensor(a!) self, Stream s) -> ()
  variants: method
  dispatch:
    XPU: record_stream_xpu

- func: i0(Tensor self) -> Tensor
  structured_delegate: i0.out
  variants: function, method
  tags: pointwise

- func: i0_(Tensor(a!) self) -> Tensor(a!)
  structured_delegate: i0.out
  variants: function, method
  tags: pointwise

- func: i0.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: i0_out
  tags: pointwise

- func: special_i0e(Tensor self) -> Tensor
  python_module: special
  variants: function
  structured_delegate: special_i0e.out
  tags: pointwise

- func: special_i0e.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  python_module: special
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: special_i0e_out
  tags: pointwise

- func: special_i1(Tensor self) -> Tensor
  python_module: special
  variants: function
  structured_delegate: special_i1.out
  tags: pointwise

- func: special_i1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  python_module: special
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: special_i1_out
  tags: pointwise

- func: special_i1e(Tensor self) -> Tensor
  python_module: special
  variants: function
  structured_delegate: special_i1e.out
  tags: pointwise

- func: special_i1e.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  python_module: special
  structured: True
  structured_inherits: TensorIteratorBase
  dispatch:
    XPU: special_i1e_out
  tags: pointwise

- func: special_ndtri(Tensor self) -> Tensor
  structured_delegate: special_ndtri.out
  python_module: special
  variants: function
  tags: pointwise

- func: special_ndtri.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: special
  variants: function
  dispatch:
    XPU: special_ndtri_out
  tags: pointwise

- func: special_log_ndtr(Tensor self) -> Tensor
  structured_delegate: special_log_ndtr.out
  python_module: special
  variants: function
  tags: pointwise

- func: special_log_ndtr.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  structured: True
  structured_inherits: TensorIteratorBase
  python_module: special
  variants: function
  dispatch:
    XPU: special_log_ndtr_out
  tags: pointwise

- func: special_hermite_polynomial_h(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_hermite_polynomial_h.out
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_h.x_scalar(Scalar x, Tensor n) -> Tensor
  dispatch:
    CompositeExplicitAutograd: special_hermite_polynomial_h
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_h.n_scalar(Tensor x, Scalar n) -> Tensor
  dispatch:
    CompositeExplicitAutograd: special_hermite_polynomial_h
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_h.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_hermite_polynomial_h_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_h.x_scalar_out(Scalar x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: special_hermite_polynomial_h_out
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_h.n_scalar_out(Tensor x, Scalar n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: special_hermite_polynomial_h_out
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_he(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_hermite_polynomial_he.out
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_he.x_scalar(Scalar x, Tensor n) -> Tensor
  dispatch:
    CompositeExplicitAutograd: special_hermite_polynomial_he
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_he.n_scalar(Tensor x, Scalar n) -> Tensor
  dispatch:
    CompositeExplicitAutograd: special_hermite_polynomial_he
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_he.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_hermite_polynomial_he_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_he.x_scalar_out(Scalar x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: special_hermite_polynomial_he_out
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_hermite_polynomial_he.n_scalar_out(Tensor x, Scalar n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: special_hermite_polynomial_he_out
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_laguerre_polynomial_l(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_laguerre_polynomial_l.out
  variants: function
  tags: pointwise

- func: special_laguerre_polynomial_l.x_scalar(Scalar x, Tensor n) -> Tensor
  dispatch:
    CompositeExplicitAutograd: special_laguerre_polynomial_l
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_laguerre_polynomial_l.n_scalar(Tensor x, Scalar n) -> Tensor
  dispatch:
    CompositeExplicitAutograd: special_laguerre_polynomial_l
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_laguerre_polynomial_l.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_laguerre_polynomial_l_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_laguerre_polynomial_l.x_scalar_out(Scalar x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: special_laguerre_polynomial_l_out
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_laguerre_polynomial_l.n_scalar_out(Tensor x, Scalar n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: special_laguerre_polynomial_l_out
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_legendre_polynomial_p(Tensor x, Tensor n) -> Tensor
  device_check: NoCheck
  python_module: special
  structured_delegate: special_legendre_polynomial_p.out
  variants: function
  tags: pointwise

- func: special_legendre_polynomial_p.x_scalar(Scalar x, Tensor n) -> Tensor
  dispatch:
    CompositeExplicitAutograd: special_legendre_polynomial_p
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_legendre_polynomial_p.n_scalar(Tensor x, Scalar n) -> Tensor
  dispatch:
    CompositeExplicitAutograd: special_legendre_polynomial_p
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_legendre_polynomial_p.out(Tensor x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  device_check: NoCheck
  dispatch:
    XPU: special_legendre_polynomial_p_out
  python_module: special
  structured_inherits: TensorIteratorBase
  structured: True
  variants: function
  tags: pointwise

- func: special_legendre_polynomial_p.x_scalar_out(Scalar x, Tensor n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: special_legendre_polynomial_p_out
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: special_legendre_polynomial_p.n_scalar_out(Tensor x, Scalar n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeExplicitAutograd: special_legendre_polynomial_p_out
  device_check: NoCheck
  python_module: special
  variants: function
  tags: pointwise

- func: rrelu_with_noise.out(Tensor self, Tensor(b!) noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  tags: nondeterministic_seeded
  dispatch:
    XPU: rrelu_with_noise_out_xpu

- func: rrelu_with_noise(Tensor self, Tensor(b!) noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor
  python_module: nn
  dispatch:
    XPU: rrelu_with_noise_xpu
  tags: nondeterministic_seeded
  autogen: rrelu_with_noise_functional

- func: rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> Tensor
  python_module: nn
  dispatch:
    CompositeExplicitAutograd: rrelu_with_noise_backward
  autogen: rrelu_with_noise_backward.out

- func: rrelu_with_noise_(Tensor(a!) self, Tensor(b!) noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)
  python_module: nn
  tags: nondeterministic_seeded
  dispatch:
    XPU: rrelu_with_noise_xpu_

- func: _fused_sgd_(Tensor(a!)[] self, Tensor(b!)[] grads, Tensor(c!)[] momentum_buffer_list, *, float weight_decay, float momentum, float lr, float dampening, bool nesterov, bool maximize, bool is_first_step, Tensor? grad_scale=None, Tensor? found_inf=None) -> ()
  # Unlike "foreach" functions, lists of tensors should be guaranteed to be on the same device (for now).
  variants: function
  dispatch:
    XPU: _fused_sgd_kernel_xpu_
  autogen: _fused_sgd, _fused_sgd.out

- func: _fused_sgd_.tensor_lr(Tensor(a!)[] self, Tensor(b!)[] grads, Tensor(c!)[] momentum_buffer_list, *, float weight_decay, float momentum, Tensor lr, float dampening, bool nesterov, bool maximize, bool is_first_step, Tensor? grad_scale=None, Tensor? found_inf=None) -> ()
  # Unlike "foreach" functions, lists of tensors should be guaranteed to be on the same device (for now).
  # but still skip the device check as the Tensor LR can be on CPU
  device_check: NoCheck
  variants: function
  dispatch:
    XPU: _fused_sgd_kernel_xpu_
  autogen: _fused_sgd.tensor_lr, _fused_sgd.tensor_lr_out

# NOTE [ Sparse: autograd and API ]
#
#
# Sparse Tensor Constructors
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# The API entry points to sparse tensor construction should be
# `sparse_coo tensor` and `_sparse_coo_tensor_unsafe`. Depending on whether the
# indices and values tensors are given, they eventually dispatch to either
# `sparse_coo_tensor_with_dims` or `sparse_coo_tensor_with_dims_and_tensors`.
#
# The autograd support for ctor is implement on `sparse_coo_tensor_with_dims_and_tensors`.
#
# The API methods `sparse_coo tensor` and `_sparse_coo_tensor_unsafe`
# **must not** have specific type dispatches because otherwise codegen will
# consider them as abstract methods (see Note [Abstract ATen methods]), dispatch
# using **Tensor** type, and thus lose autograd tracking on the actual method
# they dispatch to, e.g., `sparse_coo_tensor_with_dims_and_tensors`.
#
#
# Sparse Methods API Design
# ~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Goals: 1. Flexible API for users to write custom sparse ops
#        2. ctor and member accessor with autograd support
#
# To achieve 1, we need to provide a set of *dangerous* APIs (dangerous in the
# sense that misusing them will break sparse tensor invariant and may out in
# unexpected behavior, e.g., crash). These methods are all prefixed with
# underscore "_" to indicate that they should be used with care. We provide:
#
#   + `_indices()`: returns the *raw* indices within the sparse tensor (not just
#                   sharing storage). Any inplace operation will change the
#                   actual indices, including t_, set_, as_strided_, resize_,
#                   etc.
#   + `_values()`: returns the *raw* values within the sparse tensor. Similar
#                  semantics as `_indices()`
#   + `_nnz()`: returns the number of non-zero entries. This will always be
#               determined by the shapes of indices and values.
#   + `_coalesced_(bool)`: inplace sets whether the tensor is coalesced, and
#                          returns itself.
#
# These methods are very useful in writing new operations, e.g., a custom
# autograd Function.
#
# We also provide other public *safe* APIs:
#   + `indices()`: returns a **view** of the indices tensor if the sparse tensor
#                  is **coalesced**.
#   + `values()`: returns a **view** of the values tensor if the containing
#                 sparse tensor is **coalesced**.
#   + `sparse_dim()`: number of sparse dimensions
#   + `dense_dim()`: number of dense dimensions
#   + `is_coalesced()`: whether the sparse tensor is coalesced
#
# `_indices()` and `_values()` should returns the raw indices and values dense
# tensors within a sparse tensor. They can be quite unsafe with inplace
# operations like `t_()`, and exposes uncoalesced indices and values. The public
# recommended API is `indices()` and `values()`, both of which first check that
# the tensor is coalesced and return views on those tensors.
#
#
# Autograd Support
# ~~~~~~~~~~~~~~~~
#
# Autograd is supported on `values()` and sparse tensor ctor with indices and
# values tensors. E.g., `torch.sparse_coo_tensor(i, v).values().sum()` is
# differentiable w.r.t. `v`.
#
# NB: The `values()` and `_values()` operators are special in that they are
# layout-aware, i.e., the output depends not just on the data it represents, but
# also on the input layout details (in this case, the `indices` tensor). See
# NOTE [ as_strided Backward and layout-aware/agnostic autograd ] in Functions.cpp
# for discussion on layout-aware vs layout-agnostic autograd. Since PyTorch ops
# operate in the layout-agnostic mode, similar to `as_strided`, backward of
# these two operators need to consider them in a layout-agnostic way:
#   + `values()`:
#     Input is coalesced.
#     We just pretend having `input.indices()` as an additional argument
#     `input_indices`, then forward is similar to
#     `input.to(kStrided).index_select(input_indices)` regardless of the layout.
#     Note that `values()` normally is layout-aware even if we constrain
#     ourselves on sparse inputs since it may include all zeros values entries
#     as "present" entries.
#   + `_values()`:
#     Input may be uncoalesced.
#     It is not straightforward to construct a layout-agnostic version because
#     duplicate indices entries may exist and additional parameterization is
#     needed to distribute the value into different values entries. Furthermore,
#     this op is intended to provide ways to write custom sparse ops, rather
#     than being used in autograd graph, so it is marked as *non-differentiable*
#     in derivatives.yaml.
#
# Before reading the following, see NOTE [ Autograd Variable Views ] in
# variable.h for details on views that are tracked by autograd, and views that
# are not.
#
# Moreover, these methods return tensors that share storage with inputs, so we
# mark these methods as view ops to support autograd history tracking.
# The sparse tensor ctor output should technically be view of both input indices
# and values tensors, but currently we only support setting as view of a single
# Variable, so it is only view of the values tensor.
# TODO: clone indices in sparse tensor ctor.
#
# For other methods that return outputs that share storage with inputs, i.e.,
# `indices()` and `_indices()`. We mark their outputs as non-differentiable, so
# the view relation is not tracked by autograd, but the version counter is still
# shared. In other words, their outputs are non-differentiable views of the
# sparse tensor.
# FIXME: would be nicer if TensorOptions was optional based; not adding default arguments for options given
# the default would never make sense.

- func: sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)
  use_const_ref_for_mutable_tensors: True
  variants: method
  dispatch:
    SparseXPU: sparse_resize_
  autogen: sparse_resize, sparse_resize.out

- func: _sparse_broadcast_to_copy(Tensor self, int[] size) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: _sparse_broadcast_to_copy
  tags: view_copy
  autogen: _sparse_broadcast_to_copy.out

- func: _sparse_broadcast_to(Tensor(a) self, int[] size) -> Tensor(a)
  variants: function
  dispatch:
    SparseXPU: sparse_broadcast_to

- func: _sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor
  dispatch:
    SparseXPU: new_with_dims_sparse
  autogen: _sparse_coo_tensor_with_dims.out

- func: _sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, SymInt[] size, Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False, bool? is_coalesced=None) -> Tensor
  dispatch:
    SparseXPU: new_with_dims_and_tensor_sparse_symint
  autogen: _sparse_coo_tensor_with_dims_and_tensors.out

- func: _sparse_sum(Tensor self) -> Tensor

- func: _sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor

- func: _sparse_sum.dim(Tensor self, int[1] dim) -> Tensor
  dispatch:
    CompositeExplicitAutograd: _sparse_sum
  autogen: _sparse_sum.dim_out

- func: _sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor

- func: _sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor
  dispatch:
    SparseXPU: _sparse_sum_backward_xpu
  autogen: _sparse_sum_backward.out

- func: _sparse_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
  python_module: sparse
  variants: function

- func: _sparse_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
  python_module: sparse
  variants: function

- func: _sparse_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
  python_module: sparse
  dispatch:
    SparseXPU: softmax_sparse_xpu
  autogen: _sparse_softmax.out

- func: _sparse_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor
  dispatch:
    SparseXPU: softmax_backward_sparse_xpu
  autogen: _sparse_softmax_backward_data.out

- func: _sparse_log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
  python_module: sparse
  variants: function

- func: _sparse_log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
  python_module: sparse
  variants: function

- func: _sparse_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
  python_module: sparse
  dispatch:
    SparseXPU: log_softmax_sparse_xpu
  autogen: _sparse_log_softmax.out

- func: _sparse_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor
  dispatch:
    SparseXPU: log_softmax_backward_sparse_xpu
  autogen: _sparse_log_softmax_backward_data.out

- func: sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)
  use_const_ref_for_mutable_tensors: True
  variants: method
  dispatch:
    SparseXPU: sparse_resize_and_clear_
  autogen: sparse_resize_and_clear, sparse_resize_and_clear.out

- func: sparse_mask(Tensor self, Tensor mask) -> Tensor
  variants: method
  dispatch:
    SparseXPU: sparse_mask
    SparseCsrXPU: sparse_mask_sparse_compressed
  autogen: sparse_mask.out

- func: _sparse_mask_projection(Tensor self, Tensor mask, bool accumulate_matches=False) -> Tensor
  variants: method
  dispatch:
    SparseXPU: sparse_mask_projection
  autogen: _sparse_mask_projection.out

- func: to_dense(Tensor self, ScalarType? dtype=None, *, bool? masked_grad=None) -> Tensor
  variants: method

# Special case of to_dense with custom derivative
- func: _to_dense(Tensor self, ScalarType? dtype=None, bool? masked_grad=None) -> Tensor
  variants: method
  dispatch:
    SparseXPU: sparse_to_dense
    SparseCsrXPU: sparse_compressed_to_dense
  autogen: _to_dense.out

- func: to_dense_backward(Tensor grad, Tensor input, bool? masked_grad=None) -> Tensor

- func: sparse_dim(Tensor self) -> int
  variants: method
  dispatch:
    SparseXPU: sparse_dim_sparse
    SparseCsrXPU: sparse_dim_sparse_csr
  device_check: NoCheck
  device_guard: False

# legacy method
- func: _dimI(Tensor self) -> int
  variants: method
  dispatch:
    SparseXPU: sparse_dim_sparse
  device_check: NoCheck
  device_guard: False

- func: dense_dim(Tensor self) -> int
  variants: method
  dispatch:
    SparseXPU: dense_dim_sparse
    SparseCsrXPU: dense_dim_sparse_csr
  device_check: NoCheck
  device_guard: False

# legacy method
- func: _dimV(Tensor self) -> int
  variants: method
  dispatch:
    SparseXPU: dense_dim_sparse
  device_check: NoCheck
  device_guard: False

- func: _nnz(Tensor self) -> int
  variants: method
  dispatch:
    SparseXPU: _nnz_sparse
    SparseCsrXPU: _nnz_sparse_csr
  device_check: NoCheck
  device_guard: False

- func: _indices_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: _indices_copy
  tags: view_copy
  autogen: _indices_copy.out

- func: _values_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: _values_copy
  tags: view_copy
  autogen: _values_copy.out

- func: indices_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: indices_copy
  tags: view_copy
  autogen: indices_copy.out

- func: values_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: values_copy
  tags: view_copy
  autogen: values_copy.out

- func: crow_indices_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: crow_indices_copy
  tags: view_copy
  autogen: crow_indices_copy.out

- func: col_indices_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: col_indices_copy
  tags: view_copy
  autogen: col_indices_copy.out

- func: ccol_indices_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: ccol_indices_copy
  tags: view_copy
  autogen: ccol_indices_copy.out

- func: row_indices_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: row_indices_copy
  tags: view_copy
  autogen: row_indices_copy.out

- func: _indices(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseXPU: _indices_sparse
  device_check: NoCheck
  device_guard: False

- func: _values(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseXPU: _values_sparse
  device_check: NoCheck
  device_guard: False

# NOTE: [ coalesce autograd ]
# coalesce returns self directly for already coalesced sparse tensors.
# This means coalesce cannot have a derivative registered, otherwise it creates
# circular references in the autograd graph (see gh-52874).
# Instead, the derivative is registered on the slow-path "_coalesce"
- func: coalesce(Tensor(a) self) -> Tensor(a)
  variants: method

- func: _coalesce(Tensor self) -> Tensor
  dispatch:
    SparseXPU: _coalesce_sparse_xpu
  autogen: _coalesce.out

- func: is_coalesced(Tensor self) -> bool
  variants: method
  dispatch:
    SparseXPU: is_coalesced_sparse
  device_check: NoCheck
  device_guard: False

# This method doesn't do any check but only directly sets the flag. So it can be
# a bit unsafe. Similar to _indices and _values, this is useful for implementing
# custom sparse operations in Python/C++ extension.

- func: _coalesced_(Tensor(a!) self, bool coalesced) -> Tensor(a!)
  variants: method
  dispatch:
    SparseXPU: _coalesced_sparse_
  device_check: NoCheck
  device_guard: False
  autogen: _coalesced, _coalesced.out

- func: indices(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseXPU: indices_sparse
    CompositeExplicitAutograd: indices_default
  device_check: NoCheck
  device_guard: False

- func: values(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseXPU: values_sparse
    SparseCsrXPU: values_sparse_csr
    NestedTensorXPU: values_nested
  device_check: NoCheck
  device_guard: False

- func: crow_indices(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseCsrXPU: crow_indices_sparse_csr
    CompositeExplicitAutograd: crow_indices_default
  device_check: NoCheck
  device_guard: False

- func: col_indices(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseCsrXPU: col_indices_sparse_csr
    CompositeExplicitAutograd: col_indices_default
  device_check: NoCheck
  device_guard: False

- func: ccol_indices(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseCsrXPU: ccol_indices_sparse_csr
    CompositeExplicitAutograd: ccol_indices_default
  device_check: NoCheck
  device_guard: False

- func: row_indices(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseCsrXPU: row_indices_sparse_csr
    CompositeExplicitAutograd: row_indices_default
  device_check: NoCheck
  device_guard: False

# Special case of to_sparse.sparse_dim with custom derivative
- func: _to_sparse.sparse_dim(Tensor self, int sparse_dim) -> Tensor
  variants: method
  dispatch:
    XPU: dense_to_sparse
    SparseXPU: sparse_coo_to_sparse
    SparseCsrXPU: sparse_compressed_to_sparse
  autogen: _to_sparse.sparse_dim_out

- func: to_sparse(Tensor self, *, Layout? layout=None, int[2]? blocksize=None, int? dense_dim=None) -> Tensor
  variants: method

# Special case of to_sparse with custom derivative
- func: _to_sparse(Tensor self, *, Layout? layout=None, int[2]? blocksize=None, int? dense_dim=None) -> Tensor
  variants: method
  dispatch:
    XPU: dense_to_sparse
    SparseXPU: sparse_coo_to_sparse
    SparseCsrXPU: sparse_compressed_to_sparse
  autogen: _to_sparse.out

- func: to_sparse_bsr(Tensor self, int[2] blocksize, int? dense_dim=None) -> Tensor
  variants: method

# Special case of to_sparse_bsr with custom derivative
- func: _to_sparse_bsr(Tensor self, int[2] blocksize, int? dense_dim=None) -> Tensor
  variants: method
  dispatch:
    XPU: dense_to_sparse_bsr
    SparseXPU: coo_to_sparse_bsr
    SparseCsrXPU: sparse_compressed_to_sparse_bsr
  autogen: _to_sparse_bsr.out

- func: to_sparse_csr(Tensor self, int? dense_dim=None) -> Tensor
  variants: method

# Special case of to_sparse_csr with custom derivative
- func: _to_sparse_csr(Tensor self, int? dense_dim=None) -> Tensor
  variants: method
  dispatch:
    XPU: dense_to_sparse_csr
    SparseXPU: coo_to_sparse_csr
    SparseCsrXPU: sparse_compressed_to_sparse_csr
  autogen: _to_sparse_csr.out

- func: to_sparse_bsc(Tensor self, int[2] blocksize, int? dense_dim=None) -> Tensor
  variants: method

# Special case of to_sparse_bsc with custom derivative
- func: _to_sparse_bsc(Tensor self, int[2] blocksize, int? dense_dim=None) -> Tensor
  variants: method
  dispatch:
    XPU: dense_to_sparse_bsc
    SparseXPU: coo_to_sparse_bsc
    SparseCsrXPU: sparse_compressed_to_sparse_bsc
  autogen: _to_sparse_bsc.out

- func: to_sparse_csc(Tensor self, int? dense_dim=None) -> Tensor
  variants: method

# Special case of to_sparse_csc with custom derivative
- func: _to_sparse_csc(Tensor self, int? dense_dim=None) -> Tensor
  variants: method
  dispatch:
    XPU: dense_to_sparse_csc
    SparseXPU: coo_to_sparse_csc
    SparseCsrXPU: sparse_compressed_to_sparse_csc
  autogen: _to_sparse_csc.out

# - func: _to_sparse_semi_structured(Tensor dense) -> (Tensor, Tensor)
#   variants: function
#   dispatch:
#     XPU: _to_sparse_semi_structured

- func: copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)
  device_check: NoCheck  # Allows copy into different device
  variants: function
  dispatch:
    SparseXPU: copy_sparse_
  autogen: copy_sparse_to_sparse, copy_sparse_to_sparse.out

- func: _sparse_csr_sum.dim_dtype(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  dispatch:
    SparseCsrXPU: _sparse_csr_sum_xpu
  autogen: _sparse_csr_sum.dim_dtype_out

- func: _sparse_csr_prod.dim_dtype(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  dispatch:
    SparseCsrXPU: _sparse_csr_prod_xpu
  autogen: _sparse_csr_prod.dim_dtype_out

- func: unbind_copy.int(Tensor self, int dim=0) -> Tensor[]
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: unbind_copy_int
  tags: view_copy

- func: unbind_copy.int_out(Tensor self, int dim=0, *, Tensor(a!)[] out) -> ()
  variants: function
  dispatch:
    CompositeExplicitAutograd: unbind_copy_int_out

- func: unbind.int(Tensor(a -> *) self, int dim=0) -> Tensor(a)[]
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: unbind
    NestedTensorXPU: NestedTensor_unbind

- func: _weight_int4pack_mm(Tensor self, Tensor mat2, int qGroupSize, Tensor qScaleAndZeros) -> Tensor
  dispatch:
    XPU: _weight_int4pack_mm_xpu
  # autogen: _weight_int4pack_mm.out
  # tags: core

- func: _nested_compute_contiguous_strides_offsets(Tensor nested_size) -> (Tensor, Tensor)
  variants: function
  device_check: NoCheck
  dispatch:
    XPU: _nested_compute_contiguous_strides_offsets

- func: _nested_tensor_from_mask(Tensor t, Tensor mask, bool mask_check=True) -> Tensor
  dispatch:
    XPU: NestedTensor_nested_tensor_from_mask
  autogen: _nested_tensor_from_mask.out

- func: _nested_tensor_from_mask_left_aligned(Tensor t, Tensor mask) -> bool
  dispatch:
    XPU: NestedTensor_nested_tensor_from_mask_left_aligned

- func: _nested_view_from_buffer(Tensor(a) self, Tensor nested_size, Tensor nested_strides, Tensor offsets) -> Tensor(a)
  variants: function
  device_check: NoCheck
  dispatch:
    XPU: _nested_view_from_buffer

- func: _nested_view_from_buffer_copy(Tensor self, Tensor nested_size, Tensor nested_strides, Tensor offsets) -> Tensor
  variants: function
  device_check: NoCheck
  tags: view_copy
  dispatch:
    CompositeExplicitAutogradNonFunctional: _nested_view_from_buffer_copy
  autogen: _nested_view_from_buffer_copy.out

- func: _nested_select_backward(Tensor grad_output, Tensor self, int dim, SymInt index) -> Tensor
  variants: function
  device_check: NoCheck
  device_guard: False
  dispatch:
    NestedTensorXPU: _nested_select_backward_symint

- func: chunk(Tensor(a -> *) self, int chunks, int dim=0) -> Tensor(a)[]
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeImplicitAutograd: chunk
    NestedTensorXPU: chunk_nested_tensor

- func: embedding(Tensor weight, Tensor indices, SymInt padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor
  dispatch:
    CompositeExplicitAutograd: embedding_symint
    NestedTensorXPU: NestedTensor_embedding
  autogen: embedding.out
  tags: core

- func: is_same_size(Tensor self, Tensor other) -> bool
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    NestedTensorXPU: nested_is_same_size
    CompositeExplicitAutograd: is_same_size

- func: linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor
  python_module: nn
  dispatch:
    CompositeImplicitAutograd: linear
    NestedTensorXPU: nested_linear

- func: linear_backward(Tensor self, Tensor grad_output, Tensor weight, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  dispatch:
    NestedTensorXPU: nested_linear_backward
  autogen: linear_backward.out

- func: matmul(Tensor self, Tensor other) -> Tensor
  variants: function, method
  dispatch:
    CompositeImplicitAutograd: matmul
    NestedTensorXPU: matmul_nested

- func: matmul_backward(Tensor grad, Tensor self, Tensor other, bool[2] mask) -> (Tensor, Tensor)
  dispatch:
    NestedTensorXPU: matmul_backward_nested
  autogen: matmul_backward.out

- func: matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CompositeImplicitAutograd: matmul_out
    NestedTensorXPU: matmul_out_nested

- func: narrow(Tensor(a) self, int dim, SymInt start, SymInt length) -> Tensor(a)
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeImplicitAutograd: narrow_symint
    NestedTensorXPU: narrow_nested_symint

- func: ones_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  dispatch:
    # NB: Although this composite mutates on the inside, it is
    # non-differentiable so NonFunctional doesn't apply
    CompositeExplicitAutograd: ones_like
    NestedTensorXPU: ones_like
  autogen: ones_like.out

- func: split_with_sizes(Tensor(a -> *) self, SymInt[] split_sizes, int dim=0) -> Tensor(a)[]
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeExplicitAutograd: split_with_sizes
    NestedTensorXPU: split_with_sizes_nested
  tags: core

- func: select_copy.int(Tensor self, int dim, SymInt index) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: select_copy_symint
    SparseCsrXPU: select_copy_sparse_csr
  tags: view_copy
  autogen: select_copy.int_out

- func: select.int(Tensor(a) self, int dim, SymInt index) -> Tensor(a)
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeExplicitAutograd: select_symint
    NestedTensorXPU: select_nested
    SparseCsrXPU: select_sparse_csr
  tags: core

- func: squeeze_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: squeeze_copy
  tags: view_copy
  autogen: squeeze_copy.out

- func: squeeze_copy.dim(Tensor self, int dim) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: squeeze_copy_dim
  tags: view_copy
  autogen: squeeze_copy.dim_out

- func: squeeze_copy.dims(Tensor self, int[] dim) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: squeeze_copy_dims
  tags: view_copy
  autogen: squeeze_copy.dims_out

- func: squeeze(Tensor(a) self) -> Tensor(a)
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeExplicitAutograd: squeeze
    NestedTensorXPU: squeeze_nested

- func: squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeExplicitAutograd: squeeze
    NestedTensorXPU: squeeze_dim_nested
  tags: core

- func: squeeze.dims(Tensor(a) self, int[] dim) -> Tensor(a)
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeExplicitAutograd: squeeze
    NestedTensorXPU: squeeze_dim_nested
  tags: core

- func: detach_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: detach_copy
  tags: view_copy
  autogen: detach_copy.out

- func: detach(Tensor(a) self) -> Tensor(a)
  variants: function, method
  dispatch:
    CompositeExplicitAutograd: detach
    NestedTensorXPU: detach

- func: transpose_copy.int(Tensor self, int dim0, int dim1) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: transpose_copy_int
  tags: view_copy
  autogen: transpose_copy.int_out

- func: transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)
  variants: function, method
  device_check: NoCheck
  device_guard: False
  dispatch:
    CompositeExplicitAutograd: transpose
    NestedTensorXPU: transpose_nested

- func: alias_copy(Tensor self) -> Tensor
  variants: function
  dispatch:
    CompositeExplicitAutogradNonFunctional: alias_copy
  tags: view_copy
  autogen: alias_copy.out

- func: alias(Tensor(a) self) -> Tensor(a)
  variants: method, function
  dispatch:
    CompositeExplicitAutograd: alias
    NestedTensorXPU: alias_nested
  tags: core

- func: _test_autograd_multiple_dispatch.fullcoverage(Tensor self) -> Tensor
  dispatch:
    # the NestedTensor keys are necessary because NestedTensor has been removed
    # from the CompositeExplicitAutograd keyset see Note [NestedTensor Not Included in Backend Keys]
    CompositeExplicitAutograd, NestedTensorXPU: _test_autograd_multiple_dispatch_fullcoverage
  autogen: _test_autograd_multiple_dispatch.fullcoverage_out

# Note: this function is only for testing.
- func: _test_autograd_multiple_dispatch.ntonly(Tensor self, bool b) -> Tensor
  dispatch:
    CompositeImplicitAutograd, NestedTensorXPU: _test_autograd_multiple_dispatch_ntonly

# Apparently, putting "forward" in the name will cause Python bindings to be skipped, so "fwd" it is.
- func: _transformer_encoder_layer_fwd(Tensor src, int embed_dim, int num_heads, Tensor qkv_weight, Tensor qkv_bias, Tensor proj_weight, Tensor proj_bias, bool use_gelu, bool norm_first, float eps, Tensor norm_weight_1, Tensor norm_bias_1, Tensor norm_weight_2, Tensor norm_bias_2, Tensor ffn_weight_1, Tensor ffn_bias_1, Tensor ffn_weight_2, Tensor ffn_bias_2, Tensor? mask=None, int? mask_type=None) -> Tensor
  variants: function
  dispatch:
    XPU, NestedTensorXPU: transformer_encoder_layer_forward
  autogen: _transformer_encoder_layer_fwd.out

- func: nested_to_padded_tensor(Tensor self, float padding, int[]? output_size=None) -> Tensor
  python_module: nested
  variants: function

- func: to_padded_tensor(Tensor self, float padding, SymInt[]? output_size=None) -> Tensor
  variants: method
  dispatch:
    NestedTensorXPU: NestedTensor_to_padded_tensor_xpu
  autogen: to_padded_tensor.out

# Standard complex to complex FFT (forward or backward)
- func: _fft_c2c(Tensor self, SymInt[] dim, int normalization, bool forward) -> Tensor
  variants: function
  dispatch:
    XPU: _fft_c2c_xpu

- func: _fft_c2c.out(Tensor self, SymInt[] dim, int normalization, bool forward, *, Tensor(a!) out) -> Tensor(a!)
  variants: function
  dispatch:
    XPU: _fft_c2c_xpu_out
